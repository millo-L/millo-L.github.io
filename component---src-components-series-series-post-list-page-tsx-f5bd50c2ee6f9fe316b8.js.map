{"version":3,"sources":["webpack:///./src/components/series/SeriesPost.tsx","webpack:///./src/components/series/SeriesPostList.tsx","webpack:///./src/components/series/SeriesPostListPage.tsx","webpack:///./src/components/base/Footer.tsx","webpack:///./src/components/main/MainTemplate.tsx","webpack:///./src/lib/list/reshape.ts","webpack:///./src/components/common/RatioImage.tsx"],"names":["Wrapper","Styled","div","mediaQuery","media","custom","palette","gray","Content","ellipsis","StyledLink","Link","SeriesPost","post","index","to","path","title","image","RatioImage","widthRatio","heightRatio","fluid","style","maxHeight","className","description","replace","length","formatDate","released_at","lang","updated_at","memo","indigo","SeriesPostList","posts","series","Adsense","display","adClient","adSlot","adFormat","adLayout","map","key","createGlobalStyle","SeriesPostListPage","data","allMarkdownRemark","site","MainTemplate","SEO","edges","node","frontmatter","url","siteMetadata","siteUrl","date","childImageSharp","src","Header","ko_to","translation_series","en_to","MainResponsive","filterByLanguage","reshapePost","Footer","FooterWrapper","BackgroundStyle","styled","children","edge","obj","fields","slug","category","push","filterByCategory","filter","list","item","reshapeSeries","seriesList","group","len","i","nodes","fieldValue","totalCount","RatioImageBlock"],"mappings":"4OASMA,EAAUC,IAAOC,IAAV,sEAAGD,CAAH,wZAaHE,YAAW,MAQXC,IAAMC,OAAO,MAMSC,IAAQC,KAAK,IAKvCC,EAAUP,IAAOC,IAAV,sEAAGD,CAAH,4YAWHQ,IACOH,IAAQC,KAAK,GACpBJ,YAAW,KAaJG,IAAQC,KAAK,GAMbD,IAAQC,KAAK,IAKxBG,EAAaT,YAAOU,KAAV,yEAAGV,CAAH,uDAWVW,EAAa,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,MACxB,OACI,kBAACd,EAAD,KACI,kBAACU,EAAD,CAAYK,GAAE,GAAKF,EAAKG,MACpB,4BAAKF,EAAQ,EAAb,KAAkBD,EAAKI,QAE1BJ,EAAKK,OACF,kBAACR,EAAD,CAAYK,GAAE,GAAKF,EAAKG,MACpB,kBAACG,EAAA,EAAD,CACIC,WAAY,EACZC,YAAa,EACbC,MAAOT,EAAKK,MACZK,MAAO,CAAEC,UAAW,WAIhC,kBAAChB,EAAD,KACI,kBAACE,EAAD,CAAYK,GAAE,GAAKF,EAAKG,MACpB,yBAAKS,UAAU,uBACX,2BACKZ,EAAKa,YAAYC,QAAQ,UAAW,KACR,MAA5Bd,EAAKa,YAAYE,QAAkB,SAIhD,kBAAClB,EAAD,CAAYK,GAAE,GAAKF,EAAKG,MACpB,yBAAKS,UAAU,YACX,8BAAOI,YAAWhB,EAAKiB,YAAajB,EAAKkB,OACxClB,EAAKmB,YACF,oCACI,6BACA,8BAAqB,OAAdnB,EAAKkB,KAAgB,OAAS,kBAAmBF,YAAWhB,EAAKmB,WAAYnB,EAAKkB,aAU1GE,iBAAKrB,GC1HdZ,EAAUC,IAAOC,IAAV,8EAAGD,CAAH,2VAQPE,YAAW,MAGXA,YAAW,MAGXA,YAAW,KAMkBG,IAAQC,KAAK,GAElCH,IAAMC,OAAO,MAMNC,IAAQ4B,OAAO,GACG5B,IAAQ4B,OAAO,GACxC9B,IAAMC,OAAO,MAEgBC,IAAQ4B,OAAO,IAYpDC,EAAiB,SAAC,GAAiD,IAA/CC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,OAAQN,EAAgC,EAAhCA,KACrC,OACI,kBAAC,EAAD,KACI,yBAAKN,UAAU,iBACX,4BAAc,OAATM,EAAgB,MAAQ,UAC7B,4BAAKM,IAGT,kBAACC,EAAA,EAAD,CACIf,MAAO,CAAEgB,QAAS,SAClBC,SAAS,0BACTC,OAAO,aACPC,SAAS,QACTC,SAAS,kBAEZP,EAAMQ,KAAI,SAAC/B,EAAMC,GAAP,OACP,kBAAC,EAAD,CAAYD,KAAMA,EAAMC,MAAOA,EAAO+B,IAAK/B,SAM5CmB,iBAAKE,G,sEC9DpBW,YAAiB,qFAUjB,IAQMC,EAAqB,SAAC,GAAsC,IAR7CV,EAQSW,EAAoC,EAApCA,KAClBC,EAA4BD,EAA5BC,kBAAmBC,EAASF,EAATE,KAC3B,OAAMD,GAAqBC,EAGvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACInC,MAAOgC,EAAkBI,MAAM,GAAGC,KAAKC,YAAYlB,OACnDmB,IAAQN,EAAKO,aAAaC,QAAvB,IAAkCT,EAAkBI,MAAM,GAAGC,KAAKC,YAAYlB,OAAOV,QAAQ,MAAO,KACvGI,KAAMkB,EAAkBI,MAAM,GAAGC,KAAKC,YAAYxB,KAClD4B,KAAMV,EAAkBI,MAAM,GAAGC,KAAKC,YAAYzB,YAClDZ,MAAO+B,EAAkBI,MAAM,GAAGC,KAAKC,YAAYrC,MAAM0C,gBAAgBtC,MAAMuC,IAC/EnC,aApBKW,EAoBoBY,EAAkBI,MAAM,GAAGC,KAAKC,YAAYlB,OAnBlE,qBAAXA,EACO,wCACW,8BAAXA,EACA,gFADJ,KAmBC,kBAACyB,EAAA,EAAD,CACI/B,KAAMkB,EAAkBI,MAAM,GAAGC,KAAKC,YAAYxB,KAClDgC,MACyD,OAArDd,EAAkBI,MAAM,GAAGC,KAAKC,YAAYxB,KACtC,IAEqE,SAAnEkB,EAAkBI,MAAM,GAAGC,KAAKC,YAAYS,mBACtC,UAAYf,EAAkBI,MAAM,GAAGC,KAAKC,YAAYS,mBACxD,IAElBC,MACyD,OAArDhB,EAAkBI,MAAM,GAAGC,KAAKC,YAAYxB,KACtC,IAEqE,SAAnEkB,EAAkBI,MAAM,GAAGC,KAAKC,YAAYS,mBACtC,UAAYf,EAAkBI,MAAM,GAAGC,KAAKC,YAAYS,mBACxD,MAGtB,kBAACE,EAAA,EAAD,KACI,kBAAC,EAAD,CACI9B,MAAO+B,YAAiBC,YAAYnB,GAAoBA,EAAkBI,MAAM,GAAGC,KAAKC,YAAYxB,MACpGM,OAAQY,EAAkBI,MAAM,GAAGC,KAAKC,YAAYlB,OACpDN,KAAMkB,EAAkBI,MAAM,GAAGC,KAAKC,YAAYxB,OAEtD,kBAACsC,EAAA,EAAD,QArC6B,+BAgF9BpC,yBAAKc,I,kCChHpB,6DAKMuB,EAAgBrE,IAAOC,IAAV,4EAAGD,CAAH,6TAESK,IAAQC,KAAK,IAmC1B8D,IATA,WACX,OACI,kBAACC,EAAD,KACI,mDACA,kBAAC,IAAD,CAAc7C,UAAU,oB,iGChC9B8C,G,UAAkBzB,YAAH,8GAECxC,IAAQC,KAAK,KAkBnC,IAAMP,EAAUwE,IAAOtE,IAAV,4EAAGsE,CAAH,MAEErB,IAXf,YAAuD,IAA/BsB,EAA+B,EAA/BA,SACpB,OACI,oCACI,kBAACF,EAAD,MACA,kBAACvE,EAAD,KAAUyE,M,kCCjBtB,wIAAO,IAAML,EAAc,SAACnB,GACxB,IAAIb,EAAgC,GAmBpC,OAlBkBa,EAAVI,MAEFT,KAAI,SAAA8B,GACN,IAAMC,EAAMD,EAAKpB,KAAKC,YAClB1C,EAAwB,CACxBG,KAAM0D,EAAKpB,KAAKsB,OAAOC,KACvB5D,MAAO0D,EAAI1D,MACXS,YAAaiD,EAAIjD,YACjBI,YAAa6C,EAAI7C,YACjBE,WAAY2C,EAAI3C,WAChBd,MAAOyD,EAAIzD,MAAQyD,EAAIzD,MAAM0C,gBAAgBtC,MAAQ,KACrDS,KAAM4C,EAAI5C,KACV+C,SAAUH,EAAIG,UAGlB1C,EAAM2C,KAAKlE,MAGRuB,GAGE4C,EAAmB,SAC5B5C,EACA0C,GAEA,OAAO1C,EAAM6C,QAAO,SAAApE,GAAI,OAAIA,EAAKiE,WAAaA,MAG3C,SAASX,EAAoBe,EAAWnD,GAC3C,OAAOmD,EAAKD,QAAO,SAAAE,GAAI,OAAKA,EAAapD,OAASA,KAG/C,IAAMqD,EAAgB,SAACnC,GAK1B,IAJA,IAAIoC,EAAgC,GAC5BC,EAAUrC,EAAVqC,MACJC,EAAMD,EAAM1D,OAEP4D,EAAI,EAAGA,EAAID,EAAKC,IAAK,CAC1B,IAAMb,EAAMW,EAAME,GAAGC,MAAM,GAAGlC,YAC1BlB,EAAqB,CACrBrB,KAAM,WAAWsE,EAAME,GAAGE,WAAW/D,QAAQ,MAAO,KACpDV,MAAOqE,EAAME,GAAGE,WAChBxE,MAAOyD,EAAIzD,MAAQyD,EAAIzD,MAAM0C,gBAAgBtC,MAAQ,KACrDU,WAAY2C,EAAI7C,YAChB6D,WAAYL,EAAME,GAAGG,WACrB5D,KAAM4C,EAAI5C,MAEdsD,EAAWN,KAAK1C,GAGpB,OAAOgD,I,kCCvDX,sEAKMO,EAAkB3F,IAAOC,IAAV,8EAAGD,CAAH,mNAQfE,YAAW,MAuBXgB,EAAa,SAAC,GAKG,EAJnBC,WAImB,EAHnBC,YAGmB,IAFnBC,EAEmB,EAFnBA,MACAC,EACmB,EADnBA,MAIA,OACI,kBAACqE,EAAD,CAAiBrE,MAAOA,GACpB,kBAAC,IAAD,CAAKE,UAAU,YAAYH,MAAOA,MAK/BW,mBAAKd","file":"component---src-components-series-series-post-list-page-tsx-f5bd50c2ee6f9fe316b8.js","sourcesContent":["import React, { memo } from 'react';\nimport Styled from 'styled-components';\nimport media, { mediaQuery } from '../../lib/styles/media';\nimport { PartialPostType } from '../post/PostCard';\nimport { ellipsis, formatDate } from '../../lib/styles/utils';\nimport palette from '../../lib/styles/palette';\nimport RatioImage from '../common/RatioImage';\nimport { Link } from 'gatsby';\n\nconst Wrapper = Styled.div`\n    width: 100%;\n    background: white;\n    border-radius: 4px;\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\n    margin-top: 2rem;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    &:hover {\n        transform: translateY(-8px);\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\n        ${mediaQuery(1024)} {\n            transform: none;\n        }\n    }\n\n    h2 {\n        margin-left: 1rem;\n        margin-top: 1.5rem;\n        ${media.custom(1056)} {\n            font-size: 1.3rem;\n        }\n    }\n\n    img {\n        border-top: 1px solid ${palette.gray[2]};\n    }\n\n`\n\nconst Content = Styled.div`\n    padding: 1rem;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    h4 {\n        font-size: 1rem;\n        margin: 0;\n        margin-bottom: 0.25rem;\n        line-height: 1.5;\n        word-break: break-word;\n        ${ellipsis}\n        color: ${palette.gray[9]};\n        ${mediaQuery(767)} {\n            white-space: initial;\n        }\n    }\n    .description-wrapper {\n        flex: 1;\n    }\n    p {\n        margin: 0;\n        word-break: break-word;\n        overflow-wrap: break-word;\n        font-size: 0.875rem;\n        line-height: 1.5;\n        color: ${palette.gray[7]};\n        margin-bottom: 1.5rem;\n    }\n    .sub-info {\n        font-size: 0.75rem;\n        line-height: 1.5;\n        color: ${palette.gray[6]};\n    }\n\n`\n\nconst StyledLink = Styled(Link)`\n    display: block;\n    color: inherit;\n    text-decoration: none;\n`\n\ninterface SeriesPost {\n    post: PartialPostType;\n    index: number;\n}\n\nconst SeriesPost = ({ post, index }: SeriesPost) => {\n    return (\n        <Wrapper>\n            <StyledLink to={`${post.path}`}>\n                <h2>{index + 1}. {post.title}</h2>\n            </StyledLink>\n            {post.image && (\n                <StyledLink to={`${post.path}`}>\n                    <RatioImage\n                        widthRatio={2}\n                        heightRatio={1}\n                        fluid={post.image}\n                        style={{ maxHeight: \"100%\" }}\n                    />\n                </StyledLink>\n            )}\n            <Content>\n                <StyledLink to={`${post.path}`}>\n                    <div className=\"description-wrapper\">\n                        <p>\n                            {post.description.replace(/&#x3A;/g, \":\")}\n                            {post.description.length === 150 && \"...\"}\n                        </p>\n                    </div>\n                </StyledLink>\n                <StyledLink to={`${post.path}`}>\n                    <div className=\"sub-info\">\n                        <span>{formatDate(post.released_at, post.lang)}</span>\n                        {post.updated_at && (\n                            <>\n                                <br />\n                                <span>{post.lang === 'ko' ? '수정: ' : 'Last edited at '}{formatDate(post.updated_at, post.lang)}</span>\n                            </>\n                        )}\n                    </div>\n                </StyledLink>\n            </Content>\n        </Wrapper>\n    );\n}\n\nexport default memo(SeriesPost);","import React, { memo } from \"react\"\nimport Styled from \"styled-components\"\nimport media, { mediaQuery } from \"../../lib/styles/media\"\nimport palette from \"../../lib/styles/palette\"\nimport Adsense from \"../common/Adsense\"\nimport { PartialPostType } from \"../post/PostCard\"\nimport SeriesPost from \"./SeriesPost\"\n\nconst Wrapper = Styled.div`\n    display: flex;\n    margin: -1rem;\n    width: 40%;\n    flex-wrap: wrap;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 3rem;\n    ${mediaQuery(1440)} {\n        width: 50%;\n    }\n    ${mediaQuery(1056)} {\n        width: 100%;\n    }\n    ${mediaQuery(767)} {\n        margin: 0;\n    }\n\n    .series-header {\n        width: 100%;\n        border-bottom: 1px solid ${palette.gray[3]};\n        h1 {\n            ${media.custom(1056)} {\n                font-size: 1.4rem;\n            }\n        }\n        h3 {\n            width: 3.4rem;\n            color: ${palette.indigo[7]};\n            border-bottom: 4px solid ${palette.indigo[7]};\n            ${media.custom(1056)} {\n                font-size: 1rem;\n                border-bottom: 3px solid ${palette.indigo[7]};\n                width: 3rem;\n            }\n        }\n    }\n`\ninterface SeriesPostListProps {\n    posts: Array<PartialPostType>\n    series: string\n    lang: string\n}\n\nconst SeriesPostList = ({ posts, series, lang }: SeriesPostListProps) => {\n    return (\n        <Wrapper>\n            <div className=\"series-header\">\n                <h3>{lang === \"ko\" ? \"시리즈\" : \"Series\"}</h3>\n                <h1>{series}</h1>\n            </div>\n\n            <Adsense\n                style={{ display: \"block\" }}\n                adClient=\"ca-pub-3926462216067158\"\n                adSlot=\"2564307139\"\n                adFormat=\"fluid\"\n                adLayout=\"-6o+ci+43-j+3\"\n            />\n            {posts.map((post, index) => (\n                <SeriesPost post={post} index={index} key={index} />\n            ))}\n        </Wrapper>\n    )\n}\n\nexport default memo(SeriesPostList)\n","import { graphql } from 'gatsby';\nimport React, { memo } from 'react';\nimport { filterByLanguage, reshapePost } from '../../lib/list/reshape';\nimport SeriesPostList from './SeriesPostList';\nimport MainTemplate from '../main/MainTemplate';\nimport Header from '../base/Header';\nimport MainResponsive from '../main/MainResponsive';\nimport Footer from '../base/Footer';\nimport SEO from '../SEO';\nimport '../css/typography.css';\nimport { createGlobalStyle } from 'styled-components';\n\ncreateGlobalStyle`\n    body {\n        font-family: \"ELAND\", serif;\n    }\n`;\n\ninterface SeriesPostListPageProps {\n    data: any;\n}\n\nconst description = (series: string) => {\n    if (series === 'WebRTC 이론부터 실전까지') {\n        return 'WebRTC의 이론을 먼저 공부하고 이론을 기반으로 구현을 해보자.'\n    } else if (series === 'WebRTC theory to practice') {\n        return \"Let's study the theory of WebRTC first and implement it based on theory.\"\n    }\n}\n\nconst SeriesPostListPage = ({ data }: SeriesPostListPageProps) => {\n    const { allMarkdownRemark, site } = data;\n    if (!(allMarkdownRemark && site)) return <div></div>;\n\n    return (\n        <MainTemplate>\n            <SEO\n                title={allMarkdownRemark.edges[0].node.frontmatter.series}\n                url={`${site.siteMetadata.siteUrl}/${allMarkdownRemark.edges[0].node.frontmatter.series.replace(/ /gi, '-')}`}\n                lang={allMarkdownRemark.edges[0].node.frontmatter.lang}\n                date={allMarkdownRemark.edges[0].node.frontmatter.released_at}\n                image={allMarkdownRemark.edges[0].node.frontmatter.image.childImageSharp.fluid.src}\n                description={description(allMarkdownRemark.edges[0].node.frontmatter.series)}\n            />\n            <Header\n                lang={allMarkdownRemark.edges[0].node.frontmatter.lang}\n                ko_to={\n                    allMarkdownRemark.edges[0].node.frontmatter.lang === 'ko'\n                        ? '#'\n                        : (\n                            allMarkdownRemark.edges[0].node.frontmatter.translation_series !== 'none'\n                                ? '/series' + allMarkdownRemark.edges[0].node.frontmatter.translation_series\n                                : '#'\n                        )}\n                en_to={\n                    allMarkdownRemark.edges[0].node.frontmatter.lang === 'en'\n                        ? '#'\n                        : (\n                            allMarkdownRemark.edges[0].node.frontmatter.translation_series !== 'none'\n                                ? '/series' + allMarkdownRemark.edges[0].node.frontmatter.translation_series\n                                : '#'\n                        )}\n            />\n            <MainResponsive>\n                <SeriesPostList\n                    posts={filterByLanguage(reshapePost(allMarkdownRemark), allMarkdownRemark.edges[0].node.frontmatter.lang)}\n                    series={allMarkdownRemark.edges[0].node.frontmatter.series}\n                    lang={allMarkdownRemark.edges[0].node.frontmatter.lang}\n                />\n                <Footer />\n            </MainResponsive>\n        </MainTemplate>\n    )\n\n}\n\nexport const pageQuery = graphql`\n    query($series: String!) {\n        allMarkdownRemark(filter: {frontmatter: {series: {eq: $series}}}, sort: {fields: frontmatter___released_at, order: ASC}) {\n            edges {\n                    node {\n                        id\n                        frontmatter {\n                            released_at\n                            updated_at\n                            title\n                            description\n                            image {\n                                childImageSharp {\n                                    fluid {\n                                        ...GatsbyImageSharpFluid\n                                    }\n                                }\n                            }\n                            series\n                            lang\n                            translation_series\n                        }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n        site {\n            siteMetadata {\n                siteUrl\n            }\n        }\n    }\n`;\n\nexport default memo(SeriesPostListPage);","import React from 'react';\nimport Styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport ProfileIcons from '../common/ProfileIcons';\n\nconst FooterWrapper = Styled.div`\n    display: flex;\n    border-top: 1px solid ${palette.gray[5]};\n    margin-top: 5rem;\n    width: 100%;\n    height: 8rem;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    span {\n        font-size: 1.5rem;\n    }\n\n    .icon-wrapper {\n        width: 9rem;\n        display: flex;\n        justify-content: space-between;\n        flex-direction: row;\n        margin-top: 1rem;\n        svg {\n            width: 30%;\n            height: 1.5rem;\n            cursor: pointer;\n        }\n    }\n`;\n\nconst Footer = () => {\n    return (\n        <FooterWrapper>\n            <span>millo's tech blog</span>\n            <ProfileIcons className=\"icon-wrapper\" />\n        </FooterWrapper>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport '../css/typography.css';\n\nconst BackgroundStyle = createGlobalStyle`\n    body {\n        background: ${palette.gray[0]};\n        font-family: \"ELAND\", serif;\n    }\n`;\n\nexport type MainTemplateProps = {\n    children: React.ReactNode;\n};\n\nfunction MainTemplate({ children }: MainTemplateProps) {\n    return (\n        <>\n            <BackgroundStyle />\n            <Wrapper>{children}</Wrapper>\n        </>\n    );\n}\n\nconst Wrapper = styled.div``;\n\nexport default MainTemplate;\n","import { PartialPostType } from \"../../components/post/PostCard\"\nimport { SeriesType } from \"../../components/series/SeriesCard\"\n\nexport const reshapePost = (allMarkdownRemark: any) => {\n    let posts: Array<PartialPostType> = []\n    const { edges } = allMarkdownRemark\n\n    edges.map(edge => {\n        const obj = edge.node.frontmatter\n        let post: PartialPostType = {\n            path: edge.node.fields.slug,\n            title: obj.title,\n            description: obj.description,\n            released_at: obj.released_at,\n            updated_at: obj.updated_at,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            lang: obj.lang,\n            category: obj.category,\n        }\n\n        posts.push(post)\n    })\n\n    return posts\n}\n\nexport const filterByCategory = (\n    posts: Array<PartialPostType>,\n    category: string\n) => {\n    return posts.filter(post => post.category === category)\n}\n\nexport function filterByLanguage<T>(list: T[], lang: string) {\n    return list.filter(item => (item as any).lang === lang)\n}\n\nexport const reshapeSeries = (allMarkdownRemark: any) => {\n    let seriesList: Array<SeriesType> = []\n    const { group } = allMarkdownRemark\n    let len = group.length\n\n    for (let i = 0; i < len; i++) {\n        const obj = group[i].nodes[0].frontmatter\n        let series: SeriesType = {\n            path: `/series/${group[i].fieldValue.replace(/ /gi, \"-\")}`,\n            title: group[i].fieldValue,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            updated_at: obj.released_at,\n            totalCount: group[i].totalCount,\n            lang: obj.lang,\n        }\n        seriesList.push(series)\n    }\n\n    return seriesList\n}\n","import React, { memo } from 'react';\nimport Styled from 'styled-components';\nimport Img, { FluidObject } from 'gatsby-image';\nimport { mediaQuery } from '../../lib/styles/media';\n\nconst RatioImageBlock = Styled.div`\n    width: 100%;\n    max-height: 12.5rem;\n    display: flex;\n    align-items: center;\n\n    z-index: 1;\n\n    ${mediaQuery(767)} {\n        max-height: 100%;\n    }\n\n    .ratio-img {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        max-height: 100%;\n        display: block;\n        object-fit: cover;\n    }\n`;\n\nexport interface RatioImageProps {\n    widthRatio: number;\n    heightRatio: number;\n    fluid: FluidObject | FluidObject[];\n    style?: React.CSSProperties;\n}\n\nconst RatioImage = ({\n    widthRatio,\n    heightRatio,\n    fluid,\n    style\n}: RatioImageProps) => {\n    const paddingTop = `${(heightRatio / widthRatio) * 100}%`;\n\n    return (\n        <RatioImageBlock style={style}>\n            <Img className=\"ratio-img\" fluid={fluid} />\n        </RatioImageBlock>\n    );\n};\n\nexport default memo(RatioImage);\n"],"sourceRoot":""}