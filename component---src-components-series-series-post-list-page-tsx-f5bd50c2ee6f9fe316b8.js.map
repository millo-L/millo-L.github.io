{"version":3,"sources":["webpack:///./src/components/series/SeriesPost.tsx","webpack:///./src/components/series/SeriesPostList.tsx","webpack:///./src/components/series/SeriesPostListPage.tsx","webpack:///./src/components/base/Footer.tsx","webpack:///./src/components/main/MainTemplate.tsx","webpack:///./src/lib/list/reshape.ts","webpack:///./src/components/common/RatioImage.tsx"],"names":["Wrapper","Styled","div","mediaQuery","media","custom","palette","gray","Content","ellipsis","StyledLink","Link","SeriesPost","post","index","to","path","title","image","RatioImage","widthRatio","heightRatio","fluid","style","maxHeight","className","description","replace","length","formatDate","released_at","lang","updated_at","memo","indigo","SeriesPostList","posts","series","Adsense","display","adClient","adSlot","adFormat","adLayout","map","key","createGlobalStyle","SeriesPostListPage","data","allMarkdownRemark","site","MainTemplate","SEO","edges","node","frontmatter","url","siteMetadata","siteUrl","date","childImageSharp","src","Header","ko_to","translation_series","en_to","MainResponsive","filterByLanguage","reshapePost","Footer","FooterWrapper","BackgroundStyle","styled","children","edge","obj","fields","slug","category","push","filterByCategory","filter","list","item","reshapeSeries","seriesList","group","len","i","nodes","fieldValue","totalCount","RatioImageBlock"],"mappings":"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","file":"component---src-components-series-series-post-list-page-tsx-f5bd50c2ee6f9fe316b8.js","sourcesContent":["import React, { memo } from 'react';\r\nimport Styled from 'styled-components';\r\nimport media, { mediaQuery } from '../../lib/styles/media';\r\nimport { PartialPostType } from '../post/PostCard';\r\nimport { ellipsis, formatDate } from '../../lib/styles/utils';\r\nimport palette from '../../lib/styles/palette';\r\nimport RatioImage from '../common/RatioImage';\r\nimport { Link } from 'gatsby';\r\n\r\nconst Wrapper = Styled.div`\r\n    width: 100%;\r\n    background: white;\r\n    border-radius: 4px;\r\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\r\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\r\n    margin-top: 2rem;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n    &:hover {\r\n        transform: translateY(-8px);\r\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\r\n        ${mediaQuery(1024)} {\r\n            transform: none;\r\n        }\r\n    }\r\n\r\n    h2 {\r\n        margin-left: 1rem;\r\n        margin-top: 1.5rem;\r\n        ${media.custom(1056)} {\r\n            font-size: 1.3rem;\r\n        }\r\n    }\r\n\r\n    img {\r\n        border-top: 1px solid ${palette.gray[2]};\r\n    }\r\n\r\n`\r\n\r\nconst Content = Styled.div`\r\n    padding: 1rem;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    h4 {\r\n        font-size: 1rem;\r\n        margin: 0;\r\n        margin-bottom: 0.25rem;\r\n        line-height: 1.5;\r\n        word-break: break-word;\r\n        ${ellipsis}\r\n        color: ${palette.gray[9]};\r\n        ${mediaQuery(767)} {\r\n            white-space: initial;\r\n        }\r\n    }\r\n    .description-wrapper {\r\n        flex: 1;\r\n    }\r\n    p {\r\n        margin: 0;\r\n        word-break: break-word;\r\n        overflow-wrap: break-word;\r\n        font-size: 0.875rem;\r\n        line-height: 1.5;\r\n        color: ${palette.gray[7]};\r\n        margin-bottom: 1.5rem;\r\n    }\r\n    .sub-info {\r\n        font-size: 0.75rem;\r\n        line-height: 1.5;\r\n        color: ${palette.gray[6]};\r\n    }\r\n\r\n`\r\n\r\nconst StyledLink = Styled(Link)`\r\n    display: block;\r\n    color: inherit;\r\n    text-decoration: none;\r\n`\r\n\r\ninterface SeriesPost {\r\n    post: PartialPostType;\r\n    index: number;\r\n}\r\n\r\nconst SeriesPost = ({ post, index }: SeriesPost) => {\r\n    return (\r\n        <Wrapper>\r\n            <StyledLink to={`${post.path}`}>\r\n                <h2>{index + 1}. {post.title}</h2>\r\n            </StyledLink>\r\n            {post.image && (\r\n                <StyledLink to={`${post.path}`}>\r\n                    <RatioImage\r\n                        widthRatio={2}\r\n                        heightRatio={1}\r\n                        fluid={post.image}\r\n                        style={{ maxHeight: \"100%\" }}\r\n                    />\r\n                </StyledLink>\r\n            )}\r\n            <Content>\r\n                <StyledLink to={`${post.path}`}>\r\n                    <div className=\"description-wrapper\">\r\n                        <p>\r\n                            {post.description.replace(/&#x3A;/g, \":\")}\r\n                            {post.description.length === 150 && \"...\"}\r\n                        </p>\r\n                    </div>\r\n                </StyledLink>\r\n                <StyledLink to={`${post.path}`}>\r\n                    <div className=\"sub-info\">\r\n                        <span>{formatDate(post.released_at, post.lang)}</span>\r\n                        {post.updated_at && (\r\n                            <>\r\n                                <br />\r\n                                <span>{post.lang === 'ko' ? '수정: ' : 'Last edited at '}{formatDate(post.updated_at, post.lang)}</span>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </StyledLink>\r\n            </Content>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default memo(SeriesPost);","import React, { memo } from \"react\"\r\nimport Styled from \"styled-components\"\r\nimport media, { mediaQuery } from \"../../lib/styles/media\"\r\nimport palette from \"../../lib/styles/palette\"\r\nimport Adsense from \"../common/Adsense\"\r\nimport { PartialPostType } from \"../post/PostCard\"\r\nimport SeriesPost from \"./SeriesPost\"\r\n\r\nconst Wrapper = Styled.div`\r\n    display: flex;\r\n    margin: -1rem;\r\n    width: 40%;\r\n    flex-wrap: wrap;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    margin-top: 3rem;\r\n    ${mediaQuery(1440)} {\r\n        width: 50%;\r\n    }\r\n    ${mediaQuery(1056)} {\r\n        width: 100%;\r\n    }\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n    }\r\n\r\n    .series-header {\r\n        width: 100%;\r\n        border-bottom: 1px solid ${palette.gray[3]};\r\n        h1 {\r\n            ${media.custom(1056)} {\r\n                font-size: 1.4rem;\r\n            }\r\n        }\r\n        h3 {\r\n            width: 3.4rem;\r\n            color: ${palette.indigo[7]};\r\n            border-bottom: 4px solid ${palette.indigo[7]};\r\n            ${media.custom(1056)} {\r\n                font-size: 1rem;\r\n                border-bottom: 3px solid ${palette.indigo[7]};\r\n                width: 3rem;\r\n            }\r\n        }\r\n    }\r\n`\r\ninterface SeriesPostListProps {\r\n    posts: Array<PartialPostType>\r\n    series: string\r\n    lang: string\r\n}\r\n\r\nconst SeriesPostList = ({ posts, series, lang }: SeriesPostListProps) => {\r\n    return (\r\n        <Wrapper>\r\n            <div className=\"series-header\">\r\n                <h3>{lang === \"ko\" ? \"시리즈\" : \"Series\"}</h3>\r\n                <h1>{series}</h1>\r\n            </div>\r\n\r\n            <Adsense\r\n                style={{ display: \"block\" }}\r\n                adClient=\"ca-pub-3926462216067158\"\r\n                adSlot=\"2564307139\"\r\n                adFormat=\"fluid\"\r\n                adLayout=\"-6o+ci+43-j+3\"\r\n            />\r\n            {posts.map((post, index) => (\r\n                <SeriesPost post={post} index={index} key={index} />\r\n            ))}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default memo(SeriesPostList)\r\n","import { graphql } from 'gatsby';\r\nimport React, { memo } from 'react';\r\nimport { filterByLanguage, reshapePost } from '../../lib/list/reshape';\r\nimport SeriesPostList from './SeriesPostList';\r\nimport MainTemplate from '../main/MainTemplate';\r\nimport Header from '../base/Header';\r\nimport MainResponsive from '../main/MainResponsive';\r\nimport Footer from '../base/Footer';\r\nimport SEO from '../SEO';\r\nimport '../css/typography.css';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\ncreateGlobalStyle`\r\n    body {\r\n        font-family: \"ELAND\", serif;\r\n    }\r\n`;\r\n\r\ninterface SeriesPostListPageProps {\r\n    data: any;\r\n}\r\n\r\nconst description = (series: string) => {\r\n    if (series === 'WebRTC 이론부터 실전까지') {\r\n        return 'WebRTC의 이론을 먼저 공부하고 이론을 기반으로 구현을 해보자.'\r\n    } else if (series === 'WebRTC theory to practice') {\r\n        return \"Let's study the theory of WebRTC first and implement it based on theory.\"\r\n    }\r\n}\r\n\r\nconst SeriesPostListPage = ({ data }: SeriesPostListPageProps) => {\r\n    const { allMarkdownRemark, site } = data;\r\n    if (!(allMarkdownRemark && site)) return <div></div>;\r\n\r\n    return (\r\n        <MainTemplate>\r\n            <SEO\r\n                title={allMarkdownRemark.edges[0].node.frontmatter.series}\r\n                url={`${site.siteMetadata.siteUrl}/${allMarkdownRemark.edges[0].node.frontmatter.series.replace(/ /gi, '-')}`}\r\n                lang={allMarkdownRemark.edges[0].node.frontmatter.lang}\r\n                date={allMarkdownRemark.edges[0].node.frontmatter.released_at}\r\n                image={allMarkdownRemark.edges[0].node.frontmatter.image.childImageSharp.fluid.src}\r\n                description={description(allMarkdownRemark.edges[0].node.frontmatter.series)}\r\n            />\r\n            <Header\r\n                lang={allMarkdownRemark.edges[0].node.frontmatter.lang}\r\n                ko_to={\r\n                    allMarkdownRemark.edges[0].node.frontmatter.lang === 'ko'\r\n                        ? '#'\r\n                        : (\r\n                            allMarkdownRemark.edges[0].node.frontmatter.translation_series !== 'none'\r\n                                ? '/series' + allMarkdownRemark.edges[0].node.frontmatter.translation_series\r\n                                : '#'\r\n                        )}\r\n                en_to={\r\n                    allMarkdownRemark.edges[0].node.frontmatter.lang === 'en'\r\n                        ? '#'\r\n                        : (\r\n                            allMarkdownRemark.edges[0].node.frontmatter.translation_series !== 'none'\r\n                                ? '/series' + allMarkdownRemark.edges[0].node.frontmatter.translation_series\r\n                                : '#'\r\n                        )}\r\n            />\r\n            <MainResponsive>\r\n                <SeriesPostList\r\n                    posts={filterByLanguage(reshapePost(allMarkdownRemark), allMarkdownRemark.edges[0].node.frontmatter.lang)}\r\n                    series={allMarkdownRemark.edges[0].node.frontmatter.series}\r\n                    lang={allMarkdownRemark.edges[0].node.frontmatter.lang}\r\n                />\r\n                <Footer />\r\n            </MainResponsive>\r\n        </MainTemplate>\r\n    )\r\n\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n    query($series: String!) {\r\n        allMarkdownRemark(filter: {frontmatter: {series: {eq: $series}}}, sort: {fields: frontmatter___released_at, order: ASC}) {\r\n            edges {\r\n                    node {\r\n                        id\r\n                        frontmatter {\r\n                            released_at\r\n                            updated_at\r\n                            title\r\n                            description\r\n                            image {\r\n                                childImageSharp {\r\n                                    fluid {\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                }\r\n                            }\r\n                            series\r\n                            lang\r\n                            translation_series\r\n                        }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        site {\r\n            siteMetadata {\r\n                siteUrl\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default memo(SeriesPostListPage);","import React from 'react';\r\nimport Styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport ProfileIcons from '../common/ProfileIcons';\r\n\r\nconst FooterWrapper = Styled.div`\r\n    display: flex;\r\n    border-top: 1px solid ${palette.gray[5]};\r\n    margin-top: 5rem;\r\n    width: 100%;\r\n    height: 8rem;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n\r\n    span {\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .icon-wrapper {\r\n        width: 9rem;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        flex-direction: row;\r\n        margin-top: 1rem;\r\n        svg {\r\n            width: 30%;\r\n            height: 1.5rem;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <FooterWrapper>\r\n            <span>millo's tech blog</span>\r\n            <ProfileIcons className=\"icon-wrapper\" />\r\n        </FooterWrapper>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport '../css/typography.css';\r\n\r\nconst BackgroundStyle = createGlobalStyle`\r\n    body {\r\n        background: ${palette.gray[0]};\r\n        font-family: \"ELAND\", serif;\r\n    }\r\n`;\r\n\r\nexport type MainTemplateProps = {\r\n    children: React.ReactNode;\r\n};\r\n\r\nfunction MainTemplate({ children }: MainTemplateProps) {\r\n    return (\r\n        <>\r\n            <BackgroundStyle />\r\n            <Wrapper>{children}</Wrapper>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Wrapper = styled.div``;\r\n\r\nexport default MainTemplate;\r\n","import { PartialPostType } from \"../../components/post/PostCard\"\r\nimport { SeriesType } from \"../../components/series/SeriesCard\"\r\n\r\nexport const reshapePost = (allMarkdownRemark: any) => {\r\n    let posts: Array<PartialPostType> = []\r\n    const { edges } = allMarkdownRemark\r\n\r\n    edges.map(edge => {\r\n        const obj = edge.node.frontmatter\r\n        let post: PartialPostType = {\r\n            path: edge.node.fields.slug,\r\n            title: obj.title,\r\n            description: obj.description,\r\n            released_at: obj.released_at,\r\n            updated_at: obj.updated_at,\r\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\r\n            lang: obj.lang,\r\n            category: obj.category,\r\n        }\r\n\r\n        posts.push(post)\r\n    })\r\n\r\n    return posts\r\n}\r\n\r\nexport const filterByCategory = (\r\n    posts: Array<PartialPostType>,\r\n    category: string\r\n) => {\r\n    return posts.filter(post => post.category === category)\r\n}\r\n\r\nexport function filterByLanguage<T>(list: T[], lang: string) {\r\n    return list.filter(item => (item as any).lang === lang)\r\n}\r\n\r\nexport const reshapeSeries = (allMarkdownRemark: any) => {\r\n    let seriesList: Array<SeriesType> = []\r\n    const { group } = allMarkdownRemark\r\n    let len = group.length\r\n\r\n    for (let i = 0; i < len; i++) {\r\n        const obj = group[i].nodes[0].frontmatter\r\n        let series: SeriesType = {\r\n            path: `/series/${group[i].fieldValue.replace(/ /gi, \"-\")}`,\r\n            title: group[i].fieldValue,\r\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\r\n            updated_at: obj.released_at,\r\n            totalCount: group[i].totalCount,\r\n            lang: obj.lang,\r\n        }\r\n        seriesList.push(series)\r\n    }\r\n\r\n    return seriesList\r\n}\r\n","import React, { memo } from 'react';\r\nimport Styled from 'styled-components';\r\nimport Img, { FluidObject } from 'gatsby-image';\r\nimport { mediaQuery } from '../../lib/styles/media';\r\n\r\nconst RatioImageBlock = Styled.div`\r\n    width: 100%;\r\n    max-height: 12.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    z-index: 1;\r\n\r\n    ${mediaQuery(767)} {\r\n        max-height: 100%;\r\n    }\r\n\r\n    .ratio-img {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        max-height: 100%;\r\n        display: block;\r\n        object-fit: cover;\r\n    }\r\n`;\r\n\r\nexport interface RatioImageProps {\r\n    widthRatio: number;\r\n    heightRatio: number;\r\n    fluid: FluidObject | FluidObject[];\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst RatioImage = ({\r\n    widthRatio,\r\n    heightRatio,\r\n    fluid,\r\n    style\r\n}: RatioImageProps) => {\r\n    const paddingTop = `${(heightRatio / widthRatio) * 100}%`;\r\n\r\n    return (\r\n        <RatioImageBlock style={style}>\r\n            <Img className=\"ratio-img\" fluid={fluid} />\r\n        </RatioImageBlock>\r\n    );\r\n};\r\n\r\nexport default memo(RatioImage);\r\n"],"sourceRoot":""}