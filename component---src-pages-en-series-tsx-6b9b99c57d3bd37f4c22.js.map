{"version":3,"sources":["webpack:///./src/pages/en/series.tsx","webpack:///./src/components/post/PostCard.tsx","webpack:///./src/components/post/PostCardGrid.tsx","webpack:///./src/components/post/PostListPage.tsx","webpack:///./src/lib/list/reshape.ts","webpack:///./src/components/common/RatioImage.tsx","webpack:///./src/components/series/SeriesCard.tsx","webpack:///./src/components/series/SeriesCardGrid.tsx","webpack:///./src/components/series/SeriesListPage.tsx"],"names":["createGlobalStyle","HomePage","location","useLocation","search","queryString","parse","useState","page","setPage","categoryVisible","setCategoryVisible","useCallback","index","title","lang","ko_to","en_to","setUser","type","Wrapper","Styled","div","mediaQuery","StyledLink","Link","Content","ellipsis","palette","gray","props","clamp","css","PostCard","post","image","to","path","RatioImage","widthRatio","heightRatio","fluid","className","description","replace","length","formatDate","released_at","updated_at","memo","PostCardGrid","posts","Adsense","style","display","adClient","adSlot","adFormat","adLayout","map","key","PostsPage","query","data","useStaticQuery","allMarkdownRemark","category","filterByCategory","filterByLanguage","reshapePost","edges","edge","obj","node","frontmatter","fields","slug","childImageSharp","push","filter","list","item","reshapeSeries","seriesList","group","len","i","nodes","series","fieldValue","totalCount","RatioImageBlock","SeriesCard","maxHeight","SeriesCardGrid","fullWidthResponsive","SeriesListPage"],"mappings":"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","file":"component---src-pages-en-series-tsx-6b9b99c57d3bd37f4c22.js","sourcesContent":["import React, { useCallback, useState } from \"react\"\r\nimport { createGlobalStyle } from \"styled-components\"\r\nimport FloatingHeader from \"../../components/base/FloatingHeader\"\r\nimport Header from \"../../components/base/Header\"\r\nimport SimpleProfile from \"../../components/common/SimpleProfile\"\r\nimport HomeLayout from \"../../components/home/HomeLayout\"\r\nimport HomeTab from \"../../components/home/HomeTab\"\r\nimport MainPageRowTemplate from \"../../components/main/MainPageRowTemplate\"\r\nimport MainResponsive from \"../../components/main/MainResponsive\"\r\nimport MainTemplate from \"../../components/main/MainTemplate\"\r\nimport PostListPage from \"../../components/post/PostListPage\"\r\nimport SeriesListPage from \"../../components/series/SeriesListPage\"\r\nimport queryString from \"query-string\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport SEO from \"../../components/SEO\"\r\nimport \"../../components/css/typography.css\"\r\nimport Adsense from \"../../components/common/Adsense\"\r\n\r\ncreateGlobalStyle`\r\n    body {\r\n        font-family: \"ELAND\", serif;\r\n    }\r\n`\r\n\r\nconst indexPage = (page: number) => {\r\n    if (page === 0) return <PostListPage lang=\"ko\" />\r\n    else if (page === 1) return <SeriesListPage lang=\"ko\" />\r\n    else\r\n        return (\r\n            <div>\r\n                <Adsense\r\n                    style={{ display: \"block\" }}\r\n                    adClient=\"ca-pub-3926462216067158\"\r\n                    adSlot=\"4768153869\"\r\n                    adFormat=\"auto\"\r\n                    fullWidthResponsive=\"true\"\r\n                />\r\n            </div>\r\n        )\r\n}\r\n\r\nconst HomePage = () => {\r\n    const location = useLocation()\r\n    const series = location.search && queryString.parse(location.search)\r\n\r\n    const [page, setPage] = useState<number>(1)\r\n    const [categoryVisible, setCategoryVisible] = useState<boolean>(true)\r\n    const onClick = useCallback((index: number) => {\r\n        setPage(index)\r\n        if (index > 0) setCategoryVisible(false)\r\n        else setCategoryVisible(true)\r\n    }, [])\r\n\r\n    return (\r\n        <MainTemplate>\r\n            <SEO title=\"Series\" lang=\"en\" />\r\n            <Header lang=\"en\" ko_to=\"/series\" en_to=\"#\" />\r\n            <FloatingHeader page={page} lang=\"en\" />\r\n            <MainResponsive>\r\n                <HomeTab page={page} setUser={false} lang=\"en\" />\r\n                <MainPageRowTemplate>\r\n                    <SimpleProfile\r\n                        type=\"body\"\r\n                        categoryVisible={categoryVisible}\r\n                        lang=\"en\"\r\n                    />\r\n                    <HomeLayout>\r\n                        <SeriesListPage lang=\"en\" />\r\n                    </HomeLayout>\r\n                </MainPageRowTemplate>\r\n            </MainResponsive>\r\n        </MainTemplate>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React, { memo } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Styled, { css } from \"styled-components\"\r\nimport { mediaQuery } from \"../../lib/styles/media\"\r\nimport palette from \"../../lib/styles/palette\"\r\nimport { ellipsis, formatDate } from \"../../lib/styles/utils\"\r\nimport RatioImage from \"../common/RatioImage\"\r\nimport { FluidObject } from \"gatsby-image\"\r\n\r\nconst Wrapper = Styled.div`\r\n    width: 20rem;\r\n    background: white;\r\n    border-radius: 4px;\r\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\r\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\r\n    margin: 1rem;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${mediaQuery(1919)} {\r\n        width: calc(33% - 1.8125rem);\r\n    }\r\n    ${mediaQuery(1440)} {\r\n        width: calc(33% - 1.9rem);\r\n    }\r\n    ${mediaQuery(1056)} {\r\n        width: calc(50% - 2rem);\r\n    }\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n        width: 100%;\r\n        & + & {\r\n            margin-top: 1rem;\r\n        }\r\n    }\r\n    &:hover {\r\n        transform: translateY(-8px);\r\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\r\n        ${mediaQuery(1024)} {\r\n            transform: none;\r\n        }\r\n    }\r\n\r\n`\r\n\r\nconst StyledLink = Styled(Link)`\r\n    display: block;\r\n    color: inherit;\r\n    text-decoration: none;\r\n`\r\n\r\nconst Content = Styled.div<{ clamp: boolean }>`\r\n    padding: 1rem;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    background-color: white;\r\n    z-index: 3;\r\n    h4 {\r\n        font-size: 1rem;\r\n        margin: 0;\r\n        margin-bottom: 0.25rem;\r\n        line-height: 1.5;\r\n        word-break: break-word;\r\n        ${ellipsis}\r\n        color: ${palette.gray[9]};\r\n        ${mediaQuery(767)} {\r\n            white-space: initial;\r\n        }\r\n    }\r\n    .description-wrapper {\r\n        flex: 1;\r\n    }\r\n    p {\r\n        margin: 0;\r\n        word-break: break-word;\r\n        overflow-wrap: break-word;\r\n        font-size: 0.875rem;\r\n        line-height: 1.5;\r\n        ${props =>\r\n            props.clamp &&\r\n            css`\r\n                height: 3.9375rem;\r\n                display: -webkit-box;\r\n                -webkit-line-clamp: 3;\r\n                -webkit-box-orient: vertical;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            `}\r\n        /* ${props =>\r\n            !props.clamp &&\r\n            css`\r\n                height: 15.875rem;\r\n            `} */\r\n\r\n        color: ${palette.gray[7]};\r\n        margin-bottom: 1.5rem;\r\n    }\r\n    .sub-info {\r\n        font-size: 0.75rem;\r\n        line-height: 1.5;\r\n        color: ${palette.gray[6]};\r\n    }\r\n\r\n`\r\n\r\nexport type PartialPostType = {\r\n    path: string\r\n    title: string\r\n    description: string\r\n    image: FluidObject | FluidObject[]\r\n    released_at: string\r\n    updated_at: string\r\n    lang: \"ko\" | \"en\"\r\n    category: string\r\n}\r\n\r\ninterface PostCardProps {\r\n    post: PartialPostType\r\n}\r\n\r\nconst PostCard = ({ post }: PostCardProps) => {\r\n    return (\r\n        <Wrapper>\r\n            {post.image && (\r\n                <StyledLink to={`${post.path}`}>\r\n                    <RatioImage\r\n                        widthRatio={2}\r\n                        heightRatio={1}\r\n                        fluid={post.image}\r\n                    />\r\n                </StyledLink>\r\n            )}\r\n            <Content clamp={!post.image}>\r\n                <StyledLink to={`${post.path}`}>\r\n                    <h4>{post.title}</h4>\r\n                    <div className=\"description-wrapper\">\r\n                        <p>\r\n                            {post.description.replace(/&#x3A;/g, \":\")}\r\n                            {post.description.length === 150 && \"...\"}\r\n                        </p>\r\n                    </div>\r\n                </StyledLink>\r\n                <StyledLink to={`${post.path}`}>\r\n                    <div className=\"sub-info\">\r\n                        <span>{formatDate(post.released_at, post.lang)}</span>\r\n                        {post.updated_at && (\r\n                            <>\r\n                                <br />\r\n                                <span>\r\n                                    {post.lang === \"ko\"\r\n                                        ? \"수정: \"\r\n                                        : \"Last edited at\"}{\" \"}\r\n                                    {formatDate(post.updated_at, post.lang)}\r\n                                </span>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </StyledLink>\r\n            </Content>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default memo(PostCard)\r\n","import React, { memo } from \"react\"\r\nimport Styled from \"styled-components\"\r\nimport { mediaQuery } from \"../../lib/styles/media\"\r\nimport Adsense from \"../common/Adsense\"\r\nimport PostCard, { PartialPostType } from \"./PostCard\"\r\n\r\nconst Wrapper = Styled.div`\r\n    display: flex;\r\n    margin: -1rem;\r\n    flex-wrap: wrap;\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n    }\r\n\r\n    .adsense-block {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\ninterface PostCardGridProps {\r\n    posts: Array<PartialPostType>\r\n}\r\n\r\nconst PostCardGrid = ({ posts }: PostCardGridProps) => {\r\n    return (\r\n        <Wrapper>\r\n            {/*<div className=\"adsense-block\">\r\n                <Adsense\r\n                    style={{ display: \"block\" }}\r\n                    adClient=\"ca-pub-3926462216067158\"\r\n                    adSlot=\"5178668661\"\r\n                    adFormat=\"auto\"\r\n                    fullWidthResponsive=\"true\"\r\n                />\r\n            </div>*/}\r\n            <Adsense\r\n                style={{ display: \"block\" }}\r\n                adClient=\"ca-pub-3926462216067158\"\r\n                adSlot=\"2707777362\"\r\n                adFormat=\"fluid\"\r\n                adLayout=\"7b+db+1c+f+3o\"\r\n            />\r\n            {posts.map((post, index) => (\r\n                <PostCard post={post} key={index} />\r\n            ))}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default memo(PostCardGrid)\r\n","import { graphql, useStaticQuery } from \"gatsby\"\r\nimport React, { memo } from \"react\"\r\nimport {\r\n    filterByCategory,\r\n    filterByLanguage,\r\n    reshapePost,\r\n} from \"../../lib/list/reshape\"\r\nimport PostCardGrid from \"./PostCardGrid\"\r\nimport queryString from \"query-string\"\r\nimport { useLocation } from \"@reach/router\"\r\n\r\ninterface PostsPageProps {\r\n    lang: string\r\n}\r\n\r\nconst PostsPage = ({ lang }: PostsPageProps) => {\r\n    const location = useLocation()\r\n    const query = location.search && queryString.parse(location.search)\r\n    const data = useStaticQuery(graphql`\r\n        {\r\n            allMarkdownRemark(\r\n                sort: { fields: frontmatter___released_at, order: DESC }\r\n                filter: { frontmatter: { is_private: { eq: false } } }\r\n            ) {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        frontmatter {\r\n                            image {\r\n                                childImageSharp {\r\n                                    fluid(maxWidth: 720) {\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                }\r\n                            }\r\n                            title\r\n                            released_at\r\n                            updated_at\r\n                            description\r\n                            lang\r\n                            category\r\n                        }\r\n                        fields {\r\n                            slug\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n\r\n    if (!data.allMarkdownRemark) return <div></div>\r\n    const { allMarkdownRemark } = data\r\n\r\n    return (\r\n        <PostCardGrid\r\n            posts={\r\n                query.category\r\n                    ? filterByCategory(\r\n                          filterByLanguage(\r\n                              reshapePost(allMarkdownRemark),\r\n                              lang\r\n                          ),\r\n                          query.category as string\r\n                      )\r\n                    : filterByLanguage(reshapePost(allMarkdownRemark), lang)\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(PostsPage)\r\n","import { PartialPostType } from \"../../components/post/PostCard\"\r\nimport { SeriesType } from \"../../components/series/SeriesCard\"\r\n\r\nexport const reshapePost = (allMarkdownRemark: any) => {\r\n    let posts: Array<PartialPostType> = []\r\n    const { edges } = allMarkdownRemark\r\n\r\n    edges.map(edge => {\r\n        const obj = edge.node.frontmatter\r\n        let post: PartialPostType = {\r\n            path: edge.node.fields.slug,\r\n            title: obj.title,\r\n            description: obj.description,\r\n            released_at: obj.released_at,\r\n            updated_at: obj.updated_at,\r\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\r\n            lang: obj.lang,\r\n            category: obj.category,\r\n        }\r\n\r\n        posts.push(post)\r\n    })\r\n\r\n    return posts\r\n}\r\n\r\nexport const filterByCategory = (\r\n    posts: Array<PartialPostType>,\r\n    category: string\r\n) => {\r\n    return posts.filter(post => post.category === category)\r\n}\r\n\r\nexport function filterByLanguage<T>(list: T[], lang: string) {\r\n    return list.filter(item => (item as any).lang === lang)\r\n}\r\n\r\nexport const reshapeSeries = (allMarkdownRemark: any) => {\r\n    let seriesList: Array<SeriesType> = []\r\n    const { group } = allMarkdownRemark\r\n    let len = group.length\r\n\r\n    for (let i = 0; i < len; i++) {\r\n        const obj = group[i].nodes[0].frontmatter\r\n        let series: SeriesType = {\r\n            path: `/series/${group[i].fieldValue.replace(/ /gi, \"-\")}`,\r\n            title: group[i].fieldValue,\r\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\r\n            updated_at: obj.released_at,\r\n            totalCount: group[i].totalCount,\r\n            lang: obj.lang,\r\n        }\r\n        seriesList.push(series)\r\n    }\r\n\r\n    return seriesList\r\n}\r\n","import React, { memo } from 'react';\r\nimport Styled from 'styled-components';\r\nimport Img, { FluidObject } from 'gatsby-image';\r\nimport { mediaQuery } from '../../lib/styles/media';\r\n\r\nconst RatioImageBlock = Styled.div`\r\n    width: 100%;\r\n    max-height: 12.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    z-index: 1;\r\n\r\n    ${mediaQuery(767)} {\r\n        max-height: 100%;\r\n    }\r\n\r\n    .ratio-img {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        max-height: 100%;\r\n        display: block;\r\n        object-fit: cover;\r\n    }\r\n`;\r\n\r\nexport interface RatioImageProps {\r\n    widthRatio: number;\r\n    heightRatio: number;\r\n    fluid: FluidObject | FluidObject[];\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst RatioImage = ({\r\n    widthRatio,\r\n    heightRatio,\r\n    fluid,\r\n    style\r\n}: RatioImageProps) => {\r\n    const paddingTop = `${(heightRatio / widthRatio) * 100}%`;\r\n\r\n    return (\r\n        <RatioImageBlock style={style}>\r\n            <Img className=\"ratio-img\" fluid={fluid} />\r\n        </RatioImageBlock>\r\n    );\r\n};\r\n\r\nexport default memo(RatioImage);\r\n","import React, { memo } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Styled, { css } from \"styled-components\"\r\nimport { mediaQuery } from \"../../lib/styles/media\"\r\nimport palette from \"../../lib/styles/palette\"\r\nimport { ellipsis, formatDate } from \"../../lib/styles/utils\"\r\nimport RatioImage from \"../common/RatioImage\"\r\nimport { FluidObject } from 'gatsby-image';\r\n\r\nconst Wrapper = Styled.div`\r\n    width: 42rem;\r\n    background: white;\r\n    border-radius: 4px;\r\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\r\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\r\n    margin: 1rem;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${mediaQuery(1919)} {\r\n        width: calc(50% - 2rem);\r\n    }\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n        width: 100%;\r\n        & + & {\r\n            margin-top: 1rem;\r\n        }\r\n    }\r\n    &:hover {\r\n        transform: translateY(-8px);\r\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\r\n        ${mediaQuery(1024)} {\r\n            transform: none;\r\n        }\r\n    }\r\n\r\n`\r\n\r\nconst StyledLink = Styled(Link)`\r\n    display: block;\r\n    color: inherit;\r\n    text-decoration: none;\r\n`\r\n\r\nconst Content = Styled.div<{ clamp: boolean }>`\r\n    padding: 1rem;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    background-color: white;\r\n    z-index: 3;\r\n    h4 {\r\n        font-size: 1rem;\r\n        margin: 0;\r\n        margin-bottom: 0.25rem;\r\n        line-height: 1.5;\r\n        word-break: break-word;\r\n        ${ellipsis}\r\n        color: ${palette.gray[9]};\r\n        ${mediaQuery(767)} {\r\n            white-space: initial;\r\n        }\r\n    }\r\n    .description-wrapper {\r\n        flex: 1;\r\n    }\r\n    p {\r\n        margin: 0;\r\n        word-break: break-word;\r\n        overflow-wrap: break-word;\r\n        font-size: 0.875rem;\r\n        line-height: 1.5;\r\n        ${props =>\r\n        props.clamp &&\r\n        css`\r\n                height: 3.9375rem;\r\n                display: -webkit-box;\r\n                -webkit-line-clamp: 3;\r\n                -webkit-box-orient: vertical;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            `}\r\n        /* ${props =>\r\n        !props.clamp &&\r\n        css`\r\n                height: 15.875rem;\r\n            `} */\r\n\r\n        color: ${palette.gray[7]};\r\n        margin-bottom: 1.5rem;\r\n    }\r\n    .sub-info {\r\n        font-size: 0.75rem;\r\n        line-height: 1.5;\r\n        color: ${palette.gray[6]};\r\n        .separator {\r\n            margin-left: 0.25rem;\r\n            margin-right: 0.25rem;\r\n        }\r\n    }\r\n\r\n`\r\n\r\nexport type SeriesType = {\r\n    path: string\r\n    title: string\r\n    image: FluidObject | FluidObject[]\r\n    updated_at: string\r\n    totalCount: number\r\n    lang: string\r\n}\r\n\r\ninterface SeriesCardProps {\r\n    series: SeriesType\r\n}\r\n\r\nconst SeriesCard = ({ series }: SeriesCardProps) => {\r\n    return (\r\n        <Wrapper>\r\n            {series.image && (\r\n                <StyledLink to={`${series.path}`}>\r\n                    <RatioImage\r\n                        widthRatio={2}\r\n                        heightRatio={1}\r\n                        fluid={series.image}\r\n                        style={{ maxHeight: '16rem' }}\r\n                    />\r\n                </StyledLink>\r\n            )}\r\n            <Content clamp={!series.image}>\r\n                <StyledLink to={`${series.path}`}>\r\n                    <h4>{series.title}</h4>\r\n                </StyledLink>\r\n                <StyledLink to={`${series.path}`}>\r\n                    <div className=\"sub-info\">\r\n                        <span>{series.totalCount}{series.lang === 'ko' ? '개의 포스트' : ' posts'}</span>\r\n                        <span className=\"separator\">·</span>\r\n                        <span>{series.lang === 'ko' ? '마지막 업데이트' : 'Last edited at'} {formatDate(series.updated_at, series.lang)}</span>\r\n                    </div>\r\n                </StyledLink>\r\n            </Content>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default memo(SeriesCard)\r\n","import React, { memo } from \"react\"\r\nimport Styled from \"styled-components\"\r\nimport { mediaQuery } from \"../../lib/styles/media\"\r\nimport Adsense from \"../common/Adsense\"\r\nimport SeriesCard, { SeriesType } from \"./SeriesCard\"\r\n\r\nconst Wrapper = Styled.div`\r\n    display: flex;\r\n    margin: -1rem;\r\n    flex-wrap: wrap;\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n    }\r\n\r\n    .adsense-block {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\ninterface SeriseCardGridProps {\r\n    seriesList: Array<SeriesType>\r\n}\r\n\r\nconst SeriesCardGrid = ({ seriesList }: SeriseCardGridProps) => {\r\n    return (\r\n        <Wrapper>\r\n            <div className=\"adsense-block\">\r\n                <Adsense\r\n                    style={{ display: \"block\" }}\r\n                    adClient=\"ca-pub-3926462216067158\"\r\n                    adSlot=\"1239423651\"\r\n                    adFormat=\"auto\"\r\n                    fullWidthResponsive=\"true\"\r\n                />\r\n            </div>\r\n            {seriesList.map((series, index) => (\r\n                <SeriesCard series={series} key={index} />\r\n            ))}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default memo(SeriesCardGrid)\r\n","import { graphql, useStaticQuery } from 'gatsby';\r\nimport React, { memo } from 'react';\r\nimport { filterByLanguage, reshapeSeries } from '../../lib/list/reshape';\r\nimport SeriesCardGrid from './SeriesCardGrid';\r\n\r\ninterface SeriesListPageProps {\r\n    lang: string;\r\n}\r\n\r\nconst SeriesListPage = ({ lang }: SeriesListPageProps) => {\r\n    const data = useStaticQuery(graphql`\r\n        {\r\n            allMarkdownRemark(sort: {order: DESC, fields: frontmatter___released_at}, filter: {frontmatter: {series: {ne: \"none\"}}}) {\r\n                group(field: frontmatter___series, limit: 1) {\r\n                    fieldValue\r\n                    totalCount\r\n                    nodes {\r\n                        frontmatter {\r\n                            image {\r\n                                childImageSharp {\r\n                                    fluid {\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                }\r\n                            }\r\n                            released_at\r\n                            lang\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\n    const { allMarkdownRemark } = data;\r\n    if (!allMarkdownRemark) return <div></div>;\r\n\r\n    return <SeriesCardGrid seriesList={filterByLanguage(reshapeSeries(allMarkdownRemark), lang)} />;\r\n}\r\n\r\nexport default memo(SeriesListPage);"],"sourceRoot":""}