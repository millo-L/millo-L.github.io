{"componentChunkName":"component---src-components-post-post-template-tsx","path":"/Nodejs-PBKDF2-비밀번호-암호화하기/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"1-서론\" style=\"position:relative;\"><a href=\"#1-%EC%84%9C%EB%A1%A0\" aria-label=\"1 서론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 서론</h2>\n<p>사용자들의 비밀번호 정보를 DB에 저장할 때는 반드시 암호화가 필요하다. 그러기 위한 가장 일반적인 방식이 바로 PBKDF2 방식이다. 오늘은 이 방식이 무엇인지? 그리고 node.js에서는 어떻게 구현할 수 있는지에 대해 알아보자.</p>\n<h2 id=\"2-pbkdf2password-based-key-derivation-function-version-2란\" style=\"position:relative;\"><a href=\"#2-pbkdf2password-based-key-derivation-function-version-2%EB%9E%80\" aria-label=\"2 pbkdf2password based key derivation function version 2란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. PBKDF2(Password-Based Key Derivation Function Version 2)란?</h2>\n<p>PBKDF2는 미국 NIST에서 승인받은 사용자 패스워드를 기반으로 키(Key) 유도를 하기 위한 함수이다. 사용자 패스워드에 해시함수, 솔트(Salt), 반복 횟수 등을 지정하여 패스워드에 대한 다이제스트(Digest)를 생성하는 방식이다.</p>\n<blockquote>\n<p><strong>Salt란?</strong> <br />  비밀번호를 암호화하기 위한 키 값 (절대 외부로 유출되서는 안됨) <br /> <strong>Digest란?</strong> <br />  비밀번호를 Salt로 암호화한 결과 값</p>\n</blockquote>\n<h2 id=\"3-pbkdf2로-비밀번호-암호화하기\" style=\"position:relative;\"><a href=\"#3-pbkdf2%EB%A1%9C-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%95%94%ED%98%B8%ED%99%94%ED%95%98%EA%B8%B0\" aria-label=\"3 pbkdf2로 비밀번호 암호화하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. PBKDF2로 비밀번호 암호화하기</h2>\n<p>이번 실습에서는 별도의 html 파일을 만들지 않고, 특정 문자열을 암호화해서 Salt와 Digest를 생성(회원가입 기능)하고, 다른 문자열을 Salt를 사용해서 암호화하여 일치하는 지 비교(로그인 기능)하는 과정을 통해 비밀번호를 암호화하여 생성하고 비교 방식에 대해 알아보도록 하자. 방식은 크게 pbkdf2-password라는 모듈을 설치해서 사용하는 방식과 node.js 기본 내장 함수는 crypto를 사용하는 방식 두 가지 모두 사용해보도록 하자.</p>\n<h3 id=\"3-1-개발-환경-구축\" style=\"position:relative;\"><a href=\"#3-1-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95\" aria-label=\"3 1 개발 환경 구축 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. 개발 환경 구축</h3>\n<p>우선, 실습을 진행할 폴더를 생성하고 필요한 모듈을 설치하도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\">## 폴더 생성 및 열기</span>\n<span class=\"token function\">mkdir</span> pbkdf2-practice\n<span class=\"token builtin class-name\">cd</span> pbkdf2-practice\n\n<span class=\"token comment\">## package.json 생성</span>\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token comment\">## 필요한 모듈 설치</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> pbkdf2-password</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"3-2-pbkdf2-password-사용하기\" style=\"position:relative;\"><a href=\"#3-2-pbkdf2-password-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 2 pbkdf2 password 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. pbkdf2-password 사용하기</h3>\n<p>우선, pbkdf2-password 모듈을 사용해보자. pbkdf2-password 모듈은 PBKDF2 방식을 사용하기 쉽게 생성한 방식이므로 사용하기가 매우 간단하다. 아래와 같이 회원가입 시에는 password만을 hasher의 파라미터로 넣어서 salt가 자동 생성되게 한 후 salt값을 DB에 digest와 함께 저장한다. 그 후 회원이 로그인을 요청할 때는 저장되어 있는 salt와 함께 암호화해본 후 기존의 암호화와 되어 있는 digest와 동일한 지 비교하여 비밀번호 일치 여부를 확인하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">const</span> pbkdf2Password <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pbkdf2-password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> hasher <span class=\"token operator\">=</span> <span class=\"token function\">pbkdf2Password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"비밀번호486\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// password인 비밀번호486을 암호화</span>\n<span class=\"token comment\">// 회원가입 때는 이와 같이 password만을 파라미터로 넣는다.</span>\n<span class=\"token function\">hasher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> pw<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"암호화 된 비밀번호 '비밀번호486'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"암호화에 사용한 salt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// password인 비밀번호485을 암호화</span>\n    <span class=\"token comment\">// 로그인 때는 이와 같이 password와 저장되어 있는 salt를 같이 파라미터로 넣는다.</span>\n    <span class=\"token function\">hasher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">\"비밀번호485\"</span><span class=\"token punctuation\">,</span> salt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error2<span class=\"token punctuation\">,</span> pw2<span class=\"token punctuation\">,</span> salt2<span class=\"token punctuation\">,</span> hash2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"암호화 된 비밀번호 '비밀번호485'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hash2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">===</span> hash2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인 성공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인 실패!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"3-3-crypto-사용하기\" style=\"position:relative;\"><a href=\"#3-3-crypto-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 3 crypto 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3. crypto 사용하기</h3>\n<p>위의 모듈을 사용할 때와 다른 점이 있다면 salt도 직접 생성한다는 점과, pbkdf2 함수 내에서 암호화의 반복 횟수와 결괏값의 길이를 지정한다는 점이다. crypto도 PBKDF2 방식을 동일하게 지원하지만 위의 모듈은 그 방식을 사용자가 좀 더 쓰기 편하게 만들었고, 이 방식은 사용자가 좀 더 세밀하게 지정할 수 있게 해 놨다. 똑같은 암호화 방식이므로 뭐가 더 좋다 나쁘다 할 건 없는 것 같지만 차이점은 알고 쓰는 게 좋을 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"crypto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"비밀번호486\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 회원가입할 때</span>\n<span class=\"token comment\">// salt 생성</span>\ncrypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> buf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> salt <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 생성한 salt 기반으로 비밀번호 암호화</span>\n    crypto<span class=\"token punctuation\">.</span><span class=\"token function\">pbkdf2</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sha512\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 로그인 시에 비밀번호 비교</span>\n        <span class=\"token keyword\">const</span> pw <span class=\"token operator\">=</span> <span class=\"token string\">\"비밀번호485\"</span><span class=\"token punctuation\">;</span>\n        crypto<span class=\"token punctuation\">.</span><span class=\"token function\">pbkdf2</span><span class=\"token punctuation\">(</span>pw<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sha512\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err2<span class=\"token punctuation\">,</span> key2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">const</span> hash2 <span class=\"token operator\">=</span> key2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">===</span> hash2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인 성공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인 실패!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[참고]</h2>\n<ul>\n<li><a href=\"https://nodejs.org/docs/latest-v12.x/api/crypto.html\">https://nodejs.org/docs/latest-v12.x/api/crypto.html</a></li>\n<li><a href=\"https://www.npmjs.com/package/pbkdf2-password\">https://www.npmjs.com/package/pbkdf2-password</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EC%84%9C%EB%A1%A0\">1. 서론</a></p>\n</li>\n<li>\n<p><a href=\"#2-pbkdf2password-based-key-derivation-function-version-2%EB%9E%80\">2. PBKDF2(Password-Based Key Derivation Function Version 2)란?</a></p>\n</li>\n<li>\n<p><a href=\"#3-pbkdf2%EB%A1%9C-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%95%94%ED%98%B8%ED%99%94%ED%95%98%EA%B8%B0\">3. PBKDF2로 비밀번호 암호화하기</a></p>\n<ul>\n<li><a href=\"#3-1-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95\">3-1. 개발 환경 구축</a></li>\n<li><a href=\"#3-2-pbkdf2-password-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">3-2. pbkdf2-password 사용하기</a></li>\n<li><a href=\"#3-3-crypto-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">3-3. crypto 사용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">[참고]</a></p>\n</li>\n</ul>","frontmatter":{"author":"millo","category":"nodejs","description":"nodejs에서 PBKDF2 암호화 방식을 사용해보자.","image":{"childImageSharp":{"fixed":{"src":"/static/44cfb2066586ecbff6cdad01355978f8/2244e/nodejs.jpg"}}},"lang":"ko","released_at":"2021-02-10 13:00","series":"none","tags":["nodejs","crypto","PBKDF2","pbkdf2-password","로그인","비밀번호","비밀번호 암호화","회원가입"],"title":"[Node.js] PBKDF2 비밀번호 암호화하기","translation":null,"updated_at":null},"fields":{"slug":"/Nodejs-PBKDF2-비밀번호-암호화하기/"}},"allMarkdownRemark":{"nodes":[{"frontmatter":{"lang":"ko","title":"[Docker] docker-compose (node.js, mysql) 실행 순서 동기화"},"fields":{"slug":"/docker-compose-nodejs-mysql-실행-순서-동기화/"}},{"frontmatter":{"lang":"ko","title":"[JavaScript] Callback 지옥 벗어나기"},"fields":{"slug":"/JavaScript-Callback-지옥-벗어나기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] Jenkins in Docker(Ubuntu18.04)"},"fields":{"slug":"/Jenkins-in-Docker-Ubuntu1804/"}},{"frontmatter":{"lang":"ko","title":"[Go] 구조체를 Class처럼 사용하기"},"fields":{"slug":"/Go언어에서-구조체를-Class처럼-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Raspberry pi] OpenCV4 설치하기"},"fields":{"slug":"/Raspberry-pi에-OpenCV4-설치하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] 간단한 Anaconda 가상 환경 관리하기"},"fields":{"slug":"/Python-간단한-Anaconda-가상-환경-관리하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] TCP image socket 구현하기(Server, Client)"},"fields":{"slug":"/Python-TCP-image-socket-구현하기-Server-Client/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express 사용하기"},"fields":{"slug":"/Nodejs-express-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express router 사용하기"},"fields":{"slug":"/Nodejs-express-router-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Raspberry pi] 부팅 시 프로그램 자동 실행하기"},"fields":{"slug":"/Raspberry-pi-부팅시-프로그램-자동-실행하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] moment 사용하기"},"fields":{"slug":"/Nodejs-moment-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] Ubuntu:18.04에서 Docker 설치하기"},"fields":{"slug":"/Ubuntu-1804에서-Docker-설치하기/"}},{"frontmatter":{"lang":"ko","title":"[NGINX] Ubuntu:18.04에서 letsencrypt HTTPS 환경 구축하기"},"fields":{"slug":"/Ubuntu-1804에서-letsencrypt-HTTPS-환경구축/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] nodemailer 사용하기"},"fields":{"slug":"/Nodejs-nodemailer-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] mysql을 async/await로 처리하기"},"fields":{"slug":"/Nodejs-mysql을-async-awiat로-처리하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express cors 사용하기"},"fields":{"slug":"/Nodejs-express-cors-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express static folder 지정하기"},"fields":{"slug":"/Nodejs-express-static-folder-지정하기/"}},{"frontmatter":{"lang":"ko","title":"[JavaScript] Date 객체 사용하기"},"fields":{"slug":"/JavaScript-Date-객체-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] ReactJS Dockerizing하기"},"fields":{"slug":"/React-Dockerizing하기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 배경 이미지 크기 자동으로 맞추기"},"fields":{"slug":"/ReactNative-배경-이미지-크기-자동으로-맞추기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 커스텀 로딩 애니메이션 스크린 구현하기"},"fields":{"slug":"/ReactNative-커스텀-로딩-애니메이션-스크린-구현하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] Socket.io 간단한 채팅 구현하기"},"fields":{"slug":"/Nodejs-socketio-간단한-채팅-구현하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] Ubuntu:18.04 에서 jupyter notebook 사용하기"},"fields":{"slug":"/Python-Ubuntu1804에서-jupyter-notebook-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] HTTP 상태(응답) 코드 정리하기"},"fields":{"slug":"/HTTP-상태코드-정리하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] SOAP 정리하기"},"fields":{"slug":"/SOAP-정리하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] slack 연동하기(알림봇 구현)"},"fields":{"slug":"/Nodejs-slack-연동하기-알림봇구현/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Dimensions.get('window')와 Dimensions.get('screen')의 차이점"},"fields":{"slug":"/ReactNative-Dimensions-get-window와-Dimentsions-get-screen의-차이점/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Bottom tab bar 특정 화면에서 안 보이게 설정하기"},"fields":{"slug":"/ReactNative-Bottom-tab-bar-특정-화면에서-안-보이게-설정하기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 특정 화면에서 화면 고정하기"},"fields":{"slug":"/ReactNative-특정-화면에서-화면-고정하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] PBKDF2 비밀번호 암호화하기"},"fields":{"slug":"/Nodejs-PBKDF2-비밀번호-암호화하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] HTTP란 무엇인가"},"fields":{"slug":"/HTTP란-무엇인가/"}},{"frontmatter":{"lang":"ko","title":"[Network] URI와 URL의 차이점"},"fields":{"slug":"/URI와-URL의-차이점/"}},{"frontmatter":{"lang":"ko","title":"[Gatsby] document is not defined build error 해결 방법"},"fields":{"slug":"/Gatsby-build-error-document-is-not-defined-해결방법/"}},{"frontmatter":{"lang":"en","title":"[Gatsby] Troubleshooting document is not defined build error"},"fields":{"slug":"/Troubleshooting-Gatsby-build-error-document-is-not-defined/"}},{"frontmatter":{"lang":"ko","title":"[Typescript] mongoose methods, statics 사용하기"},"fields":{"slug":"/Typescript-mongodb-method-statics-사용하기/"}},{"frontmatter":{"lang":"en","title":"[Typescript] mongoose methods, statics"},"fields":{"slug":"/Typescript-mongoose-methods-statics/"}},{"frontmatter":{"lang":"en","title":"[Network] Differences between URI and URL"},"fields":{"slug":"/Difference-between-URI-and-URL/"}},{"frontmatter":{"lang":"en","title":"[Docker] Synchronize docker-compose (node.js, mysql) execution order"},"fields":{"slug":"/Synchronize-docker-compose-nodejs-mysql-execution-order/"}},{"frontmatter":{"lang":"en","title":"[JavaScript] Get out of Callback hell"},"fields":{"slug":"/JavaScript-Get-out-of-Callback-hell/"}},{"frontmatter":{"lang":"en","title":"[Docker] Jenkins in Docker(Ubuntu18.04)"},"fields":{"slug":"/jenkins-in-docker-ubuntu/"}},{"frontmatter":{"lang":"en","title":"[Go] Using Struct as Class"},"fields":{"slug":"/Using-struct-as-class-in-golang/"}},{"frontmatter":{"lang":"en","title":"Install Opencv 4 on Raspberry Pi 4"},"fields":{"slug":"/Install-Opencv-4-on-Raspberry-Pi-4/"}},{"frontmatter":{"lang":"en","title":"[Python] Manage simple Anaconda virtual environments기"},"fields":{"slug":"/Python-Manage-simple-Anaconda-virtual-environments/"}},{"frontmatter":{"lang":"en","title":"[Python] Implementing TCP image socket(Server, Client)"},"fields":{"slug":"/Python-Implementing TCP image socket-Server-Client/"}},{"frontmatter":{"lang":"en","title":"[Node.js] Use express"},"fields":{"slug":"/Nodejs-use-expressjs/"}},{"frontmatter":{"lang":"ko","title":"스타트업 코딩 페스티벌 2021 1차, 2차 후기"},"fields":{"slug":"/scope-2021/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 다른 앱(play store, instagram 등) 열기"},"fields":{"slug":"/ReactNative-link-other-app/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Firebase Analytics(@react-native-firebase/analytics) 적용하기"},"fields":{"slug":"/ReactNative-Firebase-Analytics-Setting/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Facebook SDK(react-native-fbsdk) 적용하기"},"fields":{"slug":"/ReactNative-facebook-sdk-setting/"}},{"frontmatter":{"lang":"ko","title":"[React Native] ld: symbol(s) not found for architecture x86_64 해결방법"},"fields":{"slug":"/ReactNative-ld-symbols-not-found-error/"}},{"frontmatter":{"lang":"ko","title":"[Android] Debug 버전으로는 실행되는 데 Release Crash 나는 경우"},"fields":{"slug":"/Android-release-error/"}},{"frontmatter":{"lang":"ko","title":"[React Native] CodePush를 이용한 앱 업데이트"},"fields":{"slug":"/ReactNative-codepush/"}},{"frontmatter":{"lang":"en","title":"[React Native] Troubleshooting ld: symbol(s) not found for architecture x86_64"},"fields":{"slug":"/ReactNative-ld-symbols-not-found-error-en/"}},{"frontmatter":{"lang":"en","title":"[Android] Runs with Debug version, but fails with Release version"},"fields":{"slug":"/Android-release-error-en/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Kakao Link를 사용해서 Deep link를 구현해보자."},"fields":{"slug":"/ReactNative-kakao-deep-link/"}},{"frontmatter":{"lang":"en","title":"[React Native] Install @react-native-firebase (solve pod install issue)"},"fields":{"slug":"/ReactNative-Firebase-2023-05-25-en/"}},{"frontmatter":{"lang":"ko","title":"[React Native] @react-native-firebase 적용하기 (pod install 에러 해결)"},"fields":{"slug":"/ReactNative-Firebase-2023-05-25/"}},{"frontmatter":{"lang":"ko","title":"[React Native] realm one-to-many relationship 적용하기"},"fields":{"slug":"/reactnative-realm-one-to-many-relationship-2023-05-26/"}},{"frontmatter":{"lang":"en","title":"[React Native] Solving realm one-to-many relationship issue"},"fields":{"slug":"/reactnative-realm-one-to-many-relationship-2023-05-26-en/"}}]}},"pageContext":{"slug":"/Nodejs-PBKDF2-비밀번호-암호화하기/","series":"none","translation":null,"lang":"ko"}},"staticQueryHashes":["2083168511","3061319093","3557473807","356676075"],"slicesMap":{}}