{"componentChunkName":"component---src-components-post-post-template-tsx","path":"/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-P2P/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"1-introduction\" style=\"position:relative;\"><a href=\"#1-introduction\" aria-label=\"1 introduction permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Introduction</h2>\n<p>Last time, I posted about <a href=\"https://millo-l.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript(1-1-P2P)/\">1:1 P2P communication using WebRTC</a>. This posting is supposed to be written assuming that you know the concept described in the previous posting, so if you see this article first, I recommend you to read <a href=\"https://millo-l.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript(1-1-P2P)/\">the previous article</a>. These two are quite similar because even a 1:N connection would implement the same P2P connection (Signaling Server format) as the 1:1 connection previously. We will focus on explaining a series of dynamically connected and terminated processes.</p>\n<h2 id=\"2-implementation-method\" style=\"position:relative;\"><a href=\"#2-implementation-method\" aria-label=\"2 implementation method permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Implementation method</h2>\n<h3 id=\"what-do-11-and-1n-connections-have-in-common\" style=\"position:relative;\"><a href=\"#what-do-11-and-1n-connections-have-in-common\" aria-label=\"what do 11 and 1n connections have in common permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What do 1:1 and 1:N connections have in common?</h3>\n<p>Although the other party who has a video conference changes from one person to several people, they are all the same in that they are all peer-to-peer (P2P). A 1:N connection, like a 1:1 connection, consists of a Signaling server to connect communications with the other party, and from then on the server is not involved and only communicates between Peers.</p>\n<h3 id=\"what-is-the-difference-between-11-and-1n-connection\" style=\"position:relative;\"><a href=\"#what-is-the-difference-between-11-and-1n-connection\" aria-label=\"what is the difference between 11 and 1n connection permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is the difference between 1:1 and 1:N connection?</h3>\n<p>The 1:N connection must have as many RTCPeerConnection as participating in a video conference, unlike the 1:1 connection we made last time. Therefore, it is recommended to conduct the test with 4 or 5 people because the overload is very severe. Please refer to <a href=\"https://millo-l.github.io/WebRTC-implementation-method(Mesh-SFU-MCU)\">the previous post</a> for explanation of this overload.</p>\n<h2 id=\"3-code\" style=\"position:relative;\"><a href=\"#3-code\" aria-label=\"3 code permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Code</h2>\n<h3 id=\"signaling-servernodejs\" style=\"position:relative;\"><a href=\"#signaling-servernodejs\" aria-label=\"signaling servernodejs permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Signaling Server(Node.js)</h3>\n<blockquote>\n<p><strong>Note</strong> <br /> You must use socket.io version=2.3.0.</p>\n</blockquote>\n<h4>1. Socket event</h4>\n<ul>\n<li>connection\n<ul>\n<li>Same as last post</li>\n</ul>\n</li>\n<li>join_room\n<ul>\n<li>Same as last post</li>\n</ul>\n</li>\n<li>offer\n<ul>\n<li>data\n<ul>\n<li>offerSendID: socket id of user sending offfer</li>\n<li>offerSendEmail: email of user sending offfer</li>\n<li>sdp: RTCSessionDescription of user sending offfer</li>\n<li>offerReceiveID: socket id of the user to receive an offfer</li>\n</ul>\n</li>\n<li>role\n<ul>\n<li>Send socket id, email, and sdp of the sender that sends the offer to the receiver who needs to receive the offer.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>answer\n<ul>\n<li>data\n<ul>\n<li>answerSendID: socket id of user sending answer</li>\n<li>sdp: RTCSessionDescription of user sending answer</li>\n<li>answerReceiveID: socket id of the user to receive an answer</li>\n</ul>\n</li>\n<li>role\n<ul>\n<li>Send socket id, email, and sdp of the sender that sends the answer to the receiver who needs to receive the answer.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>candidate\n<ul>\n<li>data\n<ul>\n<li>candidateSendID: socket id of user sending RTCIceCandidate</li>\n<li>candidate: RTCIceCandidate of sender</li>\n<li>candidateReceiveID: socket id of the user to receive an candidate</li>\n</ul>\n</li>\n<li>role\n<ul>\n<li>Send socket id, cadidate of the sender to the receiver who needs to receive the cadidate.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>disconnection\n<ul>\n<li>Same as last post</li>\n</ul>\n</li>\n</ul>\n<h4>Because there was only one opponent in the 1:1 connection, there was no need to send socket id together in events that exchanged offer, answer, and cadidate. However, because there are several people in the same room in the 1:N connection, it is an important part of which user the data will be delivered.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> socketToRoom <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> maximum <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MAXIMUM</span> <span class=\"token operator\">||</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\n\r\nio<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">socket</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"join_room\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> maximum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                socket<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"room_full\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            users<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n            users<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        socketToRoom<span class=\"token punctuation\">[</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">;</span>\r\n\r\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>socketToRoom<span class=\"token punctuation\">[</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> enter</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">const</span> usersInThisRoom <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\r\n            <span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> socket<span class=\"token punctuation\">.</span>id\r\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>usersInThisRoom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        io<span class=\"token punctuation\">.</span>sockets<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all_users\"</span><span class=\"token punctuation\">,</span> usersInThisRoom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"offer\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>offerReceiveID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getOffer\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">sdp</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>sdp<span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">offerSendID</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>offerSendID<span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">offerSendEmail</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>offerSendEmail<span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"answer\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>answerReceiveID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getAnswer\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">sdp</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>sdp<span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">answerSendID</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>answerSendID<span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"candidate\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>candidateReceiveID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getCandidate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">candidate</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">candidateSendID</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>candidateSendID<span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disconnect\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>socketToRoom<span class=\"token punctuation\">[</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> exit</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">const</span> roomID <span class=\"token operator\">=</span> socketToRoom<span class=\"token punctuation\">[</span>socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">let</span> room <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>roomID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            room <span class=\"token operator\">=</span> room<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> socket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            users<span class=\"token punctuation\">[</span>roomID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> room<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">delete</span> users<span class=\"token punctuation\">[</span>roomID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_exit\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"clientreactjs-typescript\" style=\"position:relative;\"><a href=\"#clientreactjs-typescript\" aria-label=\"clientreactjs typescript permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client(ReactJS, Typescript)</h3>\n<blockquote>\n<p><strong>Note</strong> <br /> You must use socket.io-client version=2.3.0, @types/socket.io-client version=1.4.34.</p>\n</blockquote>\n<h4>1. Variables to use in the client</h4>\n<ul>\n<li>socket: Same as last post</li>\n<li>users: array of counterparties' data (socket id, email, MediaStream)</li>\n<li>localVideoRef: Same as last post</li>\n<li>pcs: Dictionary variable to store the opponent's RTCPeerConnection ({pcs[socket.id] = RTCPeerConnection} format)</li>\n<li>pc_config: Same as last post</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>socket<span class=\"token punctuation\">,</span> setSocket<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>SocketIOClient<span class=\"token punctuation\">.</span>Socket<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">,</span> setUsers<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>IWebRTCUser<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> localVideoRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLVideoElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> pcs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>socketId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> RTCPeerConnection <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> pc_config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    iceServers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n        <span class=\"token comment\">// {</span>\r\n        <span class=\"token comment\">//   urls: 'stun:[STUN_IP]:[PORT]',</span>\r\n        <span class=\"token comment\">//   'credentials': '[YOR CREDENTIALS]',</span>\r\n        <span class=\"token comment\">//   'username': '[USERNAME]'</span>\r\n        <span class=\"token comment\">// },</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            urls<span class=\"token operator\">:</span> <span class=\"token string\">\"stun:stun.l.google.com:19302\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>2. Socket event</h4>\n<ul>\n<li>all_users\n<ul>\n<li>Get a list of all users in the same room except yourself.</li>\n<li>Each user invokes the createPeerConnection function to generate each RTCPeerConnection.</li>\n<li>Call the createOffer function via RTCPeerConneciton created for that user and send an offer signal only to that user.</li>\n</ul>\n</li>\n<li>getOffer\n<ul>\n<li>The createPeerConnection function is called to generatePeerConnection for communication with the user who sent the offer.</li>\n<li>Set the remoteDescription of the RTCPeerConnection generated for that user to the sdp received from that user.</li>\n<li>Call the createAnswer function and send an answer signal to the user.</li>\n</ul>\n</li>\n<li>getAnswer\n<ul>\n<li>Set the remoteDescription of RTCPeerConnection, which was created for the user who sent answer, to sdp of the user who sent answer.</li>\n</ul>\n</li>\n<li>getCandidate\n<ul>\n<li>Add the received RTCIceCandidate to the RTCPeerConnection created for the user who sent the cadidate.</li>\n</ul>\n</li>\n<li>user_exit\n<ul>\n<li>Delete the user's RTCPeerConnection from the pcs Dictionary.</li>\n<li>In users array, delete the data for that user.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> newSocket <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> localStream<span class=\"token operator\">:</span> MediaStream<span class=\"token punctuation\">;</span>\r\n\r\nnewSocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all_users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>allUsers<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> allUsers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">createPeerConnection</span><span class=\"token punctuation\">(</span>\r\n            allUsers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\r\n            allUsers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\r\n            newSocket<span class=\"token punctuation\">,</span>\r\n            localStream\r\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">let</span> pc<span class=\"token operator\">:</span> RTCPeerConnection <span class=\"token operator\">=</span> pcs<span class=\"token punctuation\">[</span>allUsers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            pc<span class=\"token punctuation\">.</span><span class=\"token function\">createOffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n                offerToReceiveAudio<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n                offerToReceiveVideo<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>sdp <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create offer success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                    pc<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>sdp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                    newSocket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"offer\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n                        sdp<span class=\"token operator\">:</span> sdp<span class=\"token punctuation\">,</span>\r\n                        offerSendID<span class=\"token operator\">:</span> newSocket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\r\n                        offerSendEmail<span class=\"token operator\">:</span> <span class=\"token string\">\"offerSendSample@sample.com\"</span><span class=\"token punctuation\">,</span>\r\n                        offerReceiveID<span class=\"token operator\">:</span> allUsers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\r\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nnewSocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token string\">\"getOffer\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        sdp<span class=\"token operator\">:</span> RTCSessionDescription<span class=\"token punctuation\">;</span>\r\n        offerSendID<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n        offerSendEmail<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get offer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">createPeerConnection</span><span class=\"token punctuation\">(</span>\r\n            data<span class=\"token punctuation\">.</span>offerSendID<span class=\"token punctuation\">,</span>\r\n            data<span class=\"token punctuation\">.</span>offerSendEmail<span class=\"token punctuation\">,</span>\r\n            newSocket<span class=\"token punctuation\">,</span>\r\n            localStream\r\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">let</span> pc<span class=\"token operator\">:</span> RTCPeerConnection <span class=\"token operator\">=</span> pcs<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>offerSendID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            pc<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>sdp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\r\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"answer set remote description success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                    pc<span class=\"token punctuation\">.</span><span class=\"token function\">createAnswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n                        offerToReceiveVideo<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n                        offerToReceiveAudio<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>sdp <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create answer success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                            pc<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span>\r\n                                <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>sdp<span class=\"token punctuation\">)</span>\r\n                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                            newSocket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"answer\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n                                sdp<span class=\"token operator\">:</span> sdp<span class=\"token punctuation\">,</span>\r\n                                answerSendID<span class=\"token operator\">:</span> newSocket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\r\n                                answerReceiveID<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>offerSendID<span class=\"token punctuation\">,</span>\r\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nnewSocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token string\">\"getAnswer\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> sdp<span class=\"token operator\">:</span> RTCSessionDescription<span class=\"token punctuation\">;</span> answerSendID<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get answer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">let</span> pc<span class=\"token operator\">:</span> RTCPeerConnection <span class=\"token operator\">=</span> pcs<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>answerSendID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            pc<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>sdp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token comment\">//console.log(sdp);</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nnewSocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token string\">\"getCandidate\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> candidate<span class=\"token operator\">:</span> RTCIceCandidateInit<span class=\"token punctuation\">;</span> candidateSendID<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get candidate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">let</span> pc<span class=\"token operator\">:</span> RTCPeerConnection <span class=\"token operator\">=</span> pcs<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>candidateSendID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            pc<span class=\"token punctuation\">.</span><span class=\"token function\">addIceCandidate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCIceCandidate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"candidate add success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nnewSocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_exit\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    pcs<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">delete</span> pcs<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">setUsers</span><span class=\"token punctuation\">(</span>oldUsers <span class=\"token operator\">=></span> oldUsers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">setSocket</span><span class=\"token punctuation\">(</span>newSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>3. MediaStream Settings</h4>\n<ul>\n<li>Call the navigator.mediaDevices.getUserMedia() function to obtain your own MediaStream and register it with localVideoRef.</li>\n<li>Signaling Server will be notified that you have joined the room. (The answer will then be given to the all_users event.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\">navigator<span class=\"token punctuation\">.</span>mediaDevices\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        audio<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n        video<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n            width<span class=\"token operator\">:</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span>\r\n            height<span class=\"token operator\">:</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>stream <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localVideoRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> localVideoRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\r\n\r\n        localStream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\r\n\r\n        newSocket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"join_room\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n            room<span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span>\r\n            email<span class=\"token operator\">:</span> <span class=\"token string\">\"sample@naver.com\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">getUserMedia error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>4. Create an RTCPeerConnection for the other party</h4>\n<ul>\n<li>Create a PeerConnection for a specific user and register localStream with RTCPeerConnection.</li>\n<li>Store in pcs variable in key-value form socket.id-RTCPeerConnection</li>\n<li>onicecandidate\n<ul>\n<li>After creating an offer or answer signal, your icecandidate information event occurs.</li>\n<li>Send your icecandidate information through the Signaling Server to the person who sent the offer or answer.</li>\n</ul>\n</li>\n<li>oniceconnectionstatechange\r\nconnection status is changed</li>\n<li>ontrack\n<ul>\n<li>If the other person's RTCSessionDescription is specified as a remoteSessionDescription in his RTCPeerConnection, an event about the other person's track data will occur.</li>\n<li>Register other party's stream with the other party's user data in users array.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> createPeerConnection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\r\n    socketID<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\r\n    email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\r\n    newSocket<span class=\"token operator\">:</span> SocketIOClient<span class=\"token punctuation\">.</span>Socket<span class=\"token punctuation\">,</span>\r\n    localStream<span class=\"token operator\">:</span> MediaStream\r\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RTCPeerConnection <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span>pc_config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// add pc to peerConnections object</span>\r\n    pcs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>pcs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>socketID<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> pc <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    pc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onicecandidate</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onicecandidate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            newSocket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"candidate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n                candidate<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">,</span>\r\n                candidateSendID<span class=\"token operator\">:</span> newSocket<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\r\n                candidateReceiveID<span class=\"token operator\">:</span> socketID<span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    pc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oniceconnectionstatechange</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    pc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontrack</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ontrack success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">setUsers</span><span class=\"token punctuation\">(</span>oldUsers <span class=\"token operator\">=></span> oldUsers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> socketID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">setUsers</span><span class=\"token punctuation\">(</span>oldUsers <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\r\n            <span class=\"token operator\">...</span>oldUsers<span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                id<span class=\"token operator\">:</span> socketID<span class=\"token punctuation\">,</span>\r\n                email<span class=\"token operator\">:</span> email<span class=\"token punctuation\">,</span>\r\n                stream<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localStream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localstream add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        localStream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>track <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n            pc<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> localStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no local stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// return pc</span>\r\n    <span class=\"token keyword\">return</span> pc<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>5. Video rendering of yourself and your opponent</h4>\n<ul>\n<li>IWebRTCUser: Interface used to store users</li>\n<li>Props: Props used for Video Tags</li>\n<li>Video: Component to print video of the other party</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IWebRTCUser</span> <span class=\"token punctuation\">{</span>\r\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n    email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n    stream<span class=\"token operator\">:</span> MediaStream<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\r\n    email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n    stream<span class=\"token operator\">:</span> MediaStream<span class=\"token punctuation\">;</span>\r\n    muted<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Video</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">,</span> muted <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLVideoElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isMuted<span class=\"token punctuation\">,</span> setIsMuted<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>muted<span class=\"token punctuation\">)</span> <span class=\"token function\">setIsMuted</span><span class=\"token punctuation\">(</span>muted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VideoContainer</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">muted</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isMuted<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">autoPlay</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">VideoContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserLabel</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>email<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UserLabel</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span>\r\n            <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                width<span class=\"token operator\">:</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span>\r\n                height<span class=\"token operator\">:</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span>\r\n                margin<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\r\n                backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\r\n            <span class=\"token attr-name\">muted</span>\r\n            <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>localVideoRef<span class=\"token punctuation\">}</span></span>\r\n            <span class=\"token attr-name\">autoPlay</span>\r\n        <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n        </span><span class=\"token punctuation\">{</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Video</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">email</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">stream</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\r\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\r\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"github\" style=\"position:relative;\"><a href=\"#github\" aria-label=\"github permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[GitHub]</h2>\n<ul>\n<li><a href=\"https://github.com/millo-L/Typescript-ReactJS-WebRTC-1-N-P2P\">https://github.com/millo-L/Typescript-ReactJS-WebRTC-1-N-P2P</a></li>\n</ul>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[References]</h2>\n<ul>\n<li><a href=\"https://millo-l.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript(1-1-P2P)/\">https://millo-l.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript(1-1-P2P)/</a></li>\n<li><a href=\"https://millo-l.github.io/WebRTC-implementation-method(Mesh-SFU-MCU)/\">https://millo-l.github.io/WebRTC-implementation-method(Mesh-SFU-MCU)/</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-introduction\">1. Introduction</a></p>\n</li>\n<li>\n<p><a href=\"#2-implementation-method\">2. Implementation method</a></p>\n<ul>\n<li><a href=\"#what-do-11-and-1n-connections-have-in-common\">What do 1:1 and 1:N connections have in common?</a></li>\n<li><a href=\"#what-is-the-difference-between-11-and-1n-connection\">What is the difference between 1:1 and 1:N connection?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-code\">3. Code</a></p>\n<ul>\n<li><a href=\"#signaling-servernodejs\">Signaling Server(Node.js)</a></li>\n<li><a href=\"#clientreactjs-typescript\">Client(ReactJS, Typescript)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#github\">[GitHub]</a></p>\n</li>\n<li>\n<p><a href=\"#references\">[References]</a></p>\n</li>\n</ul>","frontmatter":{"author":"millo","category":"webrtc","description":"Based on the theory of WebRTC, let's implement 1:N P2P real-time video transmission.","image":{"childImageSharp":{"fixed":{"src":"/static/5d1a4dc7a92facc014378e28932bee9a/497c6/webrtc.png"}}},"lang":"en","released_at":"2021-03-05 13:00","series":"WebRTC theory to practice","tags":["WebRTC","P2P","Mesh","SignalingServer","nodejs","reactjs","typescript"],"title":"Implementing WebRTC using ReactJS and Typescript (1:N P2P)","translation":"/WebRTC-구현하기-1-N-P2P/","updated_at":null},"fields":{"slug":"/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-P2P/"}},"allMarkdownRemark":{"nodes":[{"frontmatter":{"lang":"en","title":"About WebRTC"},"fields":{"slug":"/About-WebRTC/"}},{"frontmatter":{"lang":"en","title":"WebRTC implementation method(Mesh, SFU, MCU)"},"fields":{"slug":"/WebRTC-implementation-method-Mesh-SFU-MCU/"}},{"frontmatter":{"lang":"en","title":"Implementing WebRTC using ReactJS and Typescript (1:1 P2P)"},"fields":{"slug":"/Implementing-WebRTC-using-ReactJS-and-Typescript-1-1-P2P/"}},{"frontmatter":{"lang":"en","title":"Implementing WebRTC using ReactJS and Typescript (1:N P2P)"},"fields":{"slug":"/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-P2P/"}},{"frontmatter":{"lang":"en","title":"Implementing WebRTC using ReactJS and Typescript (1:N SFU)"},"fields":{"slug":"/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-SFU/"}},{"frontmatter":{"lang":"en","title":"WebRTC Performance Comparison (P2P vs SFU)"},"fields":{"slug":"/WebRTC-Performance-Comparison-P2P-vs-SFU/"}}]}},"pageContext":{"slug":"/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-P2P/","series":"WebRTC theory to practice"}},"staticQueryHashes":["104535566","2083168511","3061319093","3557473807","356676075","3868781503"],"slicesMap":{}}