{"componentChunkName":"component---src-components-post-post-template-tsx","path":"/Python-Implementing TCP image socket-Server-Client/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"1-introdution\" style=\"position:relative;\"><a href=\"#1-introdution\" aria-label=\"1 introdution permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Introdution</h2>\n<p>I implemented a TCP image socket between Raspberry pi 4 and an artificial intelligence server in <a href=\"https://www.youtube.com/watch?v=AuWtMnEUwC8&#x26;t=1s\">an intersection pedestrian safety notification project</a> last year. We implement a socket that sends and receives real-time and video images on a per-frame basis using OpenCV. If you use Raspberry Pi, the OpenCV installation method is a bit complicated, so please refer to <a href=\"https://millo-L.github.io/Raspberry-pi%EC%97%90-OpenCV4-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/\">here</a>.</p>\n<h2 id=\"2-tcp-image-socket-server\" style=\"position:relative;\"><a href=\"#2-tcp-image-socket-server\" aria-label=\"2 tcp image socket server permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. TCP image socket Server</h2>\n<p>When sending and receiving images with TCP socket, the most important thing is to send the same size of the image data from the client to the server. Since the size of the data that can be sent at once using TCP socket is limited, it is important to convert the image data to string and send it. Therefore, it is necessary to receive the size of the image first and receive data from the socket only that size and convert it back to the form of image data.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>TCP_IP <span class=\"token operator\">=</span> ip\n        self<span class=\"token punctuation\">.</span>TCP_PORT <span class=\"token operator\">=</span> port\n        self<span class=\"token punctuation\">.</span>socketOpen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>receiveThread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>receiveImages<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>receiveThread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">socketClose</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'Server socket [ TCP_IP: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>TCP_IP <span class=\"token operator\">+</span> <span class=\"token string\">', TCP_PORT: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_PORT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' ] is close'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">socketOpen</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_IP<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>TCP_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'Server socket [ TCP_IP: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>TCP_IP <span class=\"token operator\">+</span> <span class=\"token string\">', TCP_PORT: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_PORT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' ] is open'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>addr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'Server socket [ TCP_IP: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>TCP_IP <span class=\"token operator\">+</span> <span class=\"token string\">', TCP_PORT: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_PORT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' ] is connected with client'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">receiveImages</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                length <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>recvall<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n                length1 <span class=\"token operator\">=</span> length<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n                stringData <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>recvall<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>length1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                stime <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>recvall<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send time: '</span> <span class=\"token operator\">+</span> stime<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'receive time: '</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S.%f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                data <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>frombuffer<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>stringData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> numpy<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span>\n                decimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imdecode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">\"image\"</span><span class=\"token punctuation\">,</span> decimg<span class=\"token punctuation\">)</span>\n                cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>socketClose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>socketOpen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>receiveThread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>receiveImages<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>receiveThread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">recvall</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sock<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        buf <span class=\"token operator\">=</span> <span class=\"token string\">b''</span>\n        <span class=\"token keyword\">while</span> count<span class=\"token punctuation\">:</span>\n            newbuf <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> newbuf<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n            buf <span class=\"token operator\">+=</span> newbuf\n            count <span class=\"token operator\">-=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>newbuf<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> buf\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    server <span class=\"token operator\">=</span> ServerSocket<span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"3-tcp-image-socket-client\" style=\"position:relative;\"><a href=\"#3-tcp-image-socket-client\" aria-label=\"3 tcp image socket client permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. TCP image socket Client</h2>\n<h3 id=\"3-1-sending-imagesclient\" style=\"position:relative;\"><a href=\"#3-1-sending-imagesclient\" aria-label=\"3 1 sending imagesclient permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. Sending images(Client)</h3>\n<p>When sending image data to the server, the Client must hand over the size information of the image data together.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientSocket</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>TCP_SERVER_IP <span class=\"token operator\">=</span> ip\n        self<span class=\"token punctuation\">.</span>TCP_SERVER_PORT <span class=\"token operator\">=</span> port\n        self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>connectServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">connectServer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_SERVER_IP<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>TCP_SERVER_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'Client socket is connected with Server socket [ TCP_SERVER_IP: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>TCP_SERVER_IP <span class=\"token operator\">+</span> <span class=\"token string\">', TCP_SERVER_PORT: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_SERVER_PORT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' ]'</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            self<span class=\"token punctuation\">.</span>sendImages<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'Connect fail %d times. exit program'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>connectCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'%d times try to connect with server'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>connectCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sendImages</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        capture <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        capture<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>CAP_PROP_FRAME_WIDTH<span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span>\n        capture<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>CAP_PROP_FRAME_HEIGHT<span class=\"token punctuation\">,</span> <span class=\"token number\">315</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> capture<span class=\"token punctuation\">.</span>isOpened<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                ret<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> capture<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                resize_frame <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> dsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">480</span><span class=\"token punctuation\">,</span> <span class=\"token number\">315</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>INTER_AREA<span class=\"token punctuation\">)</span>\n\n                now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                stime <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S.%f'</span><span class=\"token punctuation\">)</span>\n\n                encode_param<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>IMWRITE_JPEG_QUALITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">]</span>\n                result<span class=\"token punctuation\">,</span> imgencode <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imencode<span class=\"token punctuation\">(</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">,</span> resize_frame<span class=\"token punctuation\">,</span> encode_param<span class=\"token punctuation\">)</span>\n                data <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>imgencode<span class=\"token punctuation\">)</span>\n                stringData <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n                length <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stringData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>stringData<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>stime<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'send images %d'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n                time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.095</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>sendImages<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    TCP_IP <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\n    TCP_PORT <span class=\"token operator\">=</span> <span class=\"token number\">8080</span>\n    client <span class=\"token operator\">=</span> ClientSocket<span class=\"token punctuation\">(</span>TCP_IP<span class=\"token punctuation\">,</span> TCP_PORT<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"3-2-sending-local-video\" style=\"position:relative;\"><a href=\"#3-2-sending-local-video\" aria-label=\"3 2 sending local video permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. Sending local video</h3>\n<p>When sending image data to the server, the Client must hand over the size information of the image data together.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientVideoSocket</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> video_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>TCP_SERVER_IP <span class=\"token operator\">=</span> ip\n        self<span class=\"token punctuation\">.</span>TCP_SERVER_PORT <span class=\"token operator\">=</span> port\n        self<span class=\"token punctuation\">.</span>video_path <span class=\"token operator\">=</span> video_path\n        self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>connectServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">connectServer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_SERVER_IP<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>TCP_SERVER_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'Client socket is connected with Server socket [ TCP_SERVER_IP: '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>TCP_SERVER_IP <span class=\"token operator\">+</span> <span class=\"token string\">', TCP_SERVER_PORT: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TCP_SERVER_PORT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' ]'</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            self<span class=\"token punctuation\">.</span>sendImages<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>connectCount <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'Connect fail %d times. exit program'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>connectCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'%d times try to connect with server'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>connectCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sendImages</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        capture <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>video_path<span class=\"token punctuation\">)</span>\n        capture<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>CAP_PROP_FRAME_WIDTH<span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span>\n        capture<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>CAP_PROP_FRAME_HEIGHT<span class=\"token punctuation\">,</span> <span class=\"token number\">315</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> capture<span class=\"token punctuation\">.</span>isOpened<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                ret<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> capture<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                resize_frame <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> dsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">480</span><span class=\"token punctuation\">,</span> <span class=\"token number\">315</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>INTER_AREA<span class=\"token punctuation\">)</span>\n\n                now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                stime <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S.%f'</span><span class=\"token punctuation\">)</span>\n\n                encode_param<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>IMWRITE_JPEG_QUALITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">]</span>\n                result<span class=\"token punctuation\">,</span> imgencode <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imencode<span class=\"token punctuation\">(</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">,</span> resize_frame<span class=\"token punctuation\">,</span> encode_param<span class=\"token punctuation\">)</span>\n                data <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>imgencode<span class=\"token punctuation\">)</span>\n                stringData <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n                length <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stringData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>stringData<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>stime<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">u'send images %d'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                cnt<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n                time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>connectServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>sendImages<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    TCP_IP <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\n    TCP_PORT <span class=\"token operator\">=</span> <span class=\"token number\">8080</span>\n    video_path <span class=\"token operator\">=</span> <span class=\"token string\">'./big_buck_bunny_720p_10mb.mp4'</span>\n    client <span class=\"token operator\">=</span> ClientVideoSocket<span class=\"token punctuation\">(</span>TCP_IP<span class=\"token punctuation\">,</span> TCP_PORT<span class=\"token punctuation\">,</span> video_path<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"github\" style=\"position:relative;\"><a href=\"#github\" aria-label=\"github permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[GitHub]</h2>\n<ul>\n<li><a href=\"https://github.com/millo-L/Python-TCP-Image-Socket\">https://github.com/millo-L/Python-TCP-Image-Socket</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-introdution\">1. Introdution</a></p>\n</li>\n<li>\n<p><a href=\"#2-tcp-image-socket-server\">2. TCP image socket Server</a></p>\n</li>\n<li>\n<p><a href=\"#3-tcp-image-socket-client\">3. TCP image socket Client</a></p>\n<ul>\n<li><a href=\"#3-1-sending-imagesclient\">3-1. Sending images(Client)</a></li>\n<li><a href=\"#3-2-sending-local-video\">3-2. Sending local video</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#github\">[GitHub]</a></p>\n</li>\n</ul>","frontmatter":{"author":"millo","category":"python","description":"Let's implement image sending and receiving using TCP socket in python.","image":{"childImageSharp":{"fixed":{"src":"/static/9b41fafad51b5ba82b3257b395be76cb/497c6/python.png"}}},"lang":"en","released_at":"2021-03-21 19:39","series":"none","tags":["python","OpenCV","image socket","socket","TCP"],"title":"[Python] Implementing TCP image socket(Server, Client)","translation":"/Python-TCP-image-socket-구현하기-Server-Client/","updated_at":null},"fields":{"slug":"/Python-Implementing TCP image socket-Server-Client/"}},"allMarkdownRemark":{"nodes":[{"frontmatter":{"lang":"ko","title":"[Docker] docker-compose (node.js, mysql) 실행 순서 동기화"},"fields":{"slug":"/docker-compose-nodejs-mysql-실행-순서-동기화/"}},{"frontmatter":{"lang":"ko","title":"[JavaScript] Callback 지옥 벗어나기"},"fields":{"slug":"/JavaScript-Callback-지옥-벗어나기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] Jenkins in Docker(Ubuntu18.04)"},"fields":{"slug":"/Jenkins-in-Docker-Ubuntu1804/"}},{"frontmatter":{"lang":"ko","title":"[Go] 구조체를 Class처럼 사용하기"},"fields":{"slug":"/Go언어에서-구조체를-Class처럼-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Raspberry pi] OpenCV4 설치하기"},"fields":{"slug":"/Raspberry-pi에-OpenCV4-설치하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] 간단한 Anaconda 가상 환경 관리하기"},"fields":{"slug":"/Python-간단한-Anaconda-가상-환경-관리하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] TCP image socket 구현하기(Server, Client)"},"fields":{"slug":"/Python-TCP-image-socket-구현하기-Server-Client/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express 사용하기"},"fields":{"slug":"/Nodejs-express-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express router 사용하기"},"fields":{"slug":"/Nodejs-express-router-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Raspberry pi] 부팅 시 프로그램 자동 실행하기"},"fields":{"slug":"/Raspberry-pi-부팅시-프로그램-자동-실행하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] moment 사용하기"},"fields":{"slug":"/Nodejs-moment-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] Ubuntu:18.04에서 Docker 설치하기"},"fields":{"slug":"/Ubuntu-1804에서-Docker-설치하기/"}},{"frontmatter":{"lang":"ko","title":"[NGINX] Ubuntu:18.04에서 letsencrypt HTTPS 환경 구축하기"},"fields":{"slug":"/Ubuntu-1804에서-letsencrypt-HTTPS-환경구축/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] nodemailer 사용하기"},"fields":{"slug":"/Nodejs-nodemailer-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] mysql을 async/await로 처리하기"},"fields":{"slug":"/Nodejs-mysql을-async-awiat로-처리하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express cors 사용하기"},"fields":{"slug":"/Nodejs-express-cors-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express static folder 지정하기"},"fields":{"slug":"/Nodejs-express-static-folder-지정하기/"}},{"frontmatter":{"lang":"ko","title":"[JavaScript] Date 객체 사용하기"},"fields":{"slug":"/JavaScript-Date-객체-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] ReactJS Dockerizing하기"},"fields":{"slug":"/React-Dockerizing하기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 배경 이미지 크기 자동으로 맞추기"},"fields":{"slug":"/ReactNative-배경-이미지-크기-자동으로-맞추기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 커스텀 로딩 애니메이션 스크린 구현하기"},"fields":{"slug":"/ReactNative-커스텀-로딩-애니메이션-스크린-구현하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] Socket.io 간단한 채팅 구현하기"},"fields":{"slug":"/Nodejs-socketio-간단한-채팅-구현하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] Ubuntu:18.04 에서 jupyter notebook 사용하기"},"fields":{"slug":"/Python-Ubuntu1804에서-jupyter-notebook-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] HTTP 상태(응답) 코드 정리하기"},"fields":{"slug":"/HTTP-상태코드-정리하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] SOAP 정리하기"},"fields":{"slug":"/SOAP-정리하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] slack 연동하기(알림봇 구현)"},"fields":{"slug":"/Nodejs-slack-연동하기-알림봇구현/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Dimensions.get('window')와 Dimensions.get('screen')의 차이점"},"fields":{"slug":"/ReactNative-Dimensions-get-window와-Dimentsions-get-screen의-차이점/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Bottom tab bar 특정 화면에서 안 보이게 설정하기"},"fields":{"slug":"/ReactNative-Bottom-tab-bar-특정-화면에서-안-보이게-설정하기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 특정 화면에서 화면 고정하기"},"fields":{"slug":"/ReactNative-특정-화면에서-화면-고정하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] PBKDF2 비밀번호 암호화하기"},"fields":{"slug":"/Nodejs-PBKDF2-비밀번호-암호화하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] HTTP란 무엇인가"},"fields":{"slug":"/HTTP란-무엇인가/"}},{"frontmatter":{"lang":"ko","title":"[Network] URI와 URL의 차이점"},"fields":{"slug":"/URI와-URL의-차이점/"}},{"frontmatter":{"lang":"ko","title":"[Gatsby] document is not defined build error 해결 방법"},"fields":{"slug":"/Gatsby-build-error-document-is-not-defined-해결방법/"}},{"frontmatter":{"lang":"en","title":"[Gatsby] Troubleshooting document is not defined build error"},"fields":{"slug":"/Troubleshooting-Gatsby-build-error-document-is-not-defined/"}},{"frontmatter":{"lang":"ko","title":"[Typescript] mongoose methods, statics 사용하기"},"fields":{"slug":"/Typescript-mongodb-method-statics-사용하기/"}},{"frontmatter":{"lang":"en","title":"[Typescript] mongoose methods, statics"},"fields":{"slug":"/Typescript-mongoose-methods-statics/"}},{"frontmatter":{"lang":"en","title":"[Network] Differences between URI and URL"},"fields":{"slug":"/Difference-between-URI-and-URL/"}},{"frontmatter":{"lang":"en","title":"[Docker] Synchronize docker-compose (node.js, mysql) execution order"},"fields":{"slug":"/Synchronize-docker-compose-nodejs-mysql-execution-order/"}},{"frontmatter":{"lang":"en","title":"[JavaScript] Get out of Callback hell"},"fields":{"slug":"/JavaScript-Get-out-of-Callback-hell/"}},{"frontmatter":{"lang":"en","title":"[Docker] Jenkins in Docker(Ubuntu18.04)"},"fields":{"slug":"/jenkins-in-docker-ubuntu/"}},{"frontmatter":{"lang":"en","title":"[Go] Using Struct as Class"},"fields":{"slug":"/Using-struct-as-class-in-golang/"}},{"frontmatter":{"lang":"en","title":"Install Opencv 4 on Raspberry Pi 4"},"fields":{"slug":"/Install-Opencv-4-on-Raspberry-Pi-4/"}},{"frontmatter":{"lang":"en","title":"[Python] Manage simple Anaconda virtual environments기"},"fields":{"slug":"/Python-Manage-simple-Anaconda-virtual-environments/"}},{"frontmatter":{"lang":"en","title":"[Python] Implementing TCP image socket(Server, Client)"},"fields":{"slug":"/Python-Implementing TCP image socket-Server-Client/"}},{"frontmatter":{"lang":"en","title":"[Node.js] Use express"},"fields":{"slug":"/Nodejs-use-expressjs/"}},{"frontmatter":{"lang":"ko","title":"스타트업 코딩 페스티벌 2021 1차, 2차 후기"},"fields":{"slug":"/scope-2021/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 다른 앱(play store, instagram 등) 열기"},"fields":{"slug":"/ReactNative-link-other-app/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Firebase Analytics(@react-native-firebase/analytics) 적용하기"},"fields":{"slug":"/ReactNative-Firebase-Analytics-Setting/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Facebook SDK(react-native-fbsdk) 적용하기"},"fields":{"slug":"/ReactNative-facebook-sdk-setting/"}},{"frontmatter":{"lang":"ko","title":"[React Native] ld: symbol(s) not found for architecture x86_64 해결방법"},"fields":{"slug":"/ReactNative-ld-symbols-not-found-error/"}},{"frontmatter":{"lang":"ko","title":"[Android] Debug 버전으로는 실행되는 데 Release Crash 나는 경우"},"fields":{"slug":"/Android-release-error/"}},{"frontmatter":{"lang":"ko","title":"[React Native] CodePush를 이용한 앱 업데이트"},"fields":{"slug":"/ReactNative-codepush/"}},{"frontmatter":{"lang":"en","title":"[React Native] Troubleshooting ld: symbol(s) not found for architecture x86_64"},"fields":{"slug":"/ReactNative-ld-symbols-not-found-error-en/"}},{"frontmatter":{"lang":"en","title":"[Android] Runs with Debug version, but fails with Release version"},"fields":{"slug":"/Android-release-error-en/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Kakao Link를 사용해서 Deep link를 구현해보자."},"fields":{"slug":"/ReactNative-kakao-deep-link/"}},{"frontmatter":{"lang":"en","title":"[React Native] Install @react-native-firebase (solve pod install issue)"},"fields":{"slug":"/ReactNative-Firebase-2023-05-25-en/"}},{"frontmatter":{"lang":"ko","title":"[React Native] @react-native-firebase 적용하기 (pod install 에러 해결)"},"fields":{"slug":"/ReactNative-Firebase-2023-05-25/"}},{"frontmatter":{"lang":"ko","title":"[React Native] realm one-to-many relationship 적용하기"},"fields":{"slug":"/reactnative-realm-one-to-many-relationship-2023-05-26/"}},{"frontmatter":{"lang":"en","title":"[React Native] Solving realm one-to-many relationship issue"},"fields":{"slug":"/reactnative-realm-one-to-many-relationship-2023-05-26-en/"}}]}},"pageContext":{"id":"d23e25e0-290e-58a3-8873-1541d70e6b40","series":"none","lang":"en","translation":"/Python-TCP-image-socket-구현하기-Server-Client/"}},"staticQueryHashes":["2083168511","3061319093","3557473807","356676075"],"slicesMap":{}}