{"componentChunkName":"component---src-components-post-post-template-tsx","path":"/Typescript-mongodb-method-statics-사용하기/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"1-서론\" style=\"position:relative;\"><a href=\"#1-%EC%84%9C%EB%A1%A0\" aria-label=\"1 서론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 서론</h2>\n<p>typescript 환경에서 mongoose 모듈을 사용하여 methods와 statics를 사용할 상황이 생겼는 데, nodejs에서는 바로 실행되던 부분이 typescript에서는 조금 더 까다롭게 설정이 되서 포스팅을 적는다. typescript 자체가 워낙 자료형에 민감하기 때문에 더욱 그런 것 같다. 그 덕분에 코드 리뷰나 협업에서는 편리함을 느끼지만 간혹 이렇게 불편함이 생길 때가 있는 것 같다.</p>\n<h2 id=\"2-코드\" style=\"position:relative;\"><a href=\"#2-%EC%BD%94%EB%93%9C\" aria-label=\"2 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 코드</h2>\n<h3 id=\"2-1-전체-코드\" style=\"position:relative;\"><a href=\"#2-1-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"2 1 전체 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 전체 코드</h3>\n<p>우선 전체 코드를 보도록 하자. <br />\n큰 틀을 보자면 User라는 mongodb의 모델이 사용할 변수와 methods, statics 들의 자료형을 interface를 통해서 명시하고 해당 interface를 포함하는 model을 생성한다. 자세한 사항은 아래에서 차근차근 진행하도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token comment\">// user.ts</span>\n\n<span class=\"token keyword\">import</span> mongoose<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Schema<span class=\"token punctuation\">,</span> Document<span class=\"token punctuation\">,</span> Model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> bcrypt <span class=\"token keyword\">from</span> <span class=\"token string\">\"bcrypt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    hashedPassword<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserDocument</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IUser</span><span class=\"token punctuation\">,</span> Document <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setPassword</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">checkPassword</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserModel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model<span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">findByUsername</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> UserSchema<span class=\"token operator\">:</span> Schema<span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    hashedPassword<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nUserSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setPassword</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hashedPassword <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nUserSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">checkPassword</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hashedPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nUserSchema<span class=\"token punctuation\">.</span>statics<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">findByUsername</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">model</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token punctuation\">,</span> IUserModel<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> UserSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> User<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"2-2-모델에서-사용할-변수-interface\" style=\"position:relative;\"><a href=\"#2-2-%EB%AA%A8%EB%8D%B8%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%B3%80%EC%88%98-interface\" aria-label=\"2 2 모델에서 사용할 변수 interface permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 모델에서 사용할 변수 interface</h3>\n<p>아래의 interface는 User 모델에서 사용할 변수들의 이름과 자료형을 명시하는 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    hashedPassword<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"-잠깐-methods와-statics의-차이점\" style=\"position:relative;\"><a href=\"#-%EC%9E%A0%EA%B9%90-methods%EC%99%80-statics%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\" 잠깐 methods와 statics의 차이점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[👋 잠깐] methods와 statics의 차이점</h3>\n<p>methods를 사용할 때는 이 <span style=\"color:red\">method를 호출한 객체가 method 내에서의 this가 되고</span>,<br /> statics를 사용할 때는 이 <span style=\"color:red\">statics를 호출한 객체에 상관없이 this가 모델 자체가 된다.</span></p>\n<h4>methods</h4>\n<p>따라서, 위의 코드에서 setPassword와 checkPassword는 한 객체에 대해서 각각 해당 객체에 비밀번호를 설정하거나 해당 객체의 비밀번호와 일치하는 지 여부를 확인할 수 있다.</p>\n<h4>statics</h4>\n<p>반면, findByUsername은 Model 내에서 해당 username인 User를 반환할 수 있다.</p>\n<h3 id=\"2-3-모델에서-사용할-methods-interface\" style=\"position:relative;\"><a href=\"#2-3-%EB%AA%A8%EB%8D%B8%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-methods-interface\" aria-label=\"2 3 모델에서 사용할 methods interface permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. 모델에서 사용할 methods interface</h3>\n<p>아래의 interface는 User 모델에서 사용할 변수에 덧붙여 methods의 이름과 자료형을 명시하는 역할을 한다. <br />\n다만, 위의 interface와 다른 점은 IUser 뿐만 아니라 <span style=\"color:red\">mongoose의 class 인 <strong>Document</strong>도 extends 한다는 점이다.</span> <br />\n이후 해당 interface를 토대로 mongoose Schema를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserDocument</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IUser</span><span class=\"token punctuation\">,</span> Document <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setPassword</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">checkPassword</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> UserSchema<span class=\"token operator\">:</span> Schema<span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    hashedPassword<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nUserSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setPassword</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hashedPassword <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nUserSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">checkPassword</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hashedPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"2-4-모델에서-사용할-statics-interface\" style=\"position:relative;\"><a href=\"#2-4-%EB%AA%A8%EB%8D%B8%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-statics-interface\" aria-label=\"2 4 모델에서 사용할 statics interface permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. 모델에서 사용할 statics interface</h3>\n<p>아래의 interface는 위의 변수와 methods 그리고 mongoose의 Document class를 포함한 interface를 Model 형태로 extends하고 User 모델에서 사용할 statics를 명시하는 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserModel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model<span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">findByUsername</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nUserSchema<span class=\"token punctuation\">.</span>statics<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">findByUsername</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"2-5-user-모델-선언\" style=\"position:relative;\"><a href=\"#2-5-user-%EB%AA%A8%EB%8D%B8-%EC%84%A0%EC%96%B8\" aria-label=\"2 5 user 모델 선언 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-5. User 모델 선언</h3>\n<p>위에서 만든 IUserDocument(변수 + methods의 interface)와 statics 까지 포함한 interface를 기반으로 User model을 선언한다. 이 후 해당 model을 import하면 위의 변수, methods, statics 기능을 모두 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">model</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IUserDocument<span class=\"token punctuation\">,</span> IUserModel<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> UserSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> User<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EC%84%9C%EB%A1%A0\">1. 서론</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%BD%94%EB%93%9C\">2. 코드</a></p>\n<ul>\n<li><a href=\"#2-1-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\">2-1. 전체 코드</a></li>\n<li><a href=\"#2-2-%EB%AA%A8%EB%8D%B8%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%B3%80%EC%88%98-interface\">2-2. 모델에서 사용할 변수 interface</a></li>\n<li><a href=\"#-%EC%9E%A0%EA%B9%90-methods%EC%99%80-statics%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">[👋 잠깐] methods와 statics의 차이점</a></li>\n<li><a href=\"#2-3-%EB%AA%A8%EB%8D%B8%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-methods-interface\">2-3. 모델에서 사용할 methods interface</a></li>\n<li><a href=\"#2-4-%EB%AA%A8%EB%8D%B8%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-statics-interface\">2-4. 모델에서 사용할 statics interface</a></li>\n<li><a href=\"#2-5-user-%EB%AA%A8%EB%8D%B8-%EC%84%A0%EC%96%B8\">2-5. User 모델 선언</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"author":"millo","category":"typescript","description":"typescript 환경에서 mongoose의 methods와 statics를 사용해보자.","image":{"childImageSharp":{"fixed":{"src":"/static/a02102f27ded84e8f475f22fcbf0a56a/151a9/typescript.png"}}},"lang":"ko","released_at":"2021-03-02 22:24","series":"none","tags":["typescript","nodejs","mongodb","mongoose","statics","methods"],"title":"[Typescript] mongoose methods, statics 사용하기","translation":"/Typescript-mongoose-methods-statics/","updated_at":null},"fields":{"slug":"/Typescript-mongodb-method-statics-사용하기/"}},"allMarkdownRemark":{"nodes":[{"frontmatter":{"lang":"ko","title":"[Docker] docker-compose (node.js, mysql) 실행 순서 동기화"},"fields":{"slug":"/docker-compose-nodejs-mysql-실행-순서-동기화/"}},{"frontmatter":{"lang":"ko","title":"[JavaScript] Callback 지옥 벗어나기"},"fields":{"slug":"/JavaScript-Callback-지옥-벗어나기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] Jenkins in Docker(Ubuntu18.04)"},"fields":{"slug":"/Jenkins-in-Docker-Ubuntu1804/"}},{"frontmatter":{"lang":"ko","title":"[Go] 구조체를 Class처럼 사용하기"},"fields":{"slug":"/Go언어에서-구조체를-Class처럼-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Raspberry pi] OpenCV4 설치하기"},"fields":{"slug":"/Raspberry-pi에-OpenCV4-설치하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] 간단한 Anaconda 가상 환경 관리하기"},"fields":{"slug":"/Python-간단한-Anaconda-가상-환경-관리하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] TCP image socket 구현하기(Server, Client)"},"fields":{"slug":"/Python-TCP-image-socket-구현하기-Server-Client/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express 사용하기"},"fields":{"slug":"/Nodejs-express-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express router 사용하기"},"fields":{"slug":"/Nodejs-express-router-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Raspberry pi] 부팅 시 프로그램 자동 실행하기"},"fields":{"slug":"/Raspberry-pi-부팅시-프로그램-자동-실행하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] moment 사용하기"},"fields":{"slug":"/Nodejs-moment-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] Ubuntu:18.04에서 Docker 설치하기"},"fields":{"slug":"/Ubuntu-1804에서-Docker-설치하기/"}},{"frontmatter":{"lang":"ko","title":"[NGINX] Ubuntu:18.04에서 letsencrypt HTTPS 환경 구축하기"},"fields":{"slug":"/Ubuntu-1804에서-letsencrypt-HTTPS-환경구축/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] nodemailer 사용하기"},"fields":{"slug":"/Nodejs-nodemailer-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] mysql을 async/await로 처리하기"},"fields":{"slug":"/Nodejs-mysql을-async-awiat로-처리하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express cors 사용하기"},"fields":{"slug":"/Nodejs-express-cors-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] express static folder 지정하기"},"fields":{"slug":"/Nodejs-express-static-folder-지정하기/"}},{"frontmatter":{"lang":"ko","title":"[JavaScript] Date 객체 사용하기"},"fields":{"slug":"/JavaScript-Date-객체-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Docker] ReactJS Dockerizing하기"},"fields":{"slug":"/React-Dockerizing하기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 배경 이미지 크기 자동으로 맞추기"},"fields":{"slug":"/ReactNative-배경-이미지-크기-자동으로-맞추기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 커스텀 로딩 애니메이션 스크린 구현하기"},"fields":{"slug":"/ReactNative-커스텀-로딩-애니메이션-스크린-구현하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] Socket.io 간단한 채팅 구현하기"},"fields":{"slug":"/Nodejs-socketio-간단한-채팅-구현하기/"}},{"frontmatter":{"lang":"ko","title":"[Python] Ubuntu:18.04 에서 jupyter notebook 사용하기"},"fields":{"slug":"/Python-Ubuntu1804에서-jupyter-notebook-사용하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] HTTP 상태(응답) 코드 정리하기"},"fields":{"slug":"/HTTP-상태코드-정리하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] SOAP 정리하기"},"fields":{"slug":"/SOAP-정리하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] slack 연동하기(알림봇 구현)"},"fields":{"slug":"/Nodejs-slack-연동하기-알림봇구현/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Dimensions.get('window')와 Dimensions.get('screen')의 차이점"},"fields":{"slug":"/ReactNative-Dimensions-get-window와-Dimentsions-get-screen의-차이점/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Bottom tab bar 특정 화면에서 안 보이게 설정하기"},"fields":{"slug":"/ReactNative-Bottom-tab-bar-특정-화면에서-안-보이게-설정하기/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 특정 화면에서 화면 고정하기"},"fields":{"slug":"/ReactNative-특정-화면에서-화면-고정하기/"}},{"frontmatter":{"lang":"ko","title":"[Node.js] PBKDF2 비밀번호 암호화하기"},"fields":{"slug":"/Nodejs-PBKDF2-비밀번호-암호화하기/"}},{"frontmatter":{"lang":"ko","title":"[Network] HTTP란 무엇인가"},"fields":{"slug":"/HTTP란-무엇인가/"}},{"frontmatter":{"lang":"ko","title":"[Network] URI와 URL의 차이점"},"fields":{"slug":"/URI와-URL의-차이점/"}},{"frontmatter":{"lang":"ko","title":"[Gatsby] document is not defined build error 해결 방법"},"fields":{"slug":"/Gatsby-build-error-document-is-not-defined-해결방법/"}},{"frontmatter":{"lang":"en","title":"[Gatsby] Troubleshooting document is not defined build error"},"fields":{"slug":"/Troubleshooting-Gatsby-build-error-document-is-not-defined/"}},{"frontmatter":{"lang":"ko","title":"[Typescript] mongoose methods, statics 사용하기"},"fields":{"slug":"/Typescript-mongodb-method-statics-사용하기/"}},{"frontmatter":{"lang":"en","title":"[Typescript] mongoose methods, statics"},"fields":{"slug":"/Typescript-mongoose-methods-statics/"}},{"frontmatter":{"lang":"en","title":"[Network] Differences between URI and URL"},"fields":{"slug":"/Difference-between-URI-and-URL/"}},{"frontmatter":{"lang":"en","title":"[Docker] Synchronize docker-compose (node.js, mysql) execution order"},"fields":{"slug":"/Synchronize-docker-compose-nodejs-mysql-execution-order/"}},{"frontmatter":{"lang":"en","title":"[JavaScript] Get out of Callback hell"},"fields":{"slug":"/JavaScript-Get-out-of-Callback-hell/"}},{"frontmatter":{"lang":"en","title":"[Docker] Jenkins in Docker(Ubuntu18.04)"},"fields":{"slug":"/jenkins-in-docker-ubuntu/"}},{"frontmatter":{"lang":"en","title":"[Go] Using Struct as Class"},"fields":{"slug":"/Using-struct-as-class-in-golang/"}},{"frontmatter":{"lang":"en","title":"Install Opencv 4 on Raspberry Pi 4"},"fields":{"slug":"/Install-Opencv-4-on-Raspberry-Pi-4/"}},{"frontmatter":{"lang":"en","title":"[Python] Manage simple Anaconda virtual environments기"},"fields":{"slug":"/Python-Manage-simple-Anaconda-virtual-environments/"}},{"frontmatter":{"lang":"en","title":"[Python] Implementing TCP image socket(Server, Client)"},"fields":{"slug":"/Python-Implementing TCP image socket-Server-Client/"}},{"frontmatter":{"lang":"en","title":"[Node.js] Use express"},"fields":{"slug":"/Nodejs-use-expressjs/"}},{"frontmatter":{"lang":"ko","title":"스타트업 코딩 페스티벌 2021 1차, 2차 후기"},"fields":{"slug":"/scope-2021/"}},{"frontmatter":{"lang":"ko","title":"[React Native] 다른 앱(play store, instagram 등) 열기"},"fields":{"slug":"/ReactNative-link-other-app/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Firebase Analytics(@react-native-firebase/analytics) 적용하기"},"fields":{"slug":"/ReactNative-Firebase-Analytics-Setting/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Facebook SDK(react-native-fbsdk) 적용하기"},"fields":{"slug":"/ReactNative-facebook-sdk-setting/"}},{"frontmatter":{"lang":"ko","title":"[React Native] ld: symbol(s) not found for architecture x86_64 해결방법"},"fields":{"slug":"/ReactNative-ld-symbols-not-found-error/"}},{"frontmatter":{"lang":"ko","title":"[Android] Debug 버전으로는 실행되는 데 Release Crash 나는 경우"},"fields":{"slug":"/Android-release-error/"}},{"frontmatter":{"lang":"ko","title":"[React Native] CodePush를 이용한 앱 업데이트"},"fields":{"slug":"/ReactNative-codepush/"}},{"frontmatter":{"lang":"en","title":"[React Native] Troubleshooting ld: symbol(s) not found for architecture x86_64"},"fields":{"slug":"/ReactNative-ld-symbols-not-found-error-en/"}},{"frontmatter":{"lang":"en","title":"[Android] Runs with Debug version, but fails with Release version"},"fields":{"slug":"/Android-release-error-en/"}},{"frontmatter":{"lang":"ko","title":"[React Native] Kakao Link를 사용해서 Deep link를 구현해보자."},"fields":{"slug":"/ReactNative-kakao-deep-link/"}},{"frontmatter":{"lang":"ko","title":"[React Native] @react-native-firebase 적용하기 (pod install 에러 해결)"},"fields":{"slug":"/ReactNative-Firebase-2023-05-25/"}},{"frontmatter":{"lang":"en","title":"[React Native] Install @react-native-firebase (solve pod install issue)"},"fields":{"slug":"/ReactNative-Firebase-2023-05-25-en/"}},{"frontmatter":{"lang":"en","title":"[React Native] Solving realm one-to-many relationship issue"},"fields":{"slug":"/reactnative-realm-one-to-many-relationship-2023-05-26-en/"}},{"frontmatter":{"lang":"ko","title":"[React Native] realm one-to-many relationship 적용하기"},"fields":{"slug":"/reactnative-realm-one-to-many-relationship-2023-05-26/"}}]}},"pageContext":{"slug":"/Typescript-mongodb-method-statics-사용하기/","series":"none"}},"staticQueryHashes":["2083168511","3061319093","3557473807","356676075"],"slicesMap":{}}