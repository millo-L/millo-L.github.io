{"version":3,"sources":["webpack:///./src/components/main/MainPageRowTemplate.tsx","webpack:///./src/components/base/Footer.tsx","webpack:///./src/lib/list/reshape.ts","webpack:///./src/components/post/PostTemplate.tsx","webpack:///./src/components/post/ScrollSpy.tsx","webpack:///./src/components/post/PostToC.tsx","webpack:///./src/components/post/PostSeriesList.tsx","webpack:///./src/components/post/PrevNextPostItem.tsx","webpack:///./src/components/post/PrevNextPost.tsx","webpack:///./src/components/post/TagList.tsx","webpack:///./src/components/post/PostViewer.tsx","webpack:///./src/components/post/Utterances.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack:///./src/components/post/PostPage.tsx"],"names":["Wrapper","Styled","div","MainPageRowTemplate","children","style","memo","FooterWrapper","palette","gray","Footer","className","reshapePost","allMarkdownRemark","posts","edges","map","edge","obj","node","frontmatter","post","path","fields","slug","title","description","released_at","updated_at","image","childImageSharp","fluid","lang","category","push","filterByCategory","filter","filterByLanguage","list","item","reshapeSeries","seriesList","group","len","length","i","nodes","series","fieldValue","replace","totalCount","BackgroundStyle","createGlobalStyle","PostTemplateWrapper","PostTemplate","ScrollSpy","target","refs","sensitivity","this","targets","Array","from","querySelectorAll","window","addEventListener","onScroll","isOnTopOfDoc","deactiveateTarget","forEach","ref","t","findTarget","id","activate","document","documentElement","scrollTop","offsetTop","a","deactivate","decodeURIComponent","attributes","value","el","classList","add","remove","ToCWrapper","media","custom","indigo","PostToC","tableOfContents","useEffect","querySelector","headings","h","toc","dangerouslySetInnerHTML","__html","PostSeriesList","nowPostTitle","useToggle","seriesListVisible","onToggle","to","index","key","onClick","bounceLeft","keyframes","bounceRight","Circle","styled","Link","props","right","css","Text","small","ellipsis","PrevNextPostItem","seriesPost","mediaQuery","ItemWrapper","PrevNextPost","useCallback","nowPageIndex","TagItemWrapper","TagItem","tag","TagListWrapper","TagList","tags","PostViewerWrapper","PostContentWrapper","PostViewer","html","onClickTag","categoryMap","src","formatDate","Utterances","React","TypeError","containerRef","createRef","useLayoutEffect","utterances","createElement","repo","label","theme","crossOrigin","async","Object","entries","setAttribute","current","appendChild","displayName","PostPage","data","markdownRemark","site","SEO","date","url","siteMetadata","siteUrl","Header","ko_to","translation","en_to","MainResponsive","marginTop","marginBottom","SimpleProfile","type","categoryVisible"],"mappings":"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","file":"component---src-components-post-post-page-tsx-2bb5757fa753ab799242.js","sourcesContent":["import React, { memo } from \"react\"\nimport Styled from \"styled-components\"\n\nconst Wrapper = Styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    \n`\n\ninterface MainPageRowTemplateProps {\n    children: React.ReactNode\n    style?: React.CSSProperties;\n}\n\nconst MainPageRowTemplate = ({ children, style }: MainPageRowTemplateProps) => {\n    return <Wrapper style={style}>{children}</Wrapper>\n}\n\nexport default memo(MainPageRowTemplate)\n","import React from 'react';\nimport Styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport ProfileIcons from '../common/ProfileIcons';\n\nconst FooterWrapper = Styled.div`\n    display: flex;\n    border-top: 1px solid ${palette.gray[5]};\n    margin-top: 5rem;\n    width: 100%;\n    height: 8rem;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    span {\n        font-size: 1.5rem;\n    }\n\n    .icon-wrapper {\n        width: 9rem;\n        display: flex;\n        justify-content: space-between;\n        flex-direction: row;\n        margin-top: 1rem;\n        svg {\n            width: 30%;\n            height: 1.5rem;\n            cursor: pointer;\n        }\n    }\n`;\n\nconst Footer = () => {\n    return (\n        <FooterWrapper>\n            <span>millo's tech blog</span>\n            <ProfileIcons className=\"icon-wrapper\" />\n        </FooterWrapper>\n    );\n}\n\nexport default Footer;","import { PartialPostType } from \"../../components/post/PostCard\"\nimport { SeriesType } from \"../../components/series/SeriesCard\"\n\nexport const reshapePost = (allMarkdownRemark: any) => {\n    let posts: Array<PartialPostType> = []\n    const { edges } = allMarkdownRemark\n\n    edges.map(edge => {\n        const obj = edge.node.frontmatter\n        let post: PartialPostType = {\n            path: edge.node.fields.slug,\n            title: obj.title,\n            description: obj.description,\n            released_at: obj.released_at,\n            updated_at: obj.updated_at,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            lang: obj.lang,\n            category: obj.category,\n        }\n\n        posts.push(post)\n    })\n\n    return posts\n}\n\nexport const filterByCategory = (\n    posts: Array<PartialPostType>,\n    category: string\n) => {\n    return posts.filter(post => post.category === category)\n}\n\nexport function filterByLanguage<T>(list: T[], lang: string) {\n    return list.filter(item => (item as any).lang === lang)\n}\n\nexport const reshapeSeries = (allMarkdownRemark: any) => {\n    let seriesList: Array<SeriesType> = []\n    const { group } = allMarkdownRemark\n    let len = group.length\n\n    for (let i = 0; i < len; i++) {\n        const obj = group[i].nodes[0].frontmatter\n        let series: SeriesType = {\n            path: `/series/${group[i].fieldValue.replace(/ /gi, \"-\")}`,\n            title: group[i].fieldValue,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            updated_at: obj.released_at,\n            totalCount: group[i].totalCount,\n            lang: obj.lang,\n        }\n        seriesList.push(series)\n    }\n\n    return seriesList\n}\n","import React from 'react';\nimport Styled, { createGlobalStyle } from 'styled-components';\nimport '../css/typography.css';\n\nconst BackgroundStyle = createGlobalStyle`\n    body {\n        background-color: white;\n        font-family: \"ELAND\", serif;\n    }\n`;\n\nconst PostTemplateWrapper = Styled.div`\n    font-family: \"ELAND\", serif;\n`;\n\ninterface PostTemplateProps {\n    children: React.ReactNode;\n}\n\n\nconst PostTemplate = ({ children }: PostTemplateProps) => {\n    return (\n        <>\n            <BackgroundStyle />\n            <PostTemplateWrapper>\n                {children}\n            </PostTemplateWrapper>\n        </>\n    );\n}\n\nexport default PostTemplate;","export default class ScrollSpy {\n    public targets: HTMLElement[]\n    public refs: HTMLElement[]\n    public sensitivity: number\n\n    constructor(target: HTMLElement, refs: HTMLElement[], sensitivity?: number) {\n        this.targets = Array.from(target.querySelectorAll(\"a\"))\n        this.refs = refs\n        this.sensitivity = sensitivity || -10\n\n        window.addEventListener(\"scroll\", () => this.onScroll())\n    }\n\n    onScroll() {\n        if (!this.isOnTopOfDoc(this.refs[0])) {\n            this.deactiveateTarget()\n        }\n\n        this.refs.forEach(ref => {\n            if (this.isOnTopOfDoc(ref)) {\n                this.deactiveateTarget()\n                const t = this.findTarget(ref.id)\n                if (t) {\n                    this.activate(t)\n                }\n            }\n        })\n    }\n\n    isOnTopOfDoc(ref: HTMLElement): boolean {\n        return (\n            document.documentElement.scrollTop - ref.offsetTop >= this.sensitivity\n        )\n    }\n\n    deactiveateTarget() {\n        this.targets.forEach(a => this.deactivate(a))\n    }\n\n    findTarget(id: string): HTMLElement | undefined {\n        return this.targets.filter(\n            a =>\n                decodeURIComponent(a.attributes[\"href\"].value.replace(/^#/, \"\")) === id\n        )[0]\n    }\n\n    activate(el: HTMLElement) {\n        el.classList.add(\"active\")\n    }\n\n    deactivate(el: HTMLElement) {\n        el.classList.remove(\"active\")\n    }\n}","import React, { memo, useEffect } from \"react\"\nimport Styled from 'styled-components';\nimport media from \"../../lib/styles/media\";\nimport palette from \"../../lib/styles/palette\";\nimport ScrollSpy from \"./ScrollSpy\"\n\nconst ToCWrapper = Styled.div`\n    transition: 0.125s all ease-in;\n    width: 20%;\n    padding: 0.5rem;\n    padding-right: 1rem;\n    padding-left: 0;\n    order: 1;\n    top: 10rem;\n    margin-left: 4rem;\n    position: sticky;\n    height: 40rem;\n    overflow-y: auto;\n    word-break: break-all;\n\n    ${media.custom(1440)} {\n        display: none;\n    }\n    ul:first-child {\n        padding-left: 1rem;\n        border-left: 2px solid ${palette.indigo[4]};\n    }\n    ul {\n        list-style: none;\n        margin: 0;\n        li {\n            \n            border: none;\n            margin-bottom: 4px;\n            p {\n                margin: 0;\n            }\n        }\n    }\n    a {\n        text-decoration: none;\n        color: ${palette.gray[4]};\n        font-size: 0.9rem;\n        &:hover,\n        &:focus {\n            color: ${palette.indigo[4]};\n        }\n        &.active {\n            color: ${palette.indigo[9]};\n            transform: scale(1.1);\n        }\n    }\n    & + & {\n        margin-top: 4px;\n    }\n\n`;\n\ninterface PostToCProps {\n    tableOfContents: string\n}\n\nconst PostToC = ({ tableOfContents }: PostToCProps) => {\n    useEffect(() => {\n        const post = document.querySelector(\"#content-container\")\n        const headings = Array.from(\n            post.querySelectorAll(\"h1, h2\")\n        ).filter((h: any) => h.id)\n        const toc = document.querySelector(\"#toc-container\")\n\n        new ScrollSpy(toc as HTMLElement, headings as HTMLElement[]);\n    }, [])\n\n    return (\n        <ToCWrapper\n            id=\"toc-container\"\n            dangerouslySetInnerHTML={{ __html: tableOfContents }}\n        />\n    )\n}\n\nexport default memo(PostToC);","import { Link } from 'gatsby';\nimport React from 'react';\nimport { AiFillCaretDown, AiFillCaretUp, AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport { IoBookmarkSharp } from \"react-icons/io5\";\nimport Styled from 'styled-components';\nimport useToggle from '../../lib/hooks/useToggle';\nimport media from '../../lib/styles/media';\nimport palette from '../../lib/styles/palette';\n\nconst Wrapper = Styled.div`\n    position: relative;\n    width: 80%;\n    background-color: ${palette.gray[0]};\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n    border-radius: 10px;\n    word-break: break-all;\n\n    ${media.custom(767)} {\n        width: 100%;\n    }\n\n    h2 {\n        margin-left: 1.5rem;\n        margin-right: 1.5rem;\n\n        ${media.custom(767)} {\n            font-size: 1.2rem;\n        }\n    }\n\n    a {\n        text-decoration: none;\n        color: ${palette.gray[8]};\n\n        &:hover {\n            text-decoration: underline;\n        }\n    }\n\n    ol {\n        padding-left: 3rem;\n        padding-right: 1.5rem;\n\n        ${media.custom(767)} {\n            font-size: 0.9rem;\n        }\n\n        .now-post {\n            color: ${palette.indigo[5]};\n            font-weight: bold;\n        }\n\n        li {\n            margin: 0.5rem;\n            color: ${palette.gray[6]};\n\n\n        }\n    }\n\n    .bookmark-img {\n        position : absolute;\n        right: 1.5rem;\n        top: -2px;\n        width: 2.8rem;\n        height: 2.8rem;\n        color: ${palette.indigo[5]};\n\n        ${media.custom(767)} {\n            right: 1rem;\n            width: 2.2rem;\n            height: 2.2rem;\n        }\n    }\n\n    .footer {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 3rem;\n        margin-right: 1.5rem;\n        margin-left: 1.5rem;\n\n        .visible-btn {\n            display: flex;\n            cursor: pointer;\n            align-items: center;\n            color: ${palette.gray[7]};\n            span {\n                margin-left: 0.3rem;\n                font-size: 0.9rem;\n            }\n        }\n\n    }\n`;\n\nexport type PartialSeriesType = {\n    slug: string;\n    title: string;\n    lang: string;\n}\n\ninterface PostSeriesListProps {\n    series: string;\n    seriesList: Array<PartialSeriesType>;\n    nowPostTitle: string;\n    lang: string;\n}\n\nconst PostSeriesList = ({ series, seriesList, nowPostTitle, lang }: PostSeriesListProps) => {\n    const [seriesListVisible, onToggle] = useToggle(true);\n\n    return (\n        <Wrapper>\n            <Link to={`/series/${series.replace(/ /gi, '-')}`}><h2>{series}</h2></Link>\n            <IoBookmarkSharp className=\"bookmark-img\" />\n            {seriesListVisible\n                ?\n                <ol>\n                    {seriesList.map((series, index) => {\n                        return nowPostTitle === series.title ? <li key={index}><span className=\"now-post\" >{series.title}</span></li> : <li key={index}><Link to={`${series.slug}`} >{series.title}</Link></li>\n                    })}\n                </ol>\n                :\n                <div></div>}\n            <div className=\"footer\">\n                {seriesListVisible\n                    ?\n                    <div className=\"visible-btn\" onClick={onToggle}>\n                        <AiFillCaretUp /><span>{lang === 'ko' ? '숨기기' : 'Hide'}</span>\n                    </div>\n                    :\n                    <div className=\"visible-btn\" onClick={onToggle}>\n                        <AiFillCaretDown /><span>{lang === 'ko' ? '목록 보기' : 'Show list'}</span>\n                    </div>\n                }\n            </div>\n        </Wrapper>\n    );\n}\n\nexport default PostSeriesList;","import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { MdArrowBack, MdArrowForward } from 'react-icons/md';\nimport { ellipsis } from '../../lib/styles/utils';\nimport media from '../../lib/styles/media';\nimport { Link } from 'gatsby';\nimport { PartialSeriesType } from './PostSeriesList';\n\nconst bounceLeft = keyframes`\n    0% {\n        transform: translateX(0px)\n    }\n    50% {\n        transform: translateX(-8px)\n    }\n    100% {\n        transform: translateX(0px)\n    }\n`;\n\nconst bounceRight = keyframes`\n    0% {\n        transform: translateX(0px)\n    }\n    50% {\n        transform: translateX(8px)\n    }\n    100% {\n        transform: translateX(0px)\n    }\n`;\n\nconst Circle = styled.div`\n    width: 32px;\n    height: 32px;\n    border-radius: 16px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid ${palette.indigo[5]};\n    font-size: 1.5rem;\n    color: ${palette.indigo[5]};\n    margin-left: 1rem;\n    margin-right: 1rem;\n`;\n\nconst Wrapper = styled(Link) <{ right: boolean }>`\n    cursor: pointer;\n    background: ${palette.gray[0]};\n    box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.06);\n    width: 100%;\n    height: 4rem;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    ${props =>\n        props.right &&\n        css`\n        flex-direction: row-reverse;\n        `}\n    &:hover {\n        ${Circle} {\n        animation-duration: 0.35s;\n        animation-name: ${props => (props.right ? bounceRight : bounceLeft)};\n        animation-fill-mode: forwards;\n        animation-timing-function: ease-out;\n        }\n    }\n`;\n\nconst Text = styled.div<{ right: boolean }>`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: ${props => (props.right ? 'flex-end' : 'flex-start')};\n    line-height: 1;\n    min-width: 0;\n    \n    ${props =>\n        props.right ?\n            css`\n                margin-left: 1rem;\n            ` :\n            css`\n                margin-right: 1rem;\n            `\n    };\n    .description {\n        font-size: 0.75rem;\n        font-weight: bold;\n        color: ${palette.gray[7]};\n    }\n    h3 {\n        ${props =>\n        props.right ?\n            css`\n                margin-left: 1rem;\n                text-align: right;\n            ` :\n            css`\n                margin-right: 1rem;\n            `\n    };\n        width: 100%;\n        font-size: 1.125rem;\n        color: ${palette.gray[7]};\n        line-height: 1.15;\n        margin: 0;\n        margin-top: 0.5rem;\n        ${media.small} {\n            font-size: 1rem;\n        }\n        ${ellipsis};\n    }\n`;\n\ninterface PrevNextPostItemProps {\n    right: boolean;\n    seriesPost: PartialSeriesType | null;\n    lang: string;\n}\n\nconst PrevNextPostItem = ({\n    right,\n    seriesPost,\n    lang\n}: PrevNextPostItemProps) => {\n    if (!seriesPost) {\n        return null;\n    }\n    const to = `${seriesPost.slug}`;\n\n    return (\n        <Wrapper right={right} to={to}>\n            <Circle>\n                {right ? <MdArrowForward /> : <MdArrowBack />}\n            </Circle>\n            <Text right={right}>\n                <div className=\"description\">\n                    {right ? (lang === 'ko' ? '다음' : 'Next') : (lang === 'ko' ? '이전' : 'Previous')} {lang === 'ko' ? '포스트' : 'Post'}\n                </div>\n                <h3>{seriesPost.title}</h3>\n            </Text>\n        </Wrapper>\n    );\n};\n\nexport default PrevNextPostItem;\n","import React, { useCallback } from 'react';\nimport Styled from 'styled-components';\nimport { mediaQuery } from '../../lib/styles/media';\nimport { PartialSeriesType } from './PostSeriesList';\nimport PrevNextPostItem from './PrevNextPostItem';\n\nconst Wrapper = Styled.div`\n    width: 100%;\n    margin-top: 5rem;\n    display: flex;\n    align-items: space-between;\n    justify-content: space-between;\n    margin-left: auto;\n    margin-right: auto;\n    ${mediaQuery(767)} {\n        flex-direction: column-reverse;\n    }\n`;\n\nconst ItemWrapper = Styled.div`\n    width: 300px;\n\n    ${mediaQuery(767)} {\n        width: 100%;\n        & + & {\n            margin-bottom: 1.5rem;\n        }\n    }\n`;\n\n\ninterface PrevNextPostProps {\n    nowPostTitle: string;\n    seriesList: Array<PartialSeriesType>;\n    lang: string;\n}\n\nconst PrevNextPost = ({ nowPostTitle, seriesList, lang }: PrevNextPostProps) => {\n    const len = seriesList.length;\n\n    const nowPageIndex = useCallback(() => {\n        let len = seriesList.length;\n        for (let i = 0; i < len; i++) {\n            if (seriesList[i].title === nowPostTitle) return i;\n        }\n        return 0;\n    }, [nowPostTitle, seriesList, len]);\n    const index = nowPageIndex();\n\n    return (\n        <Wrapper>\n            <ItemWrapper>\n                <PrevNextPostItem seriesPost={index > 0 ? seriesList[index - 1] : null} right={false} lang={lang} />\n            </ItemWrapper>\n            <ItemWrapper>\n                <PrevNextPostItem seriesPost={index < len - 1 ? seriesList[index + 1] : null} right={true} lang={lang} />\n            </ItemWrapper>\n        </Wrapper>\n    );\n}\n\nexport default PrevNextPost;","import React, { memo } from 'react';\nimport Styled from 'styled-components';\nimport media from '../../lib/styles/media';\nimport palette from '../../lib/styles/palette';\n\nconst TagItemWrapper = Styled.div`\n    padding: 0.5rem 1rem;\n    background-color: ${palette.gray[1]};\n    color: ${palette.indigo[8]};\n    border-radius: 0.5rem;\n    margin-right: 1rem;\n    margin-bottom: 0.5rem;\n    // cursor: pointer;\n    &:hover {\n        // background-color: ${palette.gray[2]};\n    }\n    \n    ${media.custom(1056)} {\n        font-size: 0.8rem;\n    }\n`;\n\ninterface TagItemProps {\n    tag: string;\n    onClick: (tag: string) => void;\n}\n\nconst TagItem = memo(({ tag, onClick }: TagItemProps) => <TagItemWrapper onClick={() => onClick(tag)}>{tag}</TagItemWrapper>);\n\nconst TagListWrapper = Styled.div`\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    margin-bottom: 2rem;\n`;\n\ninterface TagListWrapper {\n    tags: Array<string>;\n    onClick: (tag: string) => void;\n}\n\nconst TagList = ({ tags, onClick }: TagListWrapper) => {\n    return (\n        <TagListWrapper>\n            {tags.map((tag, index) => {\n                return <TagItem tag={tag} key={index} onClick={onClick} />\n            })}\n        </TagListWrapper>\n    );\n};\n\nexport default memo(TagList);","import { Link } from \"gatsby\"\nimport React, { useCallback } from \"react\"\nimport Styled from \"styled-components\"\nimport { categoryMap } from \"../../lib/styles/category\"\nimport media from \"../../lib/styles/media\"\nimport palette from \"../../lib/styles/palette\"\nimport { formatDate } from \"../../lib/styles/utils\"\nimport Adsense from \"../common/Adsense\"\nimport PostSeriesList, { PartialSeriesType } from \"./PostSeriesList\"\nimport PrevNextPost from \"./PrevNextPost\"\nimport TagList from \"./TagList\"\n\ntype PostType = {\n    author: string\n    category: string\n    title: string\n    tags: Array<string>\n    released_at: string\n    updated_at: string\n    html: string\n}\nconst PostViewerWrapper = Styled.div`\n    width: 60%;\n    margin-left: 0;\n    max-width: 972px;\n\n    ${media.custom(1440)} {\n        width: 80%;\n    }\n    ${media.custom(1056)} {\n        width: 100%;\n    }\n\n    .category {\n        text-decoration: none;\n        font-size: 1.5rem;\n        color: gray;\n        margin-bottom: 0;\n        &:hover {\n            text-decoration: underline;\n        }\n\n        \n        ${media.custom(1056)} {\n            font-size: 1rem;\n        }\n    }\n\n    .title {\n        margin-top: 0.5rem;\n        font-size: 3rem;\n        ${media.custom(1056)} {\n            font-size: 2.2rem;\n        }\n    }\n\n    .date {\n        line-height: 0.8;\n        color: gray;\n        ${media.custom(1056)} {\n            font-size: 0.8rem;\n        }\n    }\n\n    .adsense-block {\n        width: 100%;\n    }\n`\n\nconst PostContentWrapper = Styled.div`\n    width: 100%;\n    margin: 0;\n    word-break: break-all;\n\n    a {\n        color: ${palette.indigo[6]};\n        text-decoration: none;\n        &:hover {\n            text-decoration: underline;\n        }\n    }\n\n    h1 {\n        margin-top: 3rem;\n        ${media.custom(767)} {\n            margin-top: 2rem;\n            font-size: 1.8rem;\n        }\n    }\n\n    h2 {\n        margin-top: 3rem;\n        ${media.custom(767)} {\n            margin-top: 2rem;\n        }\n    }\n\n    h3 {\n        margin-top: 2rem;\n        ${media.custom(767)} {\n            margin-top: 1rem;\n        }\n    }\n\n    p {\n        font-size: 1.1rem;\n        line-height: 1.8;\n        ${media.custom(767)} {\n            font-size: 0.9rem;\n            line-height: 1.7;\n        }\n    }\n\n    li {\n        font-size: 1.1rem;\n        line-height: 2;\n\n        ${media.custom(767)} {\n            font-size: 0.9rem;\n            line-height: 1.7;\n        }\n\n        h4, p {\n            margin: 0;\n            font-size: 1.1rem;\n            ${media.custom(767)} {\n                font-size: 0.9rem;\n                line-height: 1.7;\n            }\n        }\n    }\n\n    pre, code {\n        font-size: 1rem;\n        margin-bottom: 2rem;\n        ${media.custom(767)} {\n            font-size: 0.9rem;\n            margin-bottom: 1.5rem;\n        }\n    }\n\n    pre {\n        border-radius: 3px;\n    }\n\n    img {\n        width: 100%;\n    }\n\n    table {\n        white-space: normal;\n        max-width: 100%;\n        border-collapse: collapse;\n        text-align: left;\n        line-height: 1.5;\n        border-top: 1px solid #ccc;\n        border-bottom: 1px solid #ccc;\n        margin: 20px 0;\n    }\n    table thead th {\n        min-width: 60px;\n        max-width: 150px;\n        padding: 10px;\n        font-weight: bold;\n        vertical-align: top;\n        color: #fff;\n        background: ${palette.indigo[6]};\n        margin: 20px 10px;\n    }\n    table tbody th {\n        max-width: 150px;\n        padding: 10px;\n    }\n    table td {\n        max-width: 350px;\n        padding: 10px;\n        vertical-align: top;\n    }\n    table tr:nth-child(even) {\n        background: ${palette.indigo[0]};\n    }\n    th {\n        font-size: 0.9rem;\n        ${media.custom(767)} {\n            font-size: 0.8rem;\n        }\n    }\n    td {\n        font-size: 0.9rem;\n        ${media.custom(767)} {\n            font-size: 0.8rem;\n        }\n    }\n\n    hr {\n        margin-top: 3rem;\n        margin-bottom: 3rem;\n        ${media.custom(767)} {\n            margin-top: 2rem;\n            margin-bottom: 2rem;\n        }\n    }\n\n    blockquote {\n        background-color: ${palette.gray[0]};\n        width: 100%;\n        margin: 0;\n        padding-top: 0.5rem;\n        padding-bottom: 0.5rem;\n        border-left: 4px solid ${palette.indigo[5]};\n\n        p {\n            margin-left: 2rem;\n            margin-right: 2rem;\n        }\n    }\n`\n\ninterface PostViewerProps {\n    post: PostType\n    series: string\n    seriesList: Array<PartialSeriesType>\n    lang: string\n}\n\nconst PostViewer = ({ post, series, seriesList, lang }: PostViewerProps) => {\n    const { html, title, released_at, updated_at, category, tags } = post\n\n    const onClickTag = useCallback((tag: string) => {}, [tags])\n\n    return (\n        <PostViewerWrapper>\n            {category && (\n                <Link\n                    className=\"category\"\n                    to={\n                        lang === \"ko\"\n                            ? `/?category=${category}`\n                            : `/en?category=${category}`\n                    }\n                >\n                    {categoryMap[category] ? (\n                        <img src={categoryMap[category].src} />\n                    ) : (\n                        `[${category}]`\n                    )}\n                </Link>\n            )}\n            <h1 className=\"title\">{title}</h1>\n            <p className=\"date\">\n                {lang === \"ko\" ? \"게시: \" : \"\"}\n                {formatDate(released_at, lang)}\n            </p>\n            {updated_at && (\n                <p className=\"date\">\n                    {lang === \"ko\" ? \"수정: \" : \"Last edited at \"}\n                    {formatDate(updated_at, lang)}\n                </p>\n            )}\n            {tags && <TagList tags={tags} onClick={onClickTag} />}\n            {series !== \"none\" && (\n                <PostSeriesList\n                    series={series}\n                    seriesList={seriesList}\n                    nowPostTitle={title}\n                    lang={lang}\n                />\n            )}\n            <PostContentWrapper\n                id=\"content-container\"\n                dangerouslySetInnerHTML={{ __html: html }}\n            />\n            <PrevNextPost\n                nowPostTitle={title}\n                seriesList={seriesList}\n                lang={lang}\n            />\n        </PostViewerWrapper>\n    )\n}\n\nexport default PostViewer\n","import React, { createRef, useLayoutEffect } from \"react\"\nimport Styled from \"styled-components\"\nimport { mediaQuery } from \"../../lib/styles/media\"\n\nconst src = \"https://utteranc.es/client.js\"\n\nconst Wrapper = Styled.div`\n    width: 60%;\n    margin-left: auto;\n    margin-right: auto;\n\n    \n    ${mediaQuery(1056)} {\n        width: 100%;\n    }\n`\n\ninterface IUtterancesProps {}\n\nconst Utterances = React.memo(({}: IUtterancesProps) => {\n    const containerRef = createRef<HTMLDivElement>()\n\n    useLayoutEffect(() => {\n        const utterances = document.createElement(\"script\")\n\n        const attributes = {\n            src,\n            repo: \"millo-L/millo-L.github.io\",\n            \"issue-term\": \"pathname\",\n            label: \"comment\",\n            theme: \"github-light\",\n            crossOrigin: \"anonymous\",\n            async: \"true\",\n        }\n\n        Object.entries(attributes).forEach(([key, value]) => {\n            utterances.setAttribute(key, value)\n        })\n\n        containerRef.current.appendChild(utterances)\n    }, [])\n\n    return <Wrapper ref={containerRef} />\n})\n\nUtterances.displayName = \"Utterances\"\n\nexport default Utterances\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import { graphql } from \"gatsby\"\nimport React, { useCallback } from \"react\"\nimport Footer from \"../base/Footer\"\nimport Header from \"../base/Header\"\nimport SimpleProfile from \"../common/SimpleProfile\"\nimport MainPageRowTemplate from \"../main/MainPageRowTemplate\"\nimport MainResponsive from \"../main/MainResponsive\"\nimport PostTemplate from \"../post/PostTemplate\"\nimport PostToC from \"../post/PostToC\"\nimport PostViewer from \"../post/PostViewer\"\nimport SEO from \"../SEO\"\nimport Utterances from \"./Utterances\"\nimport \"../css/typography.css\"\nimport { createGlobalStyle } from \"styled-components\"\nimport { PartialSeriesType } from \"./PostSeriesList\"\nimport { filterByLanguage } from \"../../lib/list/reshape\"\n\ncreateGlobalStyle`\n    body {\n        font-family: \"ELAND\", serif;\n    }\n`\n\ninterface PostPageProps {\n    data: any\n}\n\nconst PostPage = ({ data }: PostPageProps) => {\n    const { markdownRemark, site, allMarkdownRemark } = data\n    if (!(markdownRemark && site && allMarkdownRemark)) return <div></div>\n\n    const reshapeSeries = useCallback(() => {\n        const { edges } = allMarkdownRemark\n        let seriesList: Array<PartialSeriesType> = []\n\n        edges.map(edge => {\n            const { node } = edge\n            let series: PartialSeriesType = {\n                title: node.frontmatter.title,\n                lang: node.frontmatter.lang,\n                slug: node.fields.slug,\n            }\n\n            seriesList.push(series)\n        })\n\n        return seriesList\n    }, [allMarkdownRemark])\n\n    return (\n        <PostTemplate>\n            <SEO\n                title={markdownRemark.frontmatter.title}\n                description={markdownRemark.frontmatter.description}\n                date={markdownRemark.frontmatter.released_at}\n                url={site.siteMetadata.siteUrl + markdownRemark.fields.slug}\n                image={\n                    markdownRemark.frontmatter.image.childImageSharp.fluid.src\n                }\n                lang={markdownRemark.frontmatter.lang}\n            />\n            <Header\n                lang={markdownRemark.frontmatter.lang}\n                ko_to={\n                    markdownRemark.frontmatter.lang === \"ko\"\n                        ? \"#\"\n                        : markdownRemark.frontmatter.translation\n                }\n                en_to={\n                    markdownRemark.frontmatter.lang === \"en\"\n                        ? \"#\"\n                        : markdownRemark.frontmatter.translation\n                }\n            />\n            <MainResponsive style={{ marginTop: \"2rem\" }}>\n                <MainPageRowTemplate style={{ marginBottom: \"2rem\" }}>\n                    <SimpleProfile\n                        style={{ marginTop: \"0.5rem\" }}\n                        type=\"body\"\n                        categoryVisible={true}\n                        lang={markdownRemark.frontmatter.lang}\n                    />\n                    <PostViewer\n                        post={{\n                            ...markdownRemark.frontmatter,\n                            html: markdownRemark.html,\n                        }}\n                        series={markdownRemark.frontmatter.series}\n                        seriesList={filterByLanguage(\n                            reshapeSeries(),\n                            markdownRemark.frontmatter.lang\n                        )}\n                        lang={markdownRemark.frontmatter.lang}\n                    />\n                    <PostToC tableOfContents={markdownRemark.tableOfContents} />\n                </MainPageRowTemplate>\n                {/*<PostComment\n          title={markdownRemark.frontmatter.title}\n          id={markdownRemark.id}\n          path={markdownRemark.frontmatter.path}\n        />*/}\n                <Utterances />\n                <Footer />\n            </MainResponsive>\n        </PostTemplate>\n    )\n}\n\nexport const pageQuery = graphql`\n    query($slug: String!, $series: String!) {\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            html\n            id\n            tableOfContents(absolute: false, maxDepth: 2, heading: null)\n            frontmatter {\n                author\n                description\n                category\n                released_at(formatString: \"YYYY-MM-DD\")\n                updated_at(formatString: \"YYYY-MM-DD\")\n                tags\n                title\n                lang\n                series\n                translation\n                image {\n                    childImageSharp {\n                        fluid {\n                            ...GatsbyImageSharpFluid\n                        }\n                    }\n                }\n            }\n            fields {\n                slug\n            }\n        }\n        site {\n            siteMetadata {\n                siteUrl\n            }\n        }\n        allMarkdownRemark(\n            filter: { frontmatter: { series: { eq: $series } } }\n            sort: { order: ASC, fields: frontmatter___released_at }\n        ) {\n            edges {\n                node {\n                    frontmatter {\n                        title\n                        lang\n                    }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport default PostPage\n"],"sourceRoot":""}