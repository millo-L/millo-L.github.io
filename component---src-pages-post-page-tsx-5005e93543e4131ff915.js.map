{"version":3,"sources":["webpack:///./src/components/post/PostTemplate.tsx","webpack:///./src/components/post/ScrollSpy.tsx","webpack:///./src/components/post/PostToC.tsx","webpack:///./src/components/post/TagList.tsx","webpack:///./src/components/post/PostViewer.tsx","webpack:///./src/pages/PostPage.tsx"],"names":["PostTemplateWrapper","Styled","div","PostTemplate","children","ScrollSpy","target","refs","sensitivity","this","targets","Array","from","querySelectorAll","window","addEventListener","onScroll","isOnTopOfDoc","deactiveateTarget","forEach","ref","t","findTarget","id","activate","document","documentElement","scrollTop","offsetTop","a","deactivate","filter","decodeURIComponent","attributes","value","replace","el","classList","add","remove","ToCWrapper","media","custom","palette","gray","indigo","PostToC","tableOfContents","useEffect","post","querySelector","headings","h","toc","console","log","dangerouslySetInnerHTML","__html","TagItemWrapper","TagItem","memo","tag","onClick","TagListWrapper","TagList","tags","map","index","key","PostViewerWrapper","PostContentWrapper","PostViewer","html","title","released_at","updated_at","category","onClickTag","useCallback","className","to","PostPage","markdownRemark","data","frontmatter","Header","MainResponsive","style","marginTop","MainPageRowTemplate"],"mappings":"wLAGMA,EAAsBC,IAAOC,IAAV,oFAAGD,CAAH,6BAiBVE,EARM,SAAC,GAAoC,IAAlCC,EAAkC,EAAlCA,SACpB,OACI,kBAACJ,EAAD,KACKI,I,wBCfQC,E,WAKjB,WAAYC,EAAqBC,EAAqBC,GAAsB,WACxEC,KAAKC,QAAUC,MAAMC,KAAKN,EAAOO,iBAAiB,MAClDJ,KAAKF,KAAOA,EACZE,KAAKD,YAAcA,IAAgB,GAEnCM,OAAOC,iBAAiB,UAAU,kBAAM,EAAKC,c,2BAGjDA,SAAA,WAAW,WACFP,KAAKQ,aAAaR,KAAKF,KAAK,KAC7BE,KAAKS,oBAGTT,KAAKF,KAAKY,SAAQ,SAAAC,GACd,GAAI,EAAKH,aAAaG,GAAM,CACxB,EAAKF,oBACL,IAAMG,EAAI,EAAKC,WAAWF,EAAIG,IAC1BF,GACA,EAAKG,SAASH,Q,EAM9BJ,aAAA,SAAaG,GACT,OACIK,SAASC,gBAAgBC,UAAYP,EAAIQ,WAAanB,KAAKD,a,EAInEU,kBAAA,WAAoB,WAChBT,KAAKC,QAAQS,SAAQ,SAAAU,GAAC,OAAI,EAAKC,WAAWD,O,EAG9CP,WAAA,SAAWC,GACP,OAAOd,KAAKC,QAAQqB,QAChB,SAAAF,GAAC,OACGG,mBAAmBH,EAAEI,WAAF,KAAqBC,MAAMC,QAAQ,KAAM,OAASZ,KAC3E,I,EAGNC,SAAA,SAASY,GACLA,EAAGC,UAAUC,IAAI,W,EAGrBR,WAAA,SAAWM,GACPA,EAAGC,UAAUE,OAAO,W,KC7CtBC,EAAavC,IAAOC,IAAV,0EAAGD,CAAH,iXAYVwC,IAAMC,OAAO,MAeFC,IAAQC,KAAK,GAITD,IAAQE,OAAO,GAGfF,IAAQE,OAAO,IAkCrBC,EApBC,SAAC,GAAsC,IAApCC,EAAoC,EAApCA,gBAYf,OAXAC,qBAAU,WACN,IAAMC,EAAOxB,SAASyB,cAAc,sBAC9BC,EAAWxC,MAAMC,KACnBqC,EAAKpC,iBAAiB,aACxBkB,QAAO,SAACqB,GAAD,OAAYA,EAAE7B,MACjB8B,EAAM5B,SAASyB,cAAc,kBACnCI,QAAQC,IAAIJ,GACZG,QAAQC,IAAIF,GACZ,IAAIhD,EAAUgD,EAAoBF,KACnC,IAGC,kBAACX,EAAD,CACIjB,GAAG,gBACHiC,wBAAyB,CAAEC,OAAQV,M,YCjEzCW,EAAiBzD,IAAOC,IAAV,8EAAGD,CAAH,4IAEI0C,IAAQC,KAAK,GACxBD,IAAQE,OAAO,GAKAF,IAAQC,KAAK,IASnCe,EAAUC,gBAAK,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,QAAR,OAAoC,kBAACJ,EAAD,CAAgBI,QAAS,kBAAMA,EAAQD,KAAOA,MAEjGE,EAAiB9D,IAAOC,IAAV,8EAAGD,CAAH,gEAYd+D,EAAU,SAAC,GAAsC,IAApCC,EAAoC,EAApCA,KAAMH,EAA8B,EAA9BA,QACrB,OACI,kBAACC,EAAD,KACKE,EAAKC,KAAI,SAACL,EAAKM,GACZ,OAAO,kBAACR,EAAD,CAASE,IAAKA,EAAKO,IAAKD,EAAOL,QAASA,SAMhDF,iBAAKI,GC9BdK,EAAoBpE,IAAOC,IAAV,oFAAGD,CAAH,iPAIjBwC,IAAMC,OAAO,MAGbD,IAAMC,OAAO,OAyBb4B,EAAqBrE,IAAOC,IAAV,qFAAGD,CAAH,0BA6BTsE,EAnBI,SAAC,GAA8B,IAA5BtB,EAA4B,EAA5BA,KACVuB,EAAyDvB,EAAzDuB,KAAMC,EAAmDxB,EAAnDwB,MAAOC,EAA4CzB,EAA5CyB,YAAaC,EAA+B1B,EAA/B0B,WAAYC,EAAmB3B,EAAnB2B,SAAUX,EAAShB,EAATgB,KAElDY,EAAaC,uBAAY,SAACjB,MAE7B,CAACI,IAEJ,OACI,kBAACI,EAAD,KACKO,GAAY,kBAAC,IAAD,CAAMG,UAAU,WAAWC,GAAE,oBAAsBJ,GAAnD,IAAiEA,EAAjE,KACb,wBAAIG,UAAU,SAASN,GACvB,uBAAGM,UAAU,QAAb,OAA0BL,GACzBC,GAAc,uBAAGI,UAAU,QAAb,OAA0BJ,GACxCV,GAAQ,kBAAC,EAAD,CAASA,KAAMA,EAAMH,QAASe,IACvC,kBAACP,EAAD,CAAoB/C,GAAG,oBAAoBiC,wBAAyB,CAAEC,OAAQe,OCnB3ES,UAtCE,SAAC,GAA4B,IACpCC,EADoC,EAA1BC,KACVD,eACAE,EAAuCF,EAAvCE,YAAaZ,EAA0BU,EAA1BV,KAAMzB,EAAoBmC,EAApBnC,gBAE3B,GAAKqC,EAEL,OACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAgBC,MAAO,CAAEC,UAAW,SAClC,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAmBF,MAAO,CAAEC,UAAW,YACvC,kBAAC,EAAD,CAAYvC,KAAI,iBAAOmC,EAAP,CAAoBZ,WACpC,kBAAC,EAAD,CAASzB,gBAAiBA","file":"component---src-pages-post-page-tsx-5005e93543e4131ff915.js","sourcesContent":["import React from 'react';\r\nimport Styled from 'styled-components';\r\n\r\nconst PostTemplateWrapper = Styled.div`\r\n    background-color: white;\r\n`;\r\n\r\ninterface PostTemplateProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\n\r\nconst PostTemplate = ({ children }: PostTemplateProps) => {\r\n    return (\r\n        <PostTemplateWrapper>\r\n            {children}\r\n        </PostTemplateWrapper>\r\n    );\r\n}\r\n\r\nexport default PostTemplate;","export default class ScrollSpy {\r\n    public targets: HTMLElement[]\r\n    public refs: HTMLElement[]\r\n    public sensitivity: number\r\n\r\n    constructor(target: HTMLElement, refs: HTMLElement[], sensitivity?: number) {\r\n        this.targets = Array.from(target.querySelectorAll(\"a\"))\r\n        this.refs = refs\r\n        this.sensitivity = sensitivity || -10\r\n\r\n        window.addEventListener(\"scroll\", () => this.onScroll())\r\n    }\r\n\r\n    onScroll() {\r\n        if (!this.isOnTopOfDoc(this.refs[0])) {\r\n            this.deactiveateTarget()\r\n        }\r\n\r\n        this.refs.forEach(ref => {\r\n            if (this.isOnTopOfDoc(ref)) {\r\n                this.deactiveateTarget()\r\n                const t = this.findTarget(ref.id)\r\n                if (t) {\r\n                    this.activate(t)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    isOnTopOfDoc(ref: HTMLElement): boolean {\r\n        return (\r\n            document.documentElement.scrollTop - ref.offsetTop >= this.sensitivity\r\n        )\r\n    }\r\n\r\n    deactiveateTarget() {\r\n        this.targets.forEach(a => this.deactivate(a))\r\n    }\r\n\r\n    findTarget(id: string): HTMLElement | undefined {\r\n        return this.targets.filter(\r\n            a =>\r\n                decodeURIComponent(a.attributes[\"href\"].value.replace(/^#/, \"\")) === id\r\n        )[0]\r\n    }\r\n\r\n    activate(el: HTMLElement) {\r\n        el.classList.add(\"active\")\r\n    }\r\n\r\n    deactivate(el: HTMLElement) {\r\n        el.classList.remove(\"active\")\r\n    }\r\n}","import React, { useEffect } from \"react\"\r\nimport Styled from 'styled-components';\r\nimport media from \"../../lib/styles/media\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport ScrollSpy from \"./ScrollSpy\"\r\n\r\nconst ToCWrapper = Styled.div`\r\n    transition: 0.125s all ease-in;\r\n\r\n    padding: 0.5rem;\r\n    padding-right: 1rem;\r\n    order: 1;\r\n    top: 10rem;\r\n    margin-left: 4rem;\r\n    position: sticky;\r\n    height: 10rem;\r\n    overflow-y: auto;\r\n\r\n    ${media.custom(1440)} {\r\n        display: none;\r\n    }\r\n    ul {\r\n        list-style: none;\r\n        margin: 0;\r\n        li {\r\n            margin-bottom: 4px;\r\n            p {\r\n                margin: 0;\r\n            }\r\n        }\r\n    }\r\n    a {\r\n        text-decoration: none;\r\n        color: ${palette.gray[4]};\r\n        font-size: 1rem;\r\n        &:hover,\r\n        &:focus {\r\n            color: ${palette.indigo[4]};\r\n        }\r\n        &.active {\r\n            color: ${palette.indigo[9]};\r\n            transform: scale(1.1);\r\n        }\r\n    }\r\n    & + & {\r\n        margin-top: 4px;\r\n    }\r\n\r\n`;\r\n\r\ninterface PostToCProps {\r\n    tableOfContents: string\r\n}\r\n\r\nconst PostToC = ({ tableOfContents }: PostToCProps) => {\r\n    useEffect(() => {\r\n        const post = document.querySelector(\"#content-container\")\r\n        const headings = Array.from(\r\n            post.querySelectorAll(\"h1,h2,h3\")\r\n        ).filter((h: any) => h.id)\r\n        const toc = document.querySelector(\"#toc-container\")\r\n        console.log(headings);\r\n        console.log(toc);\r\n        new ScrollSpy(toc as HTMLElement, headings as HTMLElement[]);\r\n    }, [])\r\n\r\n    return (\r\n        <ToCWrapper\r\n            id=\"toc-container\"\r\n            dangerouslySetInnerHTML={{ __html: tableOfContents }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PostToC;","import React, { memo } from 'react';\r\nimport Styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagItemWrapper = Styled.div`\r\n    padding: 0.5rem 1rem;\r\n    background-color: ${palette.gray[1]};\r\n    color: ${palette.indigo[8]};\r\n    border-radius: 0.5rem;\r\n    margin-right: 1rem;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: ${palette.gray[2]};\r\n    }\r\n`;\r\n\r\ninterface TagItemProps {\r\n    tag: string;\r\n    onClick: (tag: string) => void;\r\n}\r\n\r\nconst TagItem = memo(({ tag, onClick }: TagItemProps) => <TagItemWrapper onClick={() => onClick(tag)}>{tag}</TagItemWrapper>);\r\n\r\nconst TagListWrapper = Styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 4rem;\r\n`;\r\n\r\ninterface TagListWrapper {\r\n    tags: Array<string>;\r\n    onClick: (tag: string) => void;\r\n}\r\n\r\nconst TagList = ({ tags, onClick }: TagListWrapper) => {\r\n    return (\r\n        <TagListWrapper>\r\n            {tags.map((tag, index) => {\r\n                return <TagItem tag={tag} key={index} onClick={onClick} />\r\n            })}\r\n        </TagListWrapper>\r\n    );\r\n};\r\n\r\nexport default memo(TagList);","import { Link } from 'gatsby';\r\nimport React, { useCallback } from 'react';\r\nimport Styled from 'styled-components';\r\nimport media from '../../lib/styles/media';\r\nimport TagList from './TagList';\r\n\r\ntype PostType = {\r\n    author: string;\r\n    category: string;\r\n    title: string;\r\n    tags: Array<string>;\r\n    released_at: string;\r\n    updated_at: string;\r\n    html: string;\r\n}\r\nconst PostViewerWrapper = Styled.div`\r\n    width: 60%;\r\n    margin-left: 0;\r\n\r\n    ${media.custom(1440)} {\r\n        width: 80%;\r\n    }\r\n    ${media.custom(1056)} {\r\n        width: 100%;\r\n    }\r\n\r\n    .category {\r\n        text-decoration: none;\r\n        font-size: 1.5rem;\r\n        color: gray;\r\n        margin-bottom: 0;\r\n        &:hover {\r\n            text-decoration: underline;\r\n        }\r\n    }\r\n\r\n    .title {\r\n        margin-top: 0;\r\n        font-size: 3rem;\r\n    }\r\n\r\n    .date {\r\n        line-height: 0.8;\r\n        color: gray;\r\n    }\r\n`;\r\n\r\nconst PostContentWrapper = Styled.div`\r\n    width: 100%;\r\n    margin: 0;\r\n`;\r\n\r\ninterface PostViewerProps {\r\n    post: PostType;\r\n}\r\n\r\n\r\nconst PostViewer = ({ post }: PostViewerProps) => {\r\n    const { html, title, released_at, updated_at, category, tags } = post;\r\n\r\n    const onClickTag = useCallback((tag: string) => {\r\n\r\n    }, [tags]);\r\n\r\n    return (\r\n        <PostViewerWrapper>\r\n            {category && <Link className=\"category\" to={`/search?category=${category}`}>[{category}]</Link>}\r\n            <h1 className=\"title\">{title}</h1>\r\n            <p className=\"date\" >게시: {released_at}</p>\r\n            {updated_at && <p className=\"date\" >수정: {updated_at}</p>}\r\n            {tags && <TagList tags={tags} onClick={onClickTag} />}\r\n            <PostContentWrapper id=\"content-container\" dangerouslySetInnerHTML={{ __html: html }} />\r\n        </PostViewerWrapper>\r\n    );\r\n}\r\n\r\nexport default PostViewer;","import { graphql, useStaticQuery } from 'gatsby';\r\nimport React from 'react';\r\nimport Header from '../components/base/Header';\r\nimport { SimpleBodyProfile } from '../components/common/SimpleProfile';\r\nimport MainPageRowTemplate from '../components/main/MainPageRowTemplate';\r\nimport MainResponsive from '../components/main/MainResponsive';\r\nimport PostTemplate from '../components/post/PostTemplate';\r\nimport PostToC from '../components/post/PostToC';\r\nimport PostViewer from '../components/post/PostViewer';\r\n\r\ninterface PostPageProps {\r\n  data: any;\r\n}\r\n\r\nconst PostPage = ({ data }: PostPageProps) => {\r\n  const { markdownRemark } = data\r\n  const { frontmatter, html, tableOfContents } = markdownRemark;\r\n\r\n  if (!frontmatter) return;\r\n\r\n  return (\r\n    <PostTemplate>\r\n      <Header />\r\n      <MainResponsive style={{ marginTop: \"2rem\" }} >\r\n        <MainPageRowTemplate>\r\n          <SimpleBodyProfile style={{ marginTop: \"0.5rem\" }} />\r\n          <PostViewer post={{ ...frontmatter, html }} />\r\n          <PostToC tableOfContents={tableOfContents} />\r\n        </MainPageRowTemplate>\r\n      </MainResponsive>\r\n    </PostTemplate>\r\n  );\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($path: String!) {\r\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\r\n      html\r\n      tableOfContents(absolute: false, maxDepth: 6, heading: null)\r\n      frontmatter {\r\n        path\r\n        author\r\n        category\r\n        released_at(formatString: \"YYYY년 MM월 DD일\")\r\n        updated_at(formatString: \"YYYY년 MM월 DD일\")\r\n        tags\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostPage;"],"sourceRoot":""}