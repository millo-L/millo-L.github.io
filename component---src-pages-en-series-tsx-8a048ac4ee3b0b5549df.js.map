{"version":3,"sources":["webpack:///./src/pages/en/series.tsx","webpack:///./src/lib/list/reshape.ts","webpack:///./src/components/common/RatioImage.tsx","webpack:///./src/components/series/SeriesCard.tsx","webpack:///./src/components/series/SeriesCardGrid.tsx","webpack:///./src/components/series/SeriesListPage.tsx"],"names":["createGlobalStyle","HomePage","location","useLocation","search","queryString","parse","useState","page","setPage","categoryVisible","setCategoryVisible","useCallback","index","title","lang","ko_to","en_to","setUser","type","reshapePost","allMarkdownRemark","posts","edges","map","edge","obj","node","frontmatter","post","path","fields","slug","description","released_at","updated_at","image","childImageSharp","fluid","category","push","filterByCategory","filter","filterByLanguage","list","item","reshapeSeries","seriesList","group","len","length","i","nodes","series","fieldValue","replace","totalCount","RatioImageBlock","Styled","div","mediaQuery","RatioImage","widthRatio","heightRatio","style","className","memo","Wrapper","StyledLink","Link","Content","ellipsis","palette","gray","props","clamp","css","SeriesCard","to","maxHeight","formatDate","SeriesCardGrid","key","SeriesListPage","useStaticQuery"],"mappings":"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","file":"component---src-pages-en-series-tsx-8a048ac4ee3b0b5549df.js","sourcesContent":["import React, { useCallback, useState } from \"react\"\nimport { createGlobalStyle } from \"styled-components\"\nimport FloatingHeader from \"../../components/base/FloatingHeader\"\nimport Header from \"../../components/base/Header\"\nimport SimpleProfile from \"../../components/common/SimpleProfile\"\nimport HomeLayout from \"../../components/home/HomeLayout\"\nimport HomeTab from \"../../components/home/HomeTab\"\nimport MainPageRowTemplate from \"../../components/main/MainPageRowTemplate\"\nimport MainResponsive from \"../../components/main/MainResponsive\"\nimport MainTemplate from \"../../components/main/MainTemplate\"\nimport SeriesListPage from \"../../components/series/SeriesListPage\"\nimport queryString from \"query-string\"\nimport { useLocation } from \"@reach/router\"\nimport SEO from \"../../components/SEO\"\nimport \"../../components/css/typography.css\"\n\ncreateGlobalStyle`\n    body {\n        font-family: \"ELAND\", serif;\n    }\n`\n\nconst HomePage = () => {\n    const location = useLocation()\n    const series = location.search && queryString.parse(location.search)\n\n    const [page, setPage] = useState<number>(1)\n    const [categoryVisible, setCategoryVisible] = useState<boolean>(true)\n    const onClick = useCallback((index: number) => {\n        setPage(index)\n        if (index > 0) setCategoryVisible(false)\n        else setCategoryVisible(true)\n    }, [])\n\n    return (\n        <MainTemplate>\n            <SEO title=\"Series\" lang=\"en\" />\n            <Header lang=\"en\" ko_to=\"/series\" en_to=\"#\" />\n            <FloatingHeader page={page} lang=\"en\" />\n            <MainResponsive>\n                <HomeTab page={page} setUser={false} lang=\"en\" />\n                <MainPageRowTemplate>\n                    <SimpleProfile\n                        type=\"body\"\n                        categoryVisible={categoryVisible}\n                        lang=\"en\"\n                    />\n                    <HomeLayout>\n                        <SeriesListPage lang=\"en\" />\n                    </HomeLayout>\n                </MainPageRowTemplate>\n            </MainResponsive>\n        </MainTemplate>\n    )\n}\n\nexport default HomePage\n","import { PartialPostType } from \"../../components/post/PostCard\"\nimport { SeriesType } from \"../../components/series/SeriesCard\"\n\nexport const reshapePost = (allMarkdownRemark: any) => {\n    let posts: Array<PartialPostType> = []\n    const { edges } = allMarkdownRemark\n\n    edges.map(edge => {\n        const obj = edge.node.frontmatter\n        let post: PartialPostType = {\n            path: edge.node.fields.slug,\n            title: obj.title,\n            description: obj.description,\n            released_at: obj.released_at,\n            updated_at: obj.updated_at,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            lang: obj.lang,\n            category: obj.category,\n        }\n\n        posts.push(post)\n    })\n\n    return posts\n}\n\nexport const filterByCategory = (\n    posts: Array<PartialPostType>,\n    category: string\n) => {\n    return posts.filter(post => post.category === category)\n}\n\nexport function filterByLanguage<T>(list: T[], lang: string) {\n    return list.filter(item => (item as any).lang === lang)\n}\n\nexport const reshapeSeries = (allMarkdownRemark: any) => {\n    let seriesList: Array<SeriesType> = []\n    const { group } = allMarkdownRemark\n    let len = group.length\n\n    for (let i = 0; i < len; i++) {\n        const obj = group[i].nodes[0].frontmatter\n        let series: SeriesType = {\n            path: `/series/${group[i].fieldValue.replace(/ /gi, \"-\")}`,\n            title: group[i].fieldValue,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            updated_at: obj.released_at,\n            totalCount: group[i].totalCount,\n            lang: obj.lang,\n        }\n        seriesList.push(series)\n    }\n\n    return seriesList\n}\n","import React, { memo } from 'react';\nimport Styled from 'styled-components';\nimport Img, { FluidObject } from 'gatsby-image';\nimport { mediaQuery } from '../../lib/styles/media';\n\nconst RatioImageBlock = Styled.div`\n    width: 100%;\n    max-height: 12.5rem;\n    display: flex;\n    align-items: center;\n\n    z-index: 1;\n\n    ${mediaQuery(767)} {\n        max-height: 100%;\n    }\n\n    .ratio-img {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        max-height: 100%;\n        display: block;\n        object-fit: cover;\n    }\n`;\n\nexport interface RatioImageProps {\n    widthRatio: number;\n    heightRatio: number;\n    fluid: FluidObject | FluidObject[];\n    style?: React.CSSProperties;\n}\n\nconst RatioImage = ({\n    widthRatio,\n    heightRatio,\n    fluid,\n    style\n}: RatioImageProps) => {\n    const paddingTop = `${(heightRatio / widthRatio) * 100}%`;\n\n    return (\n        <RatioImageBlock style={style}>\n            <Img className=\"ratio-img\" fluid={fluid} />\n        </RatioImageBlock>\n    );\n};\n\nexport default memo(RatioImage);\n","import React, { memo } from \"react\"\nimport { Link } from \"gatsby\"\nimport Styled, { css } from \"styled-components\"\nimport { mediaQuery } from \"../../lib/styles/media\"\nimport palette from \"../../lib/styles/palette\"\nimport { ellipsis, formatDate } from \"../../lib/styles/utils\"\nimport RatioImage from \"../common/RatioImage\"\nimport { FluidObject } from 'gatsby-image';\n\nconst Wrapper = Styled.div`\n    width: 42rem;\n    background: white;\n    border-radius: 4px;\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\n    margin: 1rem;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    ${mediaQuery(1919)} {\n        width: calc(50% - 2rem);\n    }\n    ${mediaQuery(767)} {\n        margin: 0;\n        width: 100%;\n        & + & {\n            margin-top: 1rem;\n        }\n    }\n    &:hover {\n        transform: translateY(-8px);\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\n        ${mediaQuery(1024)} {\n            transform: none;\n        }\n    }\n\n`\n\nconst StyledLink = Styled(Link)`\n    display: block;\n    color: inherit;\n    text-decoration: none;\n`\n\nconst Content = Styled.div<{ clamp: boolean }>`\n    padding: 1rem;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    background-color: white;\n    z-index: 3;\n    h4 {\n        font-size: 1rem;\n        margin: 0;\n        margin-bottom: 0.25rem;\n        line-height: 1.5;\n        word-break: break-word;\n        ${ellipsis}\n        color: ${palette.gray[9]};\n        ${mediaQuery(767)} {\n            white-space: initial;\n        }\n    }\n    .description-wrapper {\n        flex: 1;\n    }\n    p {\n        margin: 0;\n        word-break: break-word;\n        overflow-wrap: break-word;\n        font-size: 0.875rem;\n        line-height: 1.5;\n        ${props =>\n        props.clamp &&\n        css`\n                height: 3.9375rem;\n                display: -webkit-box;\n                -webkit-line-clamp: 3;\n                -webkit-box-orient: vertical;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            `}\n        /* ${props =>\n        !props.clamp &&\n        css`\n                height: 15.875rem;\n            `} */\n\n        color: ${palette.gray[7]};\n        margin-bottom: 1.5rem;\n    }\n    .sub-info {\n        font-size: 0.75rem;\n        line-height: 1.5;\n        color: ${palette.gray[6]};\n        .separator {\n            margin-left: 0.25rem;\n            margin-right: 0.25rem;\n        }\n    }\n\n`\n\nexport type SeriesType = {\n    path: string\n    title: string\n    image: FluidObject | FluidObject[]\n    updated_at: string\n    totalCount: number\n    lang: string\n}\n\ninterface SeriesCardProps {\n    series: SeriesType\n}\n\nconst SeriesCard = ({ series }: SeriesCardProps) => {\n    return (\n        <Wrapper>\n            {series.image && (\n                <StyledLink to={`${series.path}`}>\n                    <RatioImage\n                        widthRatio={2}\n                        heightRatio={1}\n                        fluid={series.image}\n                        style={{ maxHeight: '16rem' }}\n                    />\n                </StyledLink>\n            )}\n            <Content clamp={!series.image}>\n                <StyledLink to={`${series.path}`}>\n                    <h4>{series.title}</h4>\n                </StyledLink>\n                <StyledLink to={`${series.path}`}>\n                    <div className=\"sub-info\">\n                        <span>{series.totalCount}{series.lang === 'ko' ? '개의 포스트' : ' posts'}</span>\n                        <span className=\"separator\">·</span>\n                        <span>{series.lang === 'ko' ? '마지막 업데이트' : 'Last edited at'} {formatDate(series.updated_at, series.lang)}</span>\n                    </div>\n                </StyledLink>\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default memo(SeriesCard)\n","import React, { memo } from \"react\"\nimport Styled from \"styled-components\"\nimport { mediaQuery } from \"../../lib/styles/media\"\nimport Adsense from \"../common/Adsense\"\nimport SeriesCard, { SeriesType } from \"./SeriesCard\"\n\nconst Wrapper = Styled.div`\n    display: flex;\n    margin: -1rem;\n    flex-wrap: wrap;\n    ${mediaQuery(767)} {\n        margin: 0;\n    }\n\n    .adsense-block {\n        width: 100%;\n    }\n`\n\ninterface SeriseCardGridProps {\n    seriesList: Array<SeriesType>\n}\n\nconst SeriesCardGrid = ({ seriesList }: SeriseCardGridProps) => {\n    return (\n        <Wrapper>\n            {seriesList.map((series, index) => (\n                <SeriesCard series={series} key={index} />\n            ))}\n        </Wrapper>\n    )\n}\n\nexport default memo(SeriesCardGrid)\n","import { graphql, useStaticQuery } from 'gatsby';\nimport React, { memo } from 'react';\nimport { filterByLanguage, reshapeSeries } from '../../lib/list/reshape';\nimport SeriesCardGrid from './SeriesCardGrid';\n\ninterface SeriesListPageProps {\n    lang: string;\n}\n\nconst SeriesListPage = ({ lang }: SeriesListPageProps) => {\n    const data = useStaticQuery(graphql`\n        {\n            allMarkdownRemark(sort: {order: DESC, fields: frontmatter___released_at}, filter: {frontmatter: {series: {ne: \"none\"}}}) {\n                group(field: frontmatter___series, limit: 1) {\n                    fieldValue\n                    totalCount\n                    nodes {\n                        frontmatter {\n                            image {\n                                childImageSharp {\n                                    fluid {\n                                        ...GatsbyImageSharpFluid\n                                    }\n                                }\n                            }\n                            released_at\n                            lang\n                        }\n                    }\n                }\n            }\n        }\n    `);\n\n    const { allMarkdownRemark } = data;\n    if (!allMarkdownRemark) return <div></div>;\n\n    return <SeriesCardGrid seriesList={filterByLanguage(reshapeSeries(allMarkdownRemark), lang)} />;\n}\n\nexport default memo(SeriesListPage);"],"sourceRoot":""}