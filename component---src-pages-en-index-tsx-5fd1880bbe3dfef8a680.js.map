{"version":3,"sources":["webpack:///./src/components/post/PostCard.tsx","webpack:///./src/components/post/PostCardGrid.tsx","webpack:///./src/components/post/PostListPage.tsx","webpack:///./src/lib/list/reshape.ts","webpack:///./src/components/common/RatioImage.tsx","webpack:///./src/pages/en/index.tsx","webpack:///./src/components/series/SeriesCard.tsx","webpack:///./src/components/series/SeriesCardGrid.tsx","webpack:///./src/components/series/SeriesListPage.tsx"],"names":["Wrapper","Styled","div","mediaQuery","StyledLink","Link","Content","ellipsis","palette","gray","props","clamp","css","PostCard","post","image","to","path","RatioImage","widthRatio","heightRatio","fluid","title","className","description","replace","length","formatDate","released_at","lang","updated_at","memo","PostCardGrid","posts","Adsense","style","display","adClient","adSlot","adFormat","adLayout","map","index","key","PostsPage","location","useLocation","query","search","queryString","parse","data","useStaticQuery","allMarkdownRemark","category","filterByCategory","filterByLanguage","reshapePost","edges","edge","obj","node","frontmatter","fields","slug","childImageSharp","push","filter","list","item","reshapeSeries","seriesList","group","len","i","nodes","series","fieldValue","totalCount","RatioImageBlock","createGlobalStyle","HomePage","useState","page","setPage","categoryVisible","setCategoryVisible","useCallback","ko_to","en_to","setUser","type","indexPage","SeriesCard","maxHeight","SeriesCardGrid","fullWidthResponsive","SeriesListPage"],"mappings":"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","file":"component---src-pages-en-index-tsx-5fd1880bbe3dfef8a680.js","sourcesContent":["import React, { memo } from \"react\"\nimport { Link } from \"gatsby\"\nimport Styled, { css } from \"styled-components\"\nimport { mediaQuery } from \"../../lib/styles/media\"\nimport palette from \"../../lib/styles/palette\"\nimport { ellipsis, formatDate } from \"../../lib/styles/utils\"\nimport RatioImage from \"../common/RatioImage\"\nimport { FluidObject } from \"gatsby-image\"\n\nconst Wrapper = Styled.div`\n    width: 20rem;\n    background: white;\n    border-radius: 4px;\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\n    margin: 1rem;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    ${mediaQuery(1919)} {\n        width: calc(33% - 1.8125rem);\n    }\n    ${mediaQuery(1440)} {\n        width: calc(33% - 1.9rem);\n    }\n    ${mediaQuery(1056)} {\n        width: calc(50% - 2rem);\n    }\n    ${mediaQuery(767)} {\n        margin: 0;\n        width: 100%;\n        & + & {\n            margin-top: 1rem;\n        }\n    }\n    &:hover {\n        transform: translateY(-8px);\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\n        ${mediaQuery(1024)} {\n            transform: none;\n        }\n    }\n\n`\n\nconst StyledLink = Styled(Link)`\n    display: block;\n    color: inherit;\n    text-decoration: none;\n`\n\nconst Content = Styled.div<{ clamp: boolean }>`\n    padding: 1rem;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    background-color: white;\n    z-index: 3;\n    h4 {\n        font-size: 1rem;\n        margin: 0;\n        margin-bottom: 0.25rem;\n        line-height: 1.5;\n        word-break: break-word;\n        ${ellipsis}\n        color: ${palette.gray[9]};\n        ${mediaQuery(767)} {\n            white-space: initial;\n        }\n    }\n    .description-wrapper {\n        flex: 1;\n    }\n    p {\n        margin: 0;\n        word-break: break-word;\n        overflow-wrap: break-word;\n        font-size: 0.875rem;\n        line-height: 1.5;\n        ${props =>\n            props.clamp &&\n            css`\n                height: 3.9375rem;\n                display: -webkit-box;\n                -webkit-line-clamp: 3;\n                -webkit-box-orient: vertical;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            `}\n        /* ${props =>\n            !props.clamp &&\n            css`\n                height: 15.875rem;\n            `} */\n\n        color: ${palette.gray[7]};\n        margin-bottom: 1.5rem;\n    }\n    .sub-info {\n        font-size: 0.75rem;\n        line-height: 1.5;\n        color: ${palette.gray[6]};\n    }\n\n`\n\nexport type PartialPostType = {\n    path: string\n    title: string\n    description: string\n    image: FluidObject | FluidObject[]\n    released_at: string\n    updated_at: string\n    lang: \"ko\" | \"en\"\n    category: string\n}\n\ninterface PostCardProps {\n    post: PartialPostType\n}\n\nconst PostCard = ({ post }: PostCardProps) => {\n    return (\n        <Wrapper>\n            {post.image && (\n                <StyledLink to={`${post.path}`}>\n                    <RatioImage\n                        widthRatio={2}\n                        heightRatio={1}\n                        fluid={post.image}\n                    />\n                </StyledLink>\n            )}\n            <Content clamp={!post.image}>\n                <StyledLink to={`${post.path}`}>\n                    <h4>{post.title}</h4>\n                    <div className=\"description-wrapper\">\n                        <p>\n                            {post.description.replace(/&#x3A;/g, \":\")}\n                            {post.description.length === 150 && \"...\"}\n                        </p>\n                    </div>\n                </StyledLink>\n                <StyledLink to={`${post.path}`}>\n                    <div className=\"sub-info\">\n                        <span>{formatDate(post.released_at, post.lang)}</span>\n                        {post.updated_at && (\n                            <>\n                                <br />\n                                <span>\n                                    {post.lang === \"ko\"\n                                        ? \"수정: \"\n                                        : \"Last edited at\"}{\" \"}\n                                    {formatDate(post.updated_at, post.lang)}\n                                </span>\n                            </>\n                        )}\n                    </div>\n                </StyledLink>\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default memo(PostCard)\n","import React, { memo } from \"react\"\nimport Styled from \"styled-components\"\nimport { mediaQuery } from \"../../lib/styles/media\"\nimport Adsense from \"../common/Adsense\"\nimport PostCard, { PartialPostType } from \"./PostCard\"\n\nconst Wrapper = Styled.div`\n    display: flex;\n    margin: -1rem;\n    flex-wrap: wrap;\n    ${mediaQuery(767)} {\n        margin: 0;\n    }\n\n    .adsense-block {\n        width: 100%;\n    }\n`\n\ninterface PostCardGridProps {\n    posts: Array<PartialPostType>\n}\n\nconst PostCardGrid = ({ posts }: PostCardGridProps) => {\n    return (\n        <Wrapper>\n            {/*<div className=\"adsense-block\">\n                <Adsense\n                    style={{ display: \"block\" }}\n                    adClient=\"ca-pub-3926462216067158\"\n                    adSlot=\"5178668661\"\n                    adFormat=\"auto\"\n                    fullWidthResponsive=\"true\"\n                />\n            </div>*/}\n            <Adsense\n                style={{ display: \"block\" }}\n                adClient=\"ca-pub-3926462216067158\"\n                adSlot=\"2707777362\"\n                adFormat=\"fluid\"\n                adLayout=\"7b+db+1c+f+3o\"\n            />\n            {posts.map((post, index) => (\n                <PostCard post={post} key={index} />\n            ))}\n        </Wrapper>\n    )\n}\n\nexport default memo(PostCardGrid)\n","import { graphql, useStaticQuery } from \"gatsby\"\nimport React, { memo } from \"react\"\nimport {\n    filterByCategory,\n    filterByLanguage,\n    reshapePost,\n} from \"../../lib/list/reshape\"\nimport PostCardGrid from \"./PostCardGrid\"\nimport queryString from \"query-string\"\nimport { useLocation } from \"@reach/router\"\n\ninterface PostsPageProps {\n    lang: string\n}\n\nconst PostsPage = ({ lang }: PostsPageProps) => {\n    const location = useLocation()\n    const query = location.search && queryString.parse(location.search)\n    const data = useStaticQuery(graphql`\n        {\n            allMarkdownRemark(\n                sort: { fields: frontmatter___released_at, order: DESC }\n                filter: { frontmatter: { is_private: { eq: false } } }\n            ) {\n                edges {\n                    node {\n                        id\n                        frontmatter {\n                            image {\n                                childImageSharp {\n                                    fluid(maxWidth: 720) {\n                                        ...GatsbyImageSharpFluid\n                                    }\n                                }\n                            }\n                            title\n                            released_at\n                            updated_at\n                            description\n                            lang\n                            category\n                        }\n                        fields {\n                            slug\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    if (!data.allMarkdownRemark) return <div></div>\n    const { allMarkdownRemark } = data\n\n    return (\n        <PostCardGrid\n            posts={\n                query.category\n                    ? filterByCategory(\n                          filterByLanguage(\n                              reshapePost(allMarkdownRemark),\n                              lang\n                          ),\n                          query.category as string\n                      )\n                    : filterByLanguage(reshapePost(allMarkdownRemark), lang)\n            }\n        />\n    )\n}\n\nexport default memo(PostsPage)\n","import { PartialPostType } from \"../../components/post/PostCard\"\nimport { SeriesType } from \"../../components/series/SeriesCard\"\n\nexport const reshapePost = (allMarkdownRemark: any) => {\n    let posts: Array<PartialPostType> = []\n    const { edges } = allMarkdownRemark\n\n    edges.map(edge => {\n        const obj = edge.node.frontmatter\n        let post: PartialPostType = {\n            path: edge.node.fields.slug,\n            title: obj.title,\n            description: obj.description,\n            released_at: obj.released_at,\n            updated_at: obj.updated_at,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            lang: obj.lang,\n            category: obj.category,\n        }\n\n        posts.push(post)\n    })\n\n    return posts\n}\n\nexport const filterByCategory = (\n    posts: Array<PartialPostType>,\n    category: string\n) => {\n    return posts.filter(post => post.category === category)\n}\n\nexport function filterByLanguage<T>(list: T[], lang: string) {\n    return list.filter(item => (item as any).lang === lang)\n}\n\nexport const reshapeSeries = (allMarkdownRemark: any) => {\n    let seriesList: Array<SeriesType> = []\n    const { group } = allMarkdownRemark\n    let len = group.length\n\n    for (let i = 0; i < len; i++) {\n        const obj = group[i].nodes[0].frontmatter\n        let series: SeriesType = {\n            path: `/series/${group[i].fieldValue.replace(/ /gi, \"-\")}`,\n            title: group[i].fieldValue,\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\n            updated_at: obj.released_at,\n            totalCount: group[i].totalCount,\n            lang: obj.lang,\n        }\n        seriesList.push(series)\n    }\n\n    return seriesList\n}\n","import React, { memo } from 'react';\nimport Styled from 'styled-components';\nimport Img, { FluidObject } from 'gatsby-image';\nimport { mediaQuery } from '../../lib/styles/media';\n\nconst RatioImageBlock = Styled.div`\n    width: 100%;\n    max-height: 12.5rem;\n    display: flex;\n    align-items: center;\n\n    z-index: 1;\n\n    ${mediaQuery(767)} {\n        max-height: 100%;\n    }\n\n    .ratio-img {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        max-height: 100%;\n        display: block;\n        object-fit: cover;\n    }\n`;\n\nexport interface RatioImageProps {\n    widthRatio: number;\n    heightRatio: number;\n    fluid: FluidObject | FluidObject[];\n    style?: React.CSSProperties;\n}\n\nconst RatioImage = ({\n    widthRatio,\n    heightRatio,\n    fluid,\n    style\n}: RatioImageProps) => {\n    const paddingTop = `${(heightRatio / widthRatio) * 100}%`;\n\n    return (\n        <RatioImageBlock style={style}>\n            <Img className=\"ratio-img\" fluid={fluid} />\n        </RatioImageBlock>\n    );\n};\n\nexport default memo(RatioImage);\n","import React, { useCallback, useState } from \"react\"\nimport { createGlobalStyle } from \"styled-components\"\nimport FloatingHeader from \"../../components/base/FloatingHeader\"\nimport Header from \"../../components/base/Header\"\nimport SimpleProfile from \"../../components/common/SimpleProfile\"\nimport HomeLayout from \"../../components/home/HomeLayout\"\nimport HomeTab from \"../../components/home/HomeTab\"\nimport MainPageRowTemplate from \"../../components/main/MainPageRowTemplate\"\nimport MainResponsive from \"../../components/main/MainResponsive\"\nimport MainTemplate from \"../../components/main/MainTemplate\"\nimport PostListPage from \"../../components/post/PostListPage\"\nimport SeriesListPage from \"../../components/series/SeriesListPage\"\nimport queryString from \"query-string\"\nimport { useLocation } from \"@reach/router\"\nimport SEO from \"../../components/SEO\"\nimport \"../../components/css/typography.css\"\n\ncreateGlobalStyle`\n    body {\n        font-family: \"ELAND\", serif;\n    }\n`\n\nconst indexPage = (page: number) => {\n    if (page === 0) return <PostListPage lang=\"en\" />\n    else if (page === 1) return <SeriesListPage lang=\"en\" />\n    else return <div></div>\n}\n\nconst HomePage = () => {\n    const location = useLocation()\n    const series = location.search && queryString.parse(location.search)\n\n    const [page, setPage] = useState<number>(0)\n    const [categoryVisible, setCategoryVisible] = useState<boolean>(true)\n    const onClick = useCallback((index: number) => {\n        setPage(index)\n        if (index > 0) setCategoryVisible(false)\n        else setCategoryVisible(true)\n    }, [])\n\n    return (\n        <MainTemplate>\n            <SEO title=\"Home\" lang=\"en\" />\n            <Header lang=\"en\" ko_to=\"/\" en_to=\"#\" />\n            <FloatingHeader page={page} lang=\"en\" />\n            <MainResponsive>\n                <HomeTab page={page} setUser={false} lang=\"en\" />\n                <MainPageRowTemplate>\n                    <SimpleProfile\n                        type=\"body\"\n                        categoryVisible={categoryVisible}\n                        lang=\"en\"\n                    />\n                    <HomeLayout>{indexPage(page)}</HomeLayout>\n                </MainPageRowTemplate>\n            </MainResponsive>\n        </MainTemplate>\n    )\n}\n\nexport default HomePage\n","import React, { memo } from \"react\"\nimport { Link } from \"gatsby\"\nimport Styled, { css } from \"styled-components\"\nimport { mediaQuery } from \"../../lib/styles/media\"\nimport palette from \"../../lib/styles/palette\"\nimport { ellipsis, formatDate } from \"../../lib/styles/utils\"\nimport RatioImage from \"../common/RatioImage\"\nimport { FluidObject } from 'gatsby-image';\n\nconst Wrapper = Styled.div`\n    width: 42rem;\n    background: white;\n    border-radius: 4px;\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\n    margin: 1rem;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    ${mediaQuery(1919)} {\n        width: calc(50% - 2rem);\n    }\n    ${mediaQuery(767)} {\n        margin: 0;\n        width: 100%;\n        & + & {\n            margin-top: 1rem;\n        }\n    }\n    &:hover {\n        transform: translateY(-8px);\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\n        ${mediaQuery(1024)} {\n            transform: none;\n        }\n    }\n\n`\n\nconst StyledLink = Styled(Link)`\n    display: block;\n    color: inherit;\n    text-decoration: none;\n`\n\nconst Content = Styled.div<{ clamp: boolean }>`\n    padding: 1rem;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    background-color: white;\n    z-index: 3;\n    h4 {\n        font-size: 1rem;\n        margin: 0;\n        margin-bottom: 0.25rem;\n        line-height: 1.5;\n        word-break: break-word;\n        ${ellipsis}\n        color: ${palette.gray[9]};\n        ${mediaQuery(767)} {\n            white-space: initial;\n        }\n    }\n    .description-wrapper {\n        flex: 1;\n    }\n    p {\n        margin: 0;\n        word-break: break-word;\n        overflow-wrap: break-word;\n        font-size: 0.875rem;\n        line-height: 1.5;\n        ${props =>\n        props.clamp &&\n        css`\n                height: 3.9375rem;\n                display: -webkit-box;\n                -webkit-line-clamp: 3;\n                -webkit-box-orient: vertical;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            `}\n        /* ${props =>\n        !props.clamp &&\n        css`\n                height: 15.875rem;\n            `} */\n\n        color: ${palette.gray[7]};\n        margin-bottom: 1.5rem;\n    }\n    .sub-info {\n        font-size: 0.75rem;\n        line-height: 1.5;\n        color: ${palette.gray[6]};\n        .separator {\n            margin-left: 0.25rem;\n            margin-right: 0.25rem;\n        }\n    }\n\n`\n\nexport type SeriesType = {\n    path: string\n    title: string\n    image: FluidObject | FluidObject[]\n    updated_at: string\n    totalCount: number\n    lang: string\n}\n\ninterface SeriesCardProps {\n    series: SeriesType\n}\n\nconst SeriesCard = ({ series }: SeriesCardProps) => {\n    return (\n        <Wrapper>\n            {series.image && (\n                <StyledLink to={`${series.path}`}>\n                    <RatioImage\n                        widthRatio={2}\n                        heightRatio={1}\n                        fluid={series.image}\n                        style={{ maxHeight: '16rem' }}\n                    />\n                </StyledLink>\n            )}\n            <Content clamp={!series.image}>\n                <StyledLink to={`${series.path}`}>\n                    <h4>{series.title}</h4>\n                </StyledLink>\n                <StyledLink to={`${series.path}`}>\n                    <div className=\"sub-info\">\n                        <span>{series.totalCount}{series.lang === 'ko' ? '개의 포스트' : ' posts'}</span>\n                        <span className=\"separator\">·</span>\n                        <span>{series.lang === 'ko' ? '마지막 업데이트' : 'Last edited at'} {formatDate(series.updated_at, series.lang)}</span>\n                    </div>\n                </StyledLink>\n            </Content>\n        </Wrapper>\n    )\n}\n\nexport default memo(SeriesCard)\n","import React, { memo } from \"react\"\nimport Styled from \"styled-components\"\nimport { mediaQuery } from \"../../lib/styles/media\"\nimport Adsense from \"../common/Adsense\"\nimport SeriesCard, { SeriesType } from \"./SeriesCard\"\n\nconst Wrapper = Styled.div`\n    display: flex;\n    margin: -1rem;\n    flex-wrap: wrap;\n    ${mediaQuery(767)} {\n        margin: 0;\n    }\n\n    .adsense-block {\n        width: 100%;\n    }\n`\n\ninterface SeriseCardGridProps {\n    seriesList: Array<SeriesType>\n}\n\nconst SeriesCardGrid = ({ seriesList }: SeriseCardGridProps) => {\n    return (\n        <Wrapper>\n            <div className=\"adsense-block\">\n                <Adsense\n                    style={{ display: \"block\" }}\n                    adClient=\"ca-pub-3926462216067158\"\n                    adSlot=\"1239423651\"\n                    adFormat=\"auto\"\n                    fullWidthResponsive=\"true\"\n                />\n            </div>\n            {seriesList.map((series, index) => (\n                <SeriesCard series={series} key={index} />\n            ))}\n        </Wrapper>\n    )\n}\n\nexport default memo(SeriesCardGrid)\n","import { graphql, useStaticQuery } from 'gatsby';\nimport React, { memo } from 'react';\nimport { filterByLanguage, reshapeSeries } from '../../lib/list/reshape';\nimport SeriesCardGrid from './SeriesCardGrid';\n\ninterface SeriesListPageProps {\n    lang: string;\n}\n\nconst SeriesListPage = ({ lang }: SeriesListPageProps) => {\n    const data = useStaticQuery(graphql`\n        {\n            allMarkdownRemark(sort: {order: DESC, fields: frontmatter___released_at}, filter: {frontmatter: {series: {ne: \"none\"}}}) {\n                group(field: frontmatter___series, limit: 1) {\n                    fieldValue\n                    totalCount\n                    nodes {\n                        frontmatter {\n                            image {\n                                childImageSharp {\n                                    fluid {\n                                        ...GatsbyImageSharpFluid\n                                    }\n                                }\n                            }\n                            released_at\n                            lang\n                        }\n                    }\n                }\n            }\n        }\n    `);\n\n    const { allMarkdownRemark } = data;\n    if (!allMarkdownRemark) return <div></div>;\n\n    return <SeriesCardGrid seriesList={filterByLanguage(reshapeSeries(allMarkdownRemark), lang)} />;\n}\n\nexport default memo(SeriesListPage);"],"sourceRoot":""}