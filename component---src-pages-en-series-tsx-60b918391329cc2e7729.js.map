{"version":3,"sources":["webpack:///./src/pages/en/series.tsx","webpack:///./src/lib/list/reshape.ts","webpack:///./src/components/common/RatioImage.tsx","webpack:///./src/components/series/SeriesCard.tsx","webpack:///./src/components/series/SeriesCardGrid.tsx","webpack:///./src/components/series/SeriesListPage.tsx"],"names":["createGlobalStyle","HomePage","location","useLocation","search","queryString","parse","useState","page","setPage","categoryVisible","setCategoryVisible","useCallback","index","title","lang","ko_to","en_to","setUser","type","reshapePost","allMarkdownRemark","posts","edges","map","edge","obj","node","frontmatter","post","path","fields","slug","description","released_at","updated_at","image","childImageSharp","fluid","category","push","filterByCategory","filter","filterByLanguage","list","item","reshapeSeries","seriesList","group","len","length","i","nodes","series","fieldValue","replace","totalCount","RatioImageBlock","Styled","div","mediaQuery","RatioImage","widthRatio","heightRatio","style","className","memo","Wrapper","StyledLink","Link","Content","ellipsis","palette","gray","props","clamp","css","SeriesCard","to","maxHeight","formatDate","SeriesCardGrid","Adsense","display","adClient","adSlot","adFormat","fullWidthResponsive","key","SeriesListPage","useStaticQuery"],"mappings":"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","file":"component---src-pages-en-series-tsx-60b918391329cc2e7729.js","sourcesContent":["import React, { useCallback, useState } from \"react\"\r\nimport { createGlobalStyle } from \"styled-components\"\r\nimport FloatingHeader from \"../../components/base/FloatingHeader\"\r\nimport Header from \"../../components/base/Header\"\r\nimport SimpleProfile from \"../../components/common/SimpleProfile\"\r\nimport HomeLayout from \"../../components/home/HomeLayout\"\r\nimport HomeTab from \"../../components/home/HomeTab\"\r\nimport MainPageRowTemplate from \"../../components/main/MainPageRowTemplate\"\r\nimport MainResponsive from \"../../components/main/MainResponsive\"\r\nimport MainTemplate from \"../../components/main/MainTemplate\"\r\nimport PostListPage from \"../../components/post/PostListPage\"\r\nimport SeriesListPage from \"../../components/series/SeriesListPage\"\r\nimport queryString from \"query-string\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport SEO from \"../../components/SEO\"\r\nimport \"../../components/css/typography.css\"\r\nimport Adsense from \"../../components/common/Adsense\"\r\n\r\ncreateGlobalStyle`\r\n    body {\r\n        font-family: \"ELAND\", serif;\r\n    }\r\n`\r\n\r\nconst HomePage = () => {\r\n    const location = useLocation()\r\n    const series = location.search && queryString.parse(location.search)\r\n\r\n    const [page, setPage] = useState<number>(1)\r\n    const [categoryVisible, setCategoryVisible] = useState<boolean>(true)\r\n    const onClick = useCallback((index: number) => {\r\n        setPage(index)\r\n        if (index > 0) setCategoryVisible(false)\r\n        else setCategoryVisible(true)\r\n    }, [])\r\n\r\n    return (\r\n        <MainTemplate>\r\n            <SEO title=\"Series\" lang=\"en\" />\r\n            <Header lang=\"en\" ko_to=\"/series\" en_to=\"#\" />\r\n            <FloatingHeader page={page} lang=\"en\" />\r\n            <MainResponsive>\r\n                <HomeTab page={page} setUser={false} lang=\"en\" />\r\n                <MainPageRowTemplate>\r\n                    <SimpleProfile\r\n                        type=\"body\"\r\n                        categoryVisible={categoryVisible}\r\n                        lang=\"en\"\r\n                    />\r\n                    <HomeLayout>\r\n                        <SeriesListPage lang=\"en\" />\r\n                    </HomeLayout>\r\n                </MainPageRowTemplate>\r\n            </MainResponsive>\r\n        </MainTemplate>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import { PartialPostType } from \"../../components/post/PostCard\"\r\nimport { SeriesType } from \"../../components/series/SeriesCard\"\r\n\r\nexport const reshapePost = (allMarkdownRemark: any) => {\r\n    let posts: Array<PartialPostType> = []\r\n    const { edges } = allMarkdownRemark\r\n\r\n    edges.map(edge => {\r\n        const obj = edge.node.frontmatter\r\n        let post: PartialPostType = {\r\n            path: edge.node.fields.slug,\r\n            title: obj.title,\r\n            description: obj.description,\r\n            released_at: obj.released_at,\r\n            updated_at: obj.updated_at,\r\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\r\n            lang: obj.lang,\r\n            category: obj.category,\r\n        }\r\n\r\n        posts.push(post)\r\n    })\r\n\r\n    return posts\r\n}\r\n\r\nexport const filterByCategory = (\r\n    posts: Array<PartialPostType>,\r\n    category: string\r\n) => {\r\n    return posts.filter(post => post.category === category)\r\n}\r\n\r\nexport function filterByLanguage<T>(list: T[], lang: string) {\r\n    return list.filter(item => (item as any).lang === lang)\r\n}\r\n\r\nexport const reshapeSeries = (allMarkdownRemark: any) => {\r\n    let seriesList: Array<SeriesType> = []\r\n    const { group } = allMarkdownRemark\r\n    let len = group.length\r\n\r\n    for (let i = 0; i < len; i++) {\r\n        const obj = group[i].nodes[0].frontmatter\r\n        let series: SeriesType = {\r\n            path: `/series/${group[i].fieldValue.replace(/ /gi, \"-\")}`,\r\n            title: group[i].fieldValue,\r\n            image: obj.image ? obj.image.childImageSharp.fluid : null,\r\n            updated_at: obj.released_at,\r\n            totalCount: group[i].totalCount,\r\n            lang: obj.lang,\r\n        }\r\n        seriesList.push(series)\r\n    }\r\n\r\n    return seriesList\r\n}\r\n","import React, { memo } from 'react';\r\nimport Styled from 'styled-components';\r\nimport Img, { FluidObject } from 'gatsby-image';\r\nimport { mediaQuery } from '../../lib/styles/media';\r\n\r\nconst RatioImageBlock = Styled.div`\r\n    width: 100%;\r\n    max-height: 12.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    z-index: 1;\r\n\r\n    ${mediaQuery(767)} {\r\n        max-height: 100%;\r\n    }\r\n\r\n    .ratio-img {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        max-height: 100%;\r\n        display: block;\r\n        object-fit: cover;\r\n    }\r\n`;\r\n\r\nexport interface RatioImageProps {\r\n    widthRatio: number;\r\n    heightRatio: number;\r\n    fluid: FluidObject | FluidObject[];\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst RatioImage = ({\r\n    widthRatio,\r\n    heightRatio,\r\n    fluid,\r\n    style\r\n}: RatioImageProps) => {\r\n    const paddingTop = `${(heightRatio / widthRatio) * 100}%`;\r\n\r\n    return (\r\n        <RatioImageBlock style={style}>\r\n            <Img className=\"ratio-img\" fluid={fluid} />\r\n        </RatioImageBlock>\r\n    );\r\n};\r\n\r\nexport default memo(RatioImage);\r\n","import React, { memo } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Styled, { css } from \"styled-components\"\r\nimport { mediaQuery } from \"../../lib/styles/media\"\r\nimport palette from \"../../lib/styles/palette\"\r\nimport { ellipsis, formatDate } from \"../../lib/styles/utils\"\r\nimport RatioImage from \"../common/RatioImage\"\r\nimport { FluidObject } from 'gatsby-image';\r\n\r\nconst Wrapper = Styled.div`\r\n    width: 42rem;\r\n    background: white;\r\n    border-radius: 4px;\r\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\r\n    transition: 0.25s box-shadow ease-in, 0.25s transform ease-in;\r\n    margin: 1rem;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${mediaQuery(1919)} {\r\n        width: calc(50% - 2rem);\r\n    }\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n        width: 100%;\r\n        & + & {\r\n            margin-top: 1rem;\r\n        }\r\n    }\r\n    &:hover {\r\n        transform: translateY(-8px);\r\n        box-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\r\n        ${mediaQuery(1024)} {\r\n            transform: none;\r\n        }\r\n    }\r\n\r\n`\r\n\r\nconst StyledLink = Styled(Link)`\r\n    display: block;\r\n    color: inherit;\r\n    text-decoration: none;\r\n`\r\n\r\nconst Content = Styled.div<{ clamp: boolean }>`\r\n    padding: 1rem;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    background-color: white;\r\n    z-index: 3;\r\n    h4 {\r\n        font-size: 1rem;\r\n        margin: 0;\r\n        margin-bottom: 0.25rem;\r\n        line-height: 1.5;\r\n        word-break: break-word;\r\n        ${ellipsis}\r\n        color: ${palette.gray[9]};\r\n        ${mediaQuery(767)} {\r\n            white-space: initial;\r\n        }\r\n    }\r\n    .description-wrapper {\r\n        flex: 1;\r\n    }\r\n    p {\r\n        margin: 0;\r\n        word-break: break-word;\r\n        overflow-wrap: break-word;\r\n        font-size: 0.875rem;\r\n        line-height: 1.5;\r\n        ${props =>\r\n        props.clamp &&\r\n        css`\r\n                height: 3.9375rem;\r\n                display: -webkit-box;\r\n                -webkit-line-clamp: 3;\r\n                -webkit-box-orient: vertical;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            `}\r\n        /* ${props =>\r\n        !props.clamp &&\r\n        css`\r\n                height: 15.875rem;\r\n            `} */\r\n\r\n        color: ${palette.gray[7]};\r\n        margin-bottom: 1.5rem;\r\n    }\r\n    .sub-info {\r\n        font-size: 0.75rem;\r\n        line-height: 1.5;\r\n        color: ${palette.gray[6]};\r\n        .separator {\r\n            margin-left: 0.25rem;\r\n            margin-right: 0.25rem;\r\n        }\r\n    }\r\n\r\n`\r\n\r\nexport type SeriesType = {\r\n    path: string\r\n    title: string\r\n    image: FluidObject | FluidObject[]\r\n    updated_at: string\r\n    totalCount: number\r\n    lang: string\r\n}\r\n\r\ninterface SeriesCardProps {\r\n    series: SeriesType\r\n}\r\n\r\nconst SeriesCard = ({ series }: SeriesCardProps) => {\r\n    return (\r\n        <Wrapper>\r\n            {series.image && (\r\n                <StyledLink to={`${series.path}`}>\r\n                    <RatioImage\r\n                        widthRatio={2}\r\n                        heightRatio={1}\r\n                        fluid={series.image}\r\n                        style={{ maxHeight: '16rem' }}\r\n                    />\r\n                </StyledLink>\r\n            )}\r\n            <Content clamp={!series.image}>\r\n                <StyledLink to={`${series.path}`}>\r\n                    <h4>{series.title}</h4>\r\n                </StyledLink>\r\n                <StyledLink to={`${series.path}`}>\r\n                    <div className=\"sub-info\">\r\n                        <span>{series.totalCount}{series.lang === 'ko' ? '개의 포스트' : ' posts'}</span>\r\n                        <span className=\"separator\">·</span>\r\n                        <span>{series.lang === 'ko' ? '마지막 업데이트' : 'Last edited at'} {formatDate(series.updated_at, series.lang)}</span>\r\n                    </div>\r\n                </StyledLink>\r\n            </Content>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default memo(SeriesCard)\r\n","import React, { memo } from \"react\"\r\nimport Styled from \"styled-components\"\r\nimport { mediaQuery } from \"../../lib/styles/media\"\r\nimport Adsense from \"../common/Adsense\"\r\nimport SeriesCard, { SeriesType } from \"./SeriesCard\"\r\n\r\nconst Wrapper = Styled.div`\r\n    display: flex;\r\n    margin: -1rem;\r\n    flex-wrap: wrap;\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n    }\r\n\r\n    .adsense-block {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\ninterface SeriseCardGridProps {\r\n    seriesList: Array<SeriesType>\r\n}\r\n\r\nconst SeriesCardGrid = ({ seriesList }: SeriseCardGridProps) => {\r\n    return (\r\n        <Wrapper>\r\n            <div className=\"adsense-block\">\r\n                <Adsense\r\n                    style={{ display: \"block\" }}\r\n                    adClient=\"ca-pub-3926462216067158\"\r\n                    adSlot=\"1239423651\"\r\n                    adFormat=\"auto\"\r\n                    fullWidthResponsive=\"true\"\r\n                />\r\n            </div>\r\n            {seriesList.map((series, index) => (\r\n                <SeriesCard series={series} key={index} />\r\n            ))}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default memo(SeriesCardGrid)\r\n","import { graphql, useStaticQuery } from 'gatsby';\r\nimport React, { memo } from 'react';\r\nimport { filterByLanguage, reshapeSeries } from '../../lib/list/reshape';\r\nimport SeriesCardGrid from './SeriesCardGrid';\r\n\r\ninterface SeriesListPageProps {\r\n    lang: string;\r\n}\r\n\r\nconst SeriesListPage = ({ lang }: SeriesListPageProps) => {\r\n    const data = useStaticQuery(graphql`\r\n        {\r\n            allMarkdownRemark(sort: {order: DESC, fields: frontmatter___released_at}, filter: {frontmatter: {series: {ne: \"none\"}}}) {\r\n                group(field: frontmatter___series, limit: 1) {\r\n                    fieldValue\r\n                    totalCount\r\n                    nodes {\r\n                        frontmatter {\r\n                            image {\r\n                                childImageSharp {\r\n                                    fluid {\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                }\r\n                            }\r\n                            released_at\r\n                            lang\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\n    const { allMarkdownRemark } = data;\r\n    if (!allMarkdownRemark) return <div></div>;\r\n\r\n    return <SeriesCardGrid seriesList={filterByLanguage(reshapeSeries(allMarkdownRemark), lang)} />;\r\n}\r\n\r\nexport default memo(SeriesListPage);"],"sourceRoot":""}