{"version":3,"file":"component---src-pages-series-tsx-7b8e593e8d3691fb6ad8.js","mappings":"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","sources":["webpack://millo-s-tech-blog/./src/components/SEO.tsx","webpack://millo-s-tech-blog/./src/components/series/SeriesCard.tsx","webpack://millo-s-tech-blog/./src/components/series/SeriesCardGrid.tsx","webpack://millo-s-tech-blog/./src/components/series/SeriesList.tsx","webpack://millo-s-tech-blog/./src/libs/list/reshape.ts","webpack://millo-s-tech-blog/./src/pages/series.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\ninterface Props {\r\n\ttitle?: string;\r\n\tdescription?: string;\r\n\tpathname?: string;\r\n\tcreated_at?: string;\r\n\tupdated_at?: string;\r\n\timage?: string;\r\n\tchildren?: any;\r\n}\r\n\r\ntype QueryType = {\r\n\tsite: {\r\n\t\tsiteMetadata: {\r\n\t\t\tauthor: string;\r\n\t\t\tdescription: string;\r\n\t\t\tsiteUrl: string;\r\n\t\t\ttitle: string;\r\n\t\t};\r\n\t};\r\n};\r\n\r\nexport default function SEO({\r\n\ttitle,\r\n\tdescription,\r\n\tpathname,\r\n\tcreated_at,\r\n\tupdated_at,\r\n\timage,\r\n\tchildren,\r\n}: Props) {\r\n\tconst { site } = useStaticQuery<QueryType>(graphql`\r\n\t\t{\r\n\t\t\tsite {\r\n\t\t\t\tsiteMetadata {\r\n\t\t\t\t\tauthor\r\n\t\t\t\t\tdescription\r\n\t\t\t\t\tsiteUrl\r\n\t\t\t\t\ttitle\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t`);\r\n\r\n\tconst seo = {\r\n\t\tauthor: site.siteMetadata.author,\r\n\t\ttitle: title ? `${title} | ${site.siteMetadata.title}` : site.siteMetadata.title,\r\n\t\tdescription: description || site.siteMetadata.description,\r\n\t\timage: `${site.siteMetadata.siteUrl}${image || \"/icon.png\"}`,\r\n\t\turl: `${site.siteMetadata.siteUrl}${pathname || \"\"}`,\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(`siteUrl: ${site.siteMetadata.siteUrl}`);\r\n\t}, [site.siteMetadata.siteUrl]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<title>{seo.title}</title>\r\n\t\t\t<meta name=\"description\" content={seo.description} />\r\n\t\t\t<meta name=\"twitter:url\" content={seo.url} />\r\n\t\t\t<meta name=\"twitter:title\" content={seo.title} />\r\n\t\t\t<meta name=\"twitter:url\" content={seo.url} />\r\n\t\t\t<meta name=\"twitter:description\" content={seo.description} />\r\n\t\t\t<meta name=\"twitter:card\" content=\"summary\" />\r\n\t\t\t<meta property=\"twitter:image\" content={seo.image} />\r\n\t\t\t<meta property=\"og:type\" content=\"website\" />\r\n\t\t\t<meta property=\"og:title\" content={seo.title} />\r\n\t\t\t<meta property=\"og:description\" content={seo.description} />\r\n\t\t\t<meta property=\"og:site_name\" content={seo.title} />\r\n\t\t\t<meta property=\"og:image\" content={seo.image} />\r\n\t\t\t<meta name=\"robots\" content=\"index,follow\" />\r\n\t\t\t<link rel=\"apple-touch-icon\" href=\"/favicon.ico\" />\r\n\t\t\t{created_at !== undefined && (\r\n\t\t\t\t<script type=\"application/ld+json\">\r\n\t\t\t\t\t{JSON.stringify({\r\n\t\t\t\t\t\t\"@context\": \"http://schema.org\",\r\n\t\t\t\t\t\t\"@type\": \"BlogPosting\",\r\n\t\t\t\t\t\tauthor: {\r\n\t\t\t\t\t\t\t\"@type\": \"Person\",\r\n\t\t\t\t\t\t\tname: seo.author,\r\n\t\t\t\t\t\t\tlogo: null,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\turl: seo.url,\r\n\t\t\t\t\t\theadline: seo.title,\r\n\t\t\t\t\t\tdescription: seo.description,\r\n\t\t\t\t\t\tdatePublished: created_at,\r\n\t\t\t\t\t\tdateModified: updated_at || created_at,\r\n\t\t\t\t\t\timage: seo.image,\r\n\t\t\t\t\t})}\r\n\t\t\t\t</script>\r\n\t\t\t)}\r\n\t\t\t<meta\r\n\t\t\t\tname=\"google-site-verification\"\r\n\t\t\t\tcontent=\"3RV-iVIsB1icAg20Pkdf-2uSR7XMnOYS2FxfhQ3YCD8\"\r\n\t\t\t/>\r\n\t\t\t<meta\r\n\t\t\t\tname=\"naver-site-verification\"\r\n\t\t\t\tcontent=\"3be60e4cdc653a5f4c68e0da86c7f8414891c370\"\r\n\t\t\t/>\r\n\t\t\t<script\r\n\t\t\t\tasync\r\n\t\t\t\tsrc=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3926462216067158\"\r\n\t\t\t\tcrossOrigin=\"anonymous\"\r\n\t\t\t/>\r\n\t\t\t{children}\r\n\t\t</>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { mediaQuery } from \"../../libs/styles/media\";\r\nimport palette from \"../../libs/styles/palette\";\r\nimport { ellipsis, formatDate } from \"../../libs/styles/utils\";\r\nimport { SeriesType } from \"../../types/Common\";\r\n\r\nconst Container = styled(Link)`\r\n\twidth: 42rem;\r\n\tbackground: white;\r\n\tborder-radius: 4px;\r\n\tbox-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\r\n\ttransition:\r\n\t\t0.25s box-shadow ease-in,\r\n\t\t0.25s transform ease-in;\r\n\tmargin: 1rem;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\t${mediaQuery(1919)} {\r\n\t\twidth: calc(50% - 2rem);\r\n\t}\r\n\t${mediaQuery(767)} {\r\n\t\tmargin: 0;\r\n\t\twidth: 100%;\r\n\t\t& + & {\r\n\t\t\tmargin-top: 1rem;\r\n\t\t}\r\n\t}\r\n\r\n\t.thumbnail {\r\n\t\twidth: 100%;\r\n\t\tmax-height: 20rem;\r\n\t}\r\n\r\n\t&:hover {\r\n\t\ttransform: translateY(-8px);\r\n\t\tbox-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\r\n\t\t${mediaQuery(1024)} {\r\n\t\t\ttransform: none;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst ContentContainer = styled.div<{ clamp: boolean }>`\r\n\tpadding: 1rem;\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\tflex-direction: column;\r\n\tbackground-color: white;\r\n\tz-index: 3;\r\n\th4 {\r\n\t\tfont-size: 1rem;\r\n\t\tmargin: 0;\r\n\t\tmargin-bottom: 0.25rem;\r\n\t\tline-height: 1.5;\r\n\t\tword-break: break-word;\r\n\t\t${ellipsis}\r\n\t\tcolor: ${palette.gray[9]};\r\n\t\t${mediaQuery(767)} {\r\n\t\t\twhite-space: initial;\r\n\t\t}\r\n\t}\r\n\t.description-wrapper {\r\n\t\tflex: 1;\r\n\t}\r\n\tp {\r\n\t\tmargin: 0;\r\n\t\tword-break: break-word;\r\n\t\toverflow-wrap: break-word;\r\n\t\tfont-size: 0.875rem;\r\n\t\tline-height: 1.5;\r\n\t\t${(props) =>\r\n\t\t\tprops.clamp &&\r\n\t\t\tcss`\r\n\t\t\t\theight: 3.9375rem;\r\n\t\t\t\tdisplay: -webkit-box;\r\n\t\t\t\t-webkit-line-clamp: 3;\r\n\t\t\t\t-webkit-box-orient: vertical;\r\n\t\t\t\toverflow: hidden;\r\n\t\t\t\ttext-overflow: ellipsis;\r\n\t\t\t`}\r\n\t\t/* ${(props) =>\r\n\t\t\t!props.clamp &&\r\n\t\t\tcss`\r\n\t\t\t\theight: 15.875rem;\r\n\t\t\t`} */\r\n\r\n        color: ${palette.gray[7]};\r\n\t\tmargin-bottom: 1.5rem;\r\n\t}\r\n\t.sub-info {\r\n\t\tfont-size: 0.75rem;\r\n\t\tline-height: 1.5;\r\n\t\tcolor: ${palette.gray[6]};\r\n\t\t.separator {\r\n\t\t\tmargin-left: 0.25rem;\r\n\t\t\tmargin-right: 0.25rem;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\ninterface Props {\r\n\tseries: SeriesType;\r\n}\r\n\r\nexport default function SeriesCard({ series }: Props) {\r\n\treturn (\r\n\t\t<Container to={series.path}>\r\n\t\t\t{series.image && (\r\n\t\t\t\t<GatsbyImage className=\"thumbnail\" image={series.image} alt={series.title} />\r\n\t\t\t)}\r\n\t\t\t<ContentContainer clamp={!series.image}>\r\n\t\t\t\t<h4>{series.title}</h4>\r\n\t\t\t\t<div className=\"sub-info\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t{series.totalCount}\r\n\t\t\t\t\t\t{series.lang === \"ko\" ? \"개의 포스트\" : \" posts\"}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"separator\">·</span>\r\n\t\t\t\t\t{series.updated_at && (\r\n\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t{series.lang === \"ko\" ? \"마지막 게시일\" : \"Last released at\"}{\" \"}\r\n\t\t\t\t\t\t\t{formatDate(series.updated_at, series.lang)}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</ContentContainer>\r\n\t\t</Container>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport Styled from \"styled-components\";\r\nimport { mediaQuery } from \"../../libs/styles/media\";\r\nimport { SeriesType } from \"../../types/Common\";\r\nimport SeriesCard from \"./SeriesCard\";\r\n\r\nconst Container = Styled.div`\r\n    display: flex;\r\n    margin: 0 -1rem;\r\n    flex-wrap: wrap;\r\n    ${mediaQuery(767)} {\r\n        margin: 0;\r\n    }\r\n\r\n    .adsense-block {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\ninterface Props {\r\n\tseriesList: SeriesType[];\r\n}\r\n\r\nexport default function SeriesCardGrid({ seriesList }: Props) {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t{seriesList.map((series) => (\r\n\t\t\t\t<SeriesCard series={series} key={series.title} />\r\n\t\t\t))}\r\n\t\t</Container>\r\n\t);\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport { reshapeSeries } from \"../../libs/list/reshape\";\r\nimport { SeriesListAllMarkdownRemark } from \"../../types/Common\";\r\nimport SeriesCardGrid from \"./SeriesCardGrid\";\r\n\r\ninterface Props {\r\n\tlang: string;\r\n}\r\n\r\ntype QueryType = {\r\n\tallMarkdownRemark: SeriesListAllMarkdownRemark;\r\n};\r\n\r\nexport default function SeriesList({ lang }: Props) {\r\n\tconst { allMarkdownRemark } = useStaticQuery<QueryType>(graphql`\r\n\t\t{\r\n\t\t\tallMarkdownRemark(\r\n\t\t\t\tfilter: { frontmatter: { series: { ne: \"none\" } } }\r\n\t\t\t\tsort: { frontmatter: { released_at: DESC } }\r\n\t\t\t) {\r\n\t\t\t\tgroup(field: { frontmatter: { series: SELECT } }, limit: 1) {\r\n\t\t\t\t\ttotalCount\r\n\t\t\t\t\tfieldValue\r\n\t\t\t\t\tnodes {\r\n\t\t\t\t\t\tfrontmatter {\r\n\t\t\t\t\t\t\timage {\r\n\t\t\t\t\t\t\t\tchildImageSharp {\r\n\t\t\t\t\t\t\t\t\tgatsbyImageData(width: 700, quality: 100)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treleased_at\r\n\t\t\t\t\t\t\tupdated_at\r\n\t\t\t\t\t\t\tlang\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t`);\r\n\tconst seriesList = useMemo(\r\n\t\t() =>\r\n\t\t\tallMarkdownRemark\r\n\t\t\t\t? reshapeSeries(allMarkdownRemark).filter((series) => series.lang === lang)\r\n\t\t\t\t: [],\r\n\t\t[allMarkdownRemark, lang],\r\n\t);\r\n\r\n\tif (!allMarkdownRemark) return null;\r\n\treturn <SeriesCardGrid seriesList={seriesList} />;\r\n}\r\n","import {\r\n\tPostListAllMarkdownRemark,\r\n\tPostType,\r\n\tSeriesListAllMarkdownRemark,\r\n\tSeriesType,\r\n} from \"../../types/Common\";\r\n\r\nexport const reshapePost = (allMarkdownRemark: PostListAllMarkdownRemark): PostType[] => {\r\n\tif (!allMarkdownRemark) return [];\r\n\r\n\treturn allMarkdownRemark.nodes.map((node) => ({\r\n\t\tpath: node.fields.slug,\r\n\t\ttitle: node.frontmatter.title,\r\n\t\tdescription: node.frontmatter.description,\r\n\t\treleased_at: node.frontmatter.released_at,\r\n\t\tupdated_at: node.frontmatter.updated_at || undefined,\r\n\t\timage: node.frontmatter.image\r\n\t\t\t? node.frontmatter.image.childImageSharp.gatsbyImageData\r\n\t\t\t: null,\r\n\t\tlang: node.frontmatter.lang,\r\n\t\tcategory: node.frontmatter.category,\r\n\t}));\r\n};\r\n\r\nexport const reshapeSeries = (allMarkdownRemark: SeriesListAllMarkdownRemark): SeriesType[] => {\r\n\tif (!allMarkdownRemark) return [];\r\n\r\n\treturn allMarkdownRemark.group.map((each) => ({\r\n\t\tpath: `/series/${each.fieldValue.replace(/ /gi, \"-\")}`,\r\n\t\ttitle: each.fieldValue,\r\n\t\timage: each.nodes[0].frontmatter.image\r\n\t\t\t? each.nodes[0].frontmatter.image.childImageSharp.gatsbyImageData\r\n\t\t\t: null,\r\n\t\treleased_at: each.nodes[0].frontmatter.released_at,\r\n\t\tupdated_at: each.nodes[0].frontmatter.updated_at || undefined,\r\n\t\tlang: each.nodes[0].frontmatter.lang,\r\n\t\ttotalCount: each.totalCount,\r\n\t}));\r\n};\r\n","import React from \"react\";\r\nimport SEO from \"../components/SEO\";\r\nimport SeriesList from \"../components/series/SeriesList\";\r\n\r\nexport default function SeriesPage() {\r\n\treturn <SeriesList lang=\"ko\" />;\r\n}\r\n\r\nexport function Head() {\r\n\treturn <SEO title=\"Series\" />;\r\n}\r\n"],"names":["SEO","_ref","title","description","pathname","created_at","updated_at","image","children","site","useStaticQuery","seo","author","siteMetadata","siteUrl","url","useEffect","console","log","React","name","content","property","rel","href","undefined","type","JSON","stringify","logo","headline","datePublished","dateModified","async","src","crossOrigin","Container","styled","Link","withConfig","displayName","componentId","mediaQuery","ContentContainer","div","ellipsis","palette","gray","props","clamp","css","SeriesCard","series","to","path","GatsbyImage","className","alt","totalCount","lang","formatDate","Styled","SeriesCardGrid","seriesList","map","key","SeriesList","allMarkdownRemark","useMemo","reshapeSeries","filter","reshapePost","nodes","node","fields","slug","frontmatter","released_at","childImageSharp","gatsbyImageData","category","group","each","fieldValue","replace","SeriesPage","Head"],"sourceRoot":""}