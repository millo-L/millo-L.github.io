{"version":3,"file":"component---src-pages-en-index-tsx-27d01c26e68f8d6ec004.js","mappings":"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","sources":["webpack://millo-s-tech-blog/./src/components/SEO.tsx","webpack://millo-s-tech-blog/./src/components/post/PostCard.tsx","webpack://millo-s-tech-blog/./src/components/post/PostCardGrid.tsx","webpack://millo-s-tech-blog/./src/components/post/PostList.tsx","webpack://millo-s-tech-blog/./src/libs/list/reshape.ts","webpack://millo-s-tech-blog/./src/pages/en/index.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\ninterface Props {\r\n\ttitle?: string;\r\n\tdescription?: string;\r\n\tpathname?: string;\r\n\tcreated_at?: string;\r\n\tupdated_at?: string;\r\n\timage?: string;\r\n\tchildren?: any;\r\n}\r\n\r\ntype QueryType = {\r\n\tsite: {\r\n\t\tsiteMetadata: {\r\n\t\t\tauthor: string;\r\n\t\t\tdescription: string;\r\n\t\t\tsiteUrl: string;\r\n\t\t\ttitle: string;\r\n\t\t};\r\n\t};\r\n};\r\n\r\nconst SEO = ({ title, description, pathname, created_at, updated_at, image, children }: Props) => {\r\n\tconst { site } = useStaticQuery<QueryType>(graphql`\r\n\t\t{\r\n\t\t\tsite {\r\n\t\t\t\tsiteMetadata {\r\n\t\t\t\t\tauthor\r\n\t\t\t\t\tdescription\r\n\t\t\t\t\tsiteUrl\r\n\t\t\t\t\ttitle\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t`);\r\n\r\n\tconst seo = {\r\n\t\tauthor: site.siteMetadata.author,\r\n\t\ttitle: title ? `${title} | ${site.siteMetadata.title}` : site.siteMetadata.title,\r\n\t\tdescription: description || site.siteMetadata.description,\r\n\t\timage: `${site.siteMetadata.siteUrl}${image || \"/icon.png\"}`,\r\n\t\turl: `${site.siteMetadata.siteUrl}${pathname || \"\"}`,\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(`siteUrl: ${site.siteMetadata.siteUrl}`);\r\n\t}, [site.siteMetadata.siteUrl]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<title>{seo.title}</title>\r\n\t\t\t<meta name=\"description\" content={seo.description} />\r\n\t\t\t<meta name=\"twitter:url\" content={seo.url} />\r\n\t\t\t<meta name=\"twitter:title\" content={seo.title} />\r\n\t\t\t<meta name=\"twitter:url\" content={seo.url} />\r\n\t\t\t<meta name=\"twitter:description\" content={seo.description} />\r\n\t\t\t<meta name=\"twitter:card\" content=\"summary\" />\r\n\t\t\t<meta property=\"twitter:image\" content={seo.image} />\r\n\t\t\t<meta property=\"og:type\" content=\"website\" />\r\n\t\t\t<meta property=\"og:title\" content={seo.title} />\r\n\t\t\t<meta property=\"og:description\" content={seo.description} />\r\n\t\t\t<meta property=\"og:site_name\" content={seo.title} />\r\n\t\t\t<meta property=\"og:image\" content={seo.image} />\r\n\t\t\t<meta name=\"robots\" content=\"index,follow\" />\r\n\t\t\t<link rel=\"apple-touch-icon\" href=\"/favicon.ico\" />\r\n\t\t\t{created_at !== undefined && (\r\n\t\t\t\t<script type=\"application/ld+json\">\r\n\t\t\t\t\t{JSON.stringify({\r\n\t\t\t\t\t\t\"@context\": \"http://schema.org\",\r\n\t\t\t\t\t\t\"@type\": \"BlogPosting\",\r\n\t\t\t\t\t\tauthor: {\r\n\t\t\t\t\t\t\t\"@type\": \"Person\",\r\n\t\t\t\t\t\t\tname: seo.author,\r\n\t\t\t\t\t\t\tlogo: null,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\turl: seo.url,\r\n\t\t\t\t\t\theadline: seo.title,\r\n\t\t\t\t\t\tdescription: seo.description,\r\n\t\t\t\t\t\tdatePublished: created_at,\r\n\t\t\t\t\t\tdateModified: updated_at || created_at,\r\n\t\t\t\t\t\timage: seo.image,\r\n\t\t\t\t\t})}\r\n\t\t\t\t</script>\r\n\t\t\t)}\r\n\t\t\t{/* \r\n\t\t\t<meta name=\"twitter:image\" content={seo.image} />\r\n\t\t\t */}\r\n\t\t\t<script\r\n\t\t\t\tasync\r\n\t\t\t\tsrc=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3926462216067158\"\r\n\t\t\t\tcrossOrigin=\"anonymous\"\r\n\t\t\t/>\r\n\t\t\t{children}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default SEO;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { mediaQuery } from \"../../libs/styles/media\";\r\nimport palette from \"../../libs/styles/palette\";\r\nimport { ellipsis, formatDate } from \"../../libs/styles/utils\";\r\nimport { PostType } from \"../../types/Common\";\r\n\r\nconst Container = styled(Link)`\r\n\twidth: 20rem;\r\n\tbackground: white;\r\n\tborder-radius: 4px;\r\n\tbox-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.04);\r\n\ttransition:\r\n\t\t0.25s box-shadow ease-in,\r\n\t\t0.25s transform ease-in;\r\n\tmargin: 1rem;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tmax-height: 23rem;\r\n\t${mediaQuery(1919)} {\r\n\t\twidth: calc(33% - 1.8125rem);\r\n\t}\r\n\t${mediaQuery(1440)} {\r\n\t\twidth: calc(33% - 1.9rem);\r\n\t}\r\n\t${mediaQuery(1056)} {\r\n\t\twidth: calc(50% - 2rem);\r\n\t}\r\n\t${mediaQuery(767)} {\r\n\t\tmargin: 0;\r\n\t\twidth: 100%;\r\n\t\t& + & {\r\n\t\t\tmargin-top: 1rem;\r\n\t\t}\r\n\t}\r\n\t&:hover {\r\n\t\ttransform: translateY(-8px);\r\n\t\tbox-shadow: 0 12px 20px 0 rgba(0, 0, 0, 0.08);\r\n\t\t${mediaQuery(1024)} {\r\n\t\t\ttransform: none;\r\n\t\t}\r\n\t}\r\n\r\n\timg {\r\n\t\tmax-height: 195px;\r\n\t}\r\n`;\r\n\r\nconst ContentContainer = styled.div<{ clamp: boolean }>`\r\n\tpadding: 1rem;\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\tflex-direction: column;\r\n\tbackground-color: white;\r\n\tz-index: 3;\r\n\th4 {\r\n\t\tfont-size: 1rem;\r\n\t\tmargin: 0;\r\n\t\tmargin-bottom: 0.25rem;\r\n\t\tline-height: 1.5;\r\n\t\tword-break: break-word;\r\n\t\t${ellipsis}\r\n\t\tcolor: ${palette.gray[9]};\r\n\t\t${mediaQuery(767)} {\r\n\t\t\twhite-space: initial;\r\n\t\t}\r\n\t}\r\n\t.description-wrapper {\r\n\t\tflex: 1;\r\n\t}\r\n\tp {\r\n\t\tmargin: 0;\r\n\t\tword-break: break-word;\r\n\t\toverflow-wrap: break-word;\r\n\t\tfont-size: 0.875rem;\r\n\t\tline-height: 1.5;\r\n\t\t${(props) =>\r\n\t\t\tprops.clamp &&\r\n\t\t\tcss`\r\n\t\t\t\theight: 3.9375rem;\r\n\t\t\t\tdisplay: -webkit-box;\r\n\t\t\t\t-webkit-line-clamp: 3;\r\n\t\t\t\t-webkit-box-orient: vertical;\r\n\t\t\t\toverflow: hidden;\r\n\t\t\t\ttext-overflow: ellipsis;\r\n\t\t\t`}\r\n\r\n\t\tcolor: ${palette.gray[7]};\r\n\t\tmargin-bottom: 1.5rem;\r\n\t}\r\n\t.sub-info {\r\n\t\tfont-size: 0.75rem;\r\n\t\tline-height: 1.5;\r\n\t\tcolor: ${palette.gray[6]};\r\n\t}\r\n`;\r\n\r\ninterface Props {\r\n\tpost: PostType;\r\n}\r\n\r\nexport default function PostCard({ post }: Props) {\r\n\treturn (\r\n\t\t<Container to={`${post.path}`}>\r\n\t\t\t{post.image && <GatsbyImage image={post.image} alt={post.title} />}\r\n\t\t\t<ContentContainer clamp={!post.image}>\r\n\t\t\t\t<h4>{post.title}</h4>\r\n\t\t\t\t<div className=\"description-wrapper\">\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t{post.description.replace(/&#x3A;/g, \":\")}\r\n\t\t\t\t\t\t{post.description.length === 150 && \"...\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"sub-info\">\r\n\t\t\t\t\t<span>{formatDate(post.released_at, post.lang)}</span>\r\n\t\t\t\t\t{post.updated_at && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t{post.lang === \"ko\" ? \"수정: \" : \"Last edited at\"}{\" \"}\r\n\t\t\t\t\t\t\t\t{formatDate(post.updated_at, post.lang)}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</ContentContainer>\r\n\t\t</Container>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { mediaQuery } from \"../../libs/styles/media\";\r\nimport { PostType } from \"../../types/Common\";\r\nimport PostCard from \"./PostCard\";\r\n\r\nconst Container = styled.div`\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\tflex-wrap: wrap;\r\n\tmargin: 0 -1rem -1rem;\r\n\r\n\t${mediaQuery(767)} {\r\n\t\tmargin: 0.25rem;\r\n\t}\r\n`;\r\n\r\ninterface Props {\r\n\tposts: PostType[];\r\n}\r\n\r\nexport default function PostCardGrid({ posts }: Props) {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t{posts.map((post) => (\r\n\t\t\t\t<PostCard post={post} />\r\n\t\t\t))}\r\n\t\t</Container>\r\n\t);\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport { reshapePost } from \"../../libs/list/reshape\";\r\nimport { PostListAllMarkdownRemark } from \"../../types/Common\";\r\nimport PostCardGrid from \"./PostCardGrid\";\r\n\r\ninterface Props {\r\n\tlang: string;\r\n\tcategory: string | null;\r\n}\r\n\r\ntype QueryType = {\r\n\tallMarkdownRemark: PostListAllMarkdownRemark | null;\r\n};\r\n\r\nexport default function PostList({ lang, category }: Props) {\r\n\tconst { allMarkdownRemark } = useStaticQuery<QueryType>(graphql`\r\n\t\t{\r\n\t\t\tallMarkdownRemark(\r\n\t\t\t\tfilter: { frontmatter: { is_private: { eq: false } } }\r\n\t\t\t\tsort: { frontmatter: { released_at: DESC } }\r\n\t\t\t) {\r\n\t\t\t\tnodes {\r\n\t\t\t\t\tfrontmatter {\r\n\t\t\t\t\t\tdescription\r\n\t\t\t\t\t\ttitle\r\n\t\t\t\t\t\treleased_at\r\n\t\t\t\t\t\tupdated_at\r\n\t\t\t\t\t\tlang\r\n\t\t\t\t\t\tcategory\r\n\t\t\t\t\t\timage {\r\n\t\t\t\t\t\t\tchildImageSharp {\r\n\t\t\t\t\t\t\t\tgatsbyImageData(width: 320, quality: 100)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfields {\r\n\t\t\t\t\t\tslug\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t`);\r\n\tconst posts = useMemo(\r\n\t\t() =>\r\n\t\t\treshapePost(allMarkdownRemark)\r\n\t\t\t\t.filter((post) => post.lang === lang)\r\n\t\t\t\t.filter((post) => (category ? post.category === category : true)),\r\n\t\t[allMarkdownRemark, category, lang],\r\n\t);\r\n\r\n\tif (!allMarkdownRemark) return null;\r\n\treturn <PostCardGrid posts={posts} />;\r\n}\r\n","import {\r\n\tPostListAllMarkdownRemark,\r\n\tPostType,\r\n\tSeriesListAllMarkdownRemark,\r\n\tSeriesType,\r\n} from \"../../types/Common\";\r\n\r\nexport const reshapePost = (allMarkdownRemark: PostListAllMarkdownRemark): PostType[] => {\r\n\tif (!allMarkdownRemark) return [];\r\n\r\n\treturn allMarkdownRemark.nodes.map((node) => ({\r\n\t\tpath: node.fields.slug,\r\n\t\ttitle: node.frontmatter.title,\r\n\t\tdescription: node.frontmatter.description,\r\n\t\treleased_at: node.frontmatter.released_at,\r\n\t\tupdated_at: node.frontmatter.updated_at || undefined,\r\n\t\timage: node.frontmatter.image\r\n\t\t\t? node.frontmatter.image.childImageSharp.gatsbyImageData\r\n\t\t\t: null,\r\n\t\tlang: node.frontmatter.lang,\r\n\t\tcategory: node.frontmatter.category,\r\n\t}));\r\n};\r\n\r\nexport const reshapeSeries = (allMarkdownRemark: SeriesListAllMarkdownRemark): SeriesType[] => {\r\n\tif (!allMarkdownRemark) return [];\r\n\r\n\treturn allMarkdownRemark.group.map((each) => ({\r\n\t\tpath: `/series/${each.fieldValue.replace(/ /gi, \"-\")}`,\r\n\t\ttitle: each.fieldValue,\r\n\t\timage: each.nodes[0].frontmatter.image\r\n\t\t\t? each.nodes[0].frontmatter.image.childImageSharp.gatsbyImageData\r\n\t\t\t: null,\r\n\t\treleased_at: each.nodes[0].frontmatter.released_at,\r\n\t\tupdated_at: each.nodes[0].frontmatter.updated_at || undefined,\r\n\t\tlang: each.nodes[0].frontmatter.lang,\r\n\t\ttotalCount: each.totalCount,\r\n\t}));\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport { PageProps } from \"gatsby\";\r\nimport SEO from \"../../components/SEO\";\r\nimport PostList from \"../../components/post/PostList\";\r\n\r\nexport default function HomePage({ location }: PageProps) {\r\n\tconst params = useMemo(() => new URLSearchParams(location.search), [location.search]);\r\n\tconst category = useMemo(() => params.get(\"category\"), [params]);\r\n\r\n\treturn <PostList lang=\"en\" category={category} />;\r\n}\r\n\r\nexport function Head() {\r\n\treturn <SEO title=\"Home\" />;\r\n}\r\n"],"names":["_ref","title","description","pathname","created_at","updated_at","image","children","site","useStaticQuery","seo","author","siteMetadata","siteUrl","url","useEffect","console","log","React","name","content","property","rel","href","undefined","type","JSON","stringify","logo","headline","datePublished","dateModified","async","src","crossOrigin","Container","styled","Link","withConfig","displayName","componentId","mediaQuery","ContentContainer","div","ellipsis","palette","gray","props","clamp","css","PostCard","post","to","path","GatsbyImage","alt","className","replace","length","formatDate","released_at","lang","PostCardGrid","posts","map","PostList","category","allMarkdownRemark","useMemo","reshapePost","filter","nodes","node","fields","slug","frontmatter","childImageSharp","gatsbyImageData","reshapeSeries","group","each","fieldValue","totalCount","HomePage","location","params","URLSearchParams","search","get","Head","SEO"],"sourceRoot":""}