<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[millo's tech blog]]></title><description><![CDATA[millo's tech blog]]></description><link>https://millo-L.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 07 Dec 2023 01:07:19 GMT</lastBuildDate><item><title><![CDATA[[React Native] realm one-to-many relationship 적용하기]]></title><description><![CDATA[react native 앱에서 realm local db의 one-to-many relationship에 대해 알아보자.]]></description><link>https://millo-L.github.io/reactnative-realm-one-to-many-relationship-2023-05-26/</link><guid isPermaLink="false">https://millo-L.github.io/reactnative-realm-one-to-many-relationship-2023-05-26/</guid><pubDate>Fri, 26 May 2023 03:30:00 GMT</pubDate><content:encoded>1. 서론 사이드 프로젝트로 만든 It&apos;s meee(ios, android)앱에서 기존에는 AsyncStorage를 이용해서 meee와 일기를 저장했는데 더 나은 저장방식을 고려해보다가 realm을 선택하게 됐다. realm은 이미 android, ios에서 로컬 디비를 사용할 때는 종종 선택되는 디비 중 하나였는데, 최근에 react native에도 적용이 쉽게 @realm/react 패키지가 추가돼서 사용해보게 됐다. 다만, 공식 문서에서 명시한대로 개발을 따라가게 되면 one-to-many 방식에서 에러가 발생해서 그것에 대한 적당한 해결방법으로 이 글을 적게 됐다. 2. one-to-many 적용 방법 우선 공식문서를 따라서 내가 작성한 프로젝트 코드를 먼저 보도록 하자. 2-1. 화면으로 플로우 이해하기 왼쪽 화면이 생성한 meee 리스트 화면이고 meee를 클릭하여 오른쪽 화면에서 그 meee에 해당하는 일기를 적거나 적었던 일기를 읽는 플로우다. 따라서, avatar(meee) 모델과 diary(일기) 모델을 one-to-many 관계로 생성해야한다.  2-2. 모델 구성하기 [👋 잠깐] 개발 환경 react-native 0.71.8 
realm 11.9.0 
@realm/react 0.4.3  2-2-1. avatar 모델 모든 부분은 공식문서에도 잘 나와있으므로 우선 생략하고, diaries 변수가 diary 모델과 one-to-many 관계로 연결된 부분이다. 타입은 rleam에서 만든 타입으로 Realm.List&lt;Diary&gt;를 사용한다. 2-2-2. diary 모델 diary에서는 아바타에 대한 정보를 가지고 있을 필요가 없으므로 별도 변수가 필요하진 않다. 만약 관련된 변수가 필요하다면 공식문서를 따라서 진행하면 된다. 2-2-3. RealmContext 생성 2-2-4. RealmProvider 적용 이제 모델을 모두 생성했으므로 하위 컴포넌트들 모두에서 해당 모델들을 사용할 수 있게 App.tsx에서 다른 JSX…</content:encoded></item><item><title><![CDATA[[React Native] Solving realm one-to-many relationship issue]]></title><description><![CDATA[Let's find out about one-to-many relationship of real local db in the react native app.]]></description><link>https://millo-L.github.io/reactnative-realm-one-to-many-relationship-2023-05-26-en/</link><guid isPermaLink="false">https://millo-L.github.io/reactnative-realm-one-to-many-relationship-2023-05-26-en/</guid><pubDate>Fri, 26 May 2023 03:30:00 GMT</pubDate><content:encoded>1. Introduction While developing with one-to-many relationship structure in realm, I found an &apos;[TypeError: Cannot read property &apos;push&apos; of undefined]&apos; error and solve the issue. So, I write this article to share the solution. 2. One-to-many relationship in realm Let&apos;s follow the official document and look at the project code I wrote first. 2-1. Understanding Flows on the Screen The left screen is the avatar list screen generated, and it is a flow of writing or reading a diary that corresponds to the avatar on the right screen by clicking avatar. Therefore, the avatar model and the diary model should be created in a one-to-many relationship.  2-2. Models [👋 Wait] Version Info react-native 0.71.8 
realm 11.9.0 
@realm/react 0.4.3  2-2-1. avatar model All parts are well documented, so it is omitted, and the diaries variable is connected to the diary model in a one-to-many relationship. The type uses Realm.List&lt;Diary&gt;, a type made by rlem. 2-2-2. diary model In the diary, there is no need…</content:encoded></item><item><title><![CDATA[[React Native] @react-native-firebase 적용하기 (pod install 에러 해결)]]></title><description><![CDATA[react native 앱에서 firebase 설치 시 pod install 오류를 해결해보자.]]></description><link>https://millo-L.github.io/ReactNative-Firebase-2023-05-25/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-Firebase-2023-05-25/</guid><pubDate>Thu, 25 May 2023 06:30:00 GMT</pubDate><content:encoded>1. 서론 기존에 react native 0.63.4 버전으로 프로젝트들을 진행하다가 최근 구글 플레이 스토어의 안드로이드 sdk 버전 상향 조정으로 인한 이슈가 많았어서 아예 0.71.8 버전으로 업그레이드를 진행하게 됐다. 이 때 기타 라이브러리들도 업데이트를 진행하게 됐는데, react-native-firebase를 최신 버전으로 업데이트 하던 중 발생한 이슈를 해결한 방법을 정리하고자 이 글을 적는다. 2. 설치 방법 설치 방법 자체는 공식 사이트에 나와있는대로 진행하면 된다. [👋 잠깐] 개발 환경 react-native 0.71.8 
@react-native-firebase/app 17.5.0  3. 해결 방법 중요한 부분은 이 부분인데 firebase-ios-sdk v9+ (react-native-firebase v15+) 버전 부터는 해당 링크의 아래 부분을 따라해야한다고 적혀있다. 하지만 이상하게도 그렇게 처리해도 에러가 계속해서 발생한다. 만약 아래의 방식대로 하지 않고,  등을 추가하여 해결하려 하면, 설치 후 앱이 실행되기는 하지만 firebase가 제대로 실행되지 않는 이슈가 생기므로 꼭 아래의 방식으로 진행해야한다. 해결 방법은  파일에 아래의 코드를 추가하는 것이다.</content:encoded></item><item><title><![CDATA[[React Native] Install @react-native-firebase (solve pod install issue)]]></title><description><![CDATA[Solving react-native-firebase pod install issue.]]></description><link>https://millo-L.github.io/ReactNative-Firebase-2023-05-25-en/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-Firebase-2023-05-25-en/</guid><pubDate>Thu, 25 May 2023 06:30:00 GMT</pubDate><content:encoded>1. Introduction I write this article to summarize how I solved the issue that occurred while setting react-native-firebase to the latest version. 2. Installation You can proceed with the installation method as shown on the official site. [👋 Wait] Version Info react-native 0.71.8 
@react-native-firebase/app 17.5.0  3. Solution According to the official site, beginning with firebase-ios-sdk v9+ (react-native-firebase v15+) you must tell CocoaPods to use frameworks.
Strangely, however, errors continue to occur even if you do what the official site tells you to do. The solution is to add the following code to the  file.</content:encoded></item><item><title><![CDATA[[Start up] 스타트업 개발자의 허심탄회한 이야기 (커뮤니케이션)]]></title><description><![CDATA[스타트업 개발자의 커뮤니케이션 이야기]]></description><link>https://millo-L.github.io/Startup-dev-05/</link><guid isPermaLink="false">https://millo-L.github.io/Startup-dev-05/</guid><pubDate>Sat, 14 May 2022 03:30:00 GMT</pubDate><content:encoded>12. 언제 그렇게 정해졌다고요...? 두 명 이상이 함께 무언가를 이뤄낼 때 가장 중요한 것이 뭘까?
라고 묻는 다면 지금의 나는 커뮤니케이션이라고 말할 것이다.
모든 기업에서 무언가를 결정하기 위해서는 회의를 진행한다. 우리도 하나의 기업으로써 많은 회의를 진행해왔고 그 때 생긴 문제점들...그리고 이를 어떻게 해결했는 지에 대해 적어보겠다. 여느 기업들과 마찬가지로 우리도 무언가를 결정하기 위해서 회의를 진행해왔다.
하지만 여느 기업들과 다른 점이 있었다면 아마도 회의 후에 모두가 생각하는 결론이 조금씩 차이가 있었다는 점이었다. 이는 매우 큰 문제다. 서로 생각하는 결론에 조금이라도 차이가 있으면 올바른 방향으로 구성원 모두가 나아가지 않고 있다고 이야기할 수 있기 때문이다. 조금 이과적인 말일 수 있지만, 수학에서 배우는 벡터라는 개념을 도입해봤을 때 같은 방향의 벡터는 더했을 때 같은 방향으로 같은 양만큼 증가한다.
하지만 다른 방향의 벡터들을 더하면 방향도 두 방향 사이의 특정 방향으로 틀어지게 되고 양도 둘을 더한 값보다 작아지게 된다. 문과적으로도 풀어주자면 배를 함께 탄 사람들이 서로 조금씩 다른 방향으로 노를 젓고 있다고 상상해보자.
그 배가 원하는 방향으로 제대로 가겠는 가?</content:encoded></item><item><title><![CDATA[[Start up] 스타트업 개발자의 허심탄회한 이야기 (우선순위)]]></title><description><![CDATA[스타트업 개발자의 우선순위 이야기]]></description><link>https://millo-L.github.io/Startup-dev-04/</link><guid isPermaLink="false">https://millo-L.github.io/Startup-dev-04/</guid><pubDate>Sat, 14 May 2022 02:50:00 GMT</pubDate><content:encoded>10. 무엇을 먼저 개발해야 할까요? 초기 스타트업의 특징 중 가장 큰 부분은 아직 체계가 잡혀있지 않다는 점이다.
이 부분은 매우 큰 장점이자 단점으로 작용할 수 있는 데,
장점은 체계가 없으므로 모두가 자유롭게 자신의 능력을 펼칠 수 있다는 점이고,
단점은 업무의 비효율성이 증가할 수 있다는 점이다. 모든 스타트업들, 더 나아가서 모든 기업들이 모두 같은 기업 문화를 가지고 있지 않다는 사실은 자명한 사실이다.
그 이유는 각 기업들이 성장하면서 자신들에게 맞는 최적의 방법으로 체계를 확립해나갔기 때문이라고 필자는 생각한다. 그렇다면 이 체계를 만들어가는 것은 얼마나 중요할까? 나는 개발자이기 때문에 모두의 관점으로 바라볼 순 없으나 초기 스타트업부터의 경험을 토대로 글을 작성해보겠다. 내가 경험한 가장 큰 문제점은 모두가 개발자에게 무엇을 우선순위 없이 요구한다는 것이다.
이는 개발자에게는 참 난감한 상황이다. 모두가 자신이 제시한 의견이 중요하고 빠르게 실행됐으면 좋겠다고 생각하지만
실제로 개발할 수 있는 인원은 적은 게 현실이다. 우선순위가 정해지지 않은 상태에서 개발자들은 A라는 업무를 하는 도중 B라는 업무를 하다가 다시 A라는 업무를 하다가 C라는 업무를 하는 경우가 생긴다. (경험담이다...)
이는 개발자들에게 단지 지금하는 일을 멈췄다가 다시 시작하는 것을 넘어서서 매우 불편한 일이다. [여기서 잠깐👋🏻] Context Switching 이란? (비개발자용) 책을 읽다가 책갈피를 꽂아놓고 시간이 지난 후 다시 읽을 때, 지난 내용들의 흐름을 다시 이해하기 위해 조금 전 글 혹은 조금 전 페이지로 돌아가서 다시 읽기 시작했던 경험 다들 있으시죠? 코딩에서도 마찬가지로 해당 기능을 완전히 개발하지 않고, 마무리 짓지 못한 채로 놔두게 되면 완전히 개발했을 때보다 오히려 코드를 다시 이해하는 시간이 오래 걸려 유지 보수 혹은 기능 개발 시간이 길어지는 오버헤드가 발생하게 됩니다. 개발적인 용어를 쓰자면 &apos;Context Switching…</content:encoded></item><item><title><![CDATA[[Start up] 스타트업 개발자의 허심탄회한 이야기 (첫 회의)]]></title><description><![CDATA[스타트업 개발자의 첫 개발 회의]]></description><link>https://millo-L.github.io/Startup-dev-03/</link><guid isPermaLink="false">https://millo-L.github.io/Startup-dev-03/</guid><pubDate>Sat, 19 Feb 2022 02:20:00 GMT</pubDate><content:encoded>8. 프론트 개발자 첫 회의 우선 배경을 이야기하자면 프릭스 헬스케어는 나와 포비를 제외한 모든 개발자가 비전공자 대학생들이었다.
모든 비전공자 개발자들이 그렇다고 할 순 없겠지만, 그 때 개발자들은 타입에 대한 이해도가 높지 않았다.
그걸 기반으로 회의가 진행됐고, 일단 리팩토링이 너무 절실했기 때문에 몇 가지 안건에 대해 회의를 했다. 1. 타입스크립트를 사용하는 이유 첫 회의 안건은 타입스크립트를 사용하는 이유였다. react-native와 typescript로 프로젝트를 만들었지만 모든 타입은 any였다.
그 때 생각을 하면 머리가 어질어질하다. 모두가 타입스크립트가 좋다고 하니까 사용했다는 답변을 듣고 타입이 필요한 이유에 대해 설명하기 시작했다. 타입 언어는 비타입 언어에 비해 코드 생산성, 코드 리뷰 및 협업에서 매우 강한 강점을 가질 수 있다.
js의 특성상 object를 사용하는 경우가 매우 많은 데 만약 남이 짠 코드에서 object의 타입이 적혀있지 않다면...
상상도 하기 싫다. 그 코드를 쭉 따라가서 어떤 오브젝트가 있는 지 일일이 확인해야한다.
비타입언어는 그 나름의 매력이 있다고 생각하지만 개인적으로 비타입언어는 협업에 있어 너무 많은 단점이 존재한다고 생각한다. 나는 특정 기능 부분을 올바른 타입스크립트 형식으로 리팩토링한 후 예시를 들어가며 설명을 해줬고, 팀원들과 해당 형식으로 리팩토링을 하기로 결정했다. 2. MobX를 사용하는 이유 두 번째 안건은 redux, redux-toolkit, context api 등 다른 상태관리 툴이 아닌 mobx를 사용하기로 결정한 이유였다.
이 때의 답변은 러닝커브가 낮아서였다. 답변을 듣고 나는 별다른 말을 할 수가 없었다. 적어도 기능 비교 정도는 해봤을 줄 알고 이야기를 시작한 것이었는 데, 그저 쉬워서라는 답변이 말문을 막히게 했다. 그래서 일단 MobX로 계속 사용해보고 다른 문제점이 생기면 변경하기로 했다. (UI…</content:encoded></item><item><title><![CDATA[[Start up] 스타트업 개발자의 허심탄회한 이야기 (시작)]]></title><description><![CDATA[스타트업 개발자의 인터뷰 및 합류 스토리]]></description><link>https://millo-L.github.io/Startup-dev-02/</link><guid isPermaLink="false">https://millo-L.github.io/Startup-dev-02/</guid><pubDate>Sun, 13 Feb 2022 04:40:00 GMT</pubDate><content:encoded>5. 프릭스 헬스케어 개발자들과의 미팅 킹밥(기획자)과의 연락을 시작으로 프릭스 헬스케어의 개발자 두 분과 토토로(대표)와 구글 meet를 사용한 미팅이 잡혔다.
킹밥이 서비스에 대한 설명이 작성된 노션 페이지 링크를 전달해줘서 전체적인 서비스에 대한 설명은 미리 알 수 있었다.
간단하게 소개하자면 프릭스 헬스케어는 영유아 건강관리 서비스로 아이의 건강관리를 한 앱에서 모두 처리할 수 있게 하는 서비스이다.
그 때 당시에는 버전 1이 배포된 상태여서 현재 버전 2와는 다르지만 일단 소개하자면 여기를 눌러서 확인할 수 있다. 미팅이 시작되고 우선 먼저 우리들이 해왔던 프로젝트들에 대한 질문을 받았고, 이해하기 쉽게 포트폴리오를 정리해둔 노션 페이지 링크를 전달하며 대화를 나눴다.
그 후에는 현재 프릭스 헬스케어에서 사용하고 있는 기술 스텍들에 대해 이야기를 나눴다. 당시 웹 페이지는 react, typescript 기반으로 작성되고 상태 관리에는 MobX를 사용하고 있었고, 앱은 react native, typescript 기반과 상태 관리에 MobX를 사용하고 있었다.
백엔드는 Go와 python으로 작성되고 docker와 docker swarm, aws로 서버를 관리하고 있었다. 기술 스택 이후에는 회사의 비전과 성장 방향을 공유했고, 다음에 회사를 방문해서 시스템 구조와 코드들을 구경하기로 했다. 가벼운 미팅이었지만 프로그래밍에 대한 사랑과 열정이 느껴졌고 우리도 매우 재밌는 미팅으로 느껴졌다.…</content:encoded></item><item><title><![CDATA[[Start up] 스타트업 개발자가 된 계기]]></title><description><![CDATA[스타트업 개발자로 진로를 정한 계기에 대해 적어둔다.]]></description><link>https://millo-L.github.io/Startup-dev-01/</link><guid isPermaLink="false">https://millo-L.github.io/Startup-dev-01/</guid><pubDate>Sat, 12 Feb 2022 03:40:00 GMT</pubDate><content:encoded>1. 서론 프릭스 헬스케어에 들어온지 벌써 8개월이 지났다. 그간 많은 일들이 있었고, 느꼈던 일들 성장한 일들을 적어두고자 이 포스팅을 적는다. 혹여나 스타트업에 들어가 꿈을 펼치고 싶어하는 개발자들이나 개발자가 아니더라도 개발자들과 의사소통해야하는 많은 기획자, 마케터, 그리고 디자이너분들도 재밌게 읽고 아~ 이런 상황도 생길 수 있구나 정도로 생각해주면 좋을 것 같다. 2. 스타트업에 합류한 계기 사실 나 또한 여느 개발자들처럼 일반적인 대기업에 종사하길 원한 적이 있다. 대학교 1, 2학년쯤에는 삼성전자를 희망했고 3학년에 이르러서는 네카라쿠배당이 급부상하면서 시리즈B, C 정도를 받은 개발자들에게 좋은 환경이 주어지는 기업을 가고 싶어했다. 그랬던 내가 스타트업을 시작하고 싶다고 생각한 계기는 학교에서의 여러 프로젝트 때문이다. 나는 세종대학교 컴퓨터공학과에 진학한 후 여느 컴공 전공자들과 비슷한 삶을 살았다. 학교 학점에 충실하고, 성적 우수 장학금을 받고, 꽤 열심히 학교 생활을 했다. 그러던 중 2학년 웹프로그래밍 수업에서 후배지만 정말 잘 맞는 좋은 동료이자 친구를 만나 함께 같은 수업을 신청하고 같이 프로젝트를 진행하다가 스타트업의 꿈을 꾸게 됐다. 교내 대회에서 매번 1등(교차로 보행자 안전 알리미, AI 온라인 시험 부정행위 검출 시스템)을 차지하기도 했고, 이렇게 팀을 만들면 일이 힘들더라도 정말 재밌겠다는 생각이 들었기 때문이다.(사실 30살 전에는 망해도 괜찮다는 마인드도 있었다.) 사실 그 친구는 대학원 진학을 꿈꿨는 데, 내가 스타트업을 하자고 꼬드겨서 나와 함께 하게 됐다...하하... 그 친구는 학교…</content:encoded></item><item><title><![CDATA[[React Native] Kakao Link를 사용해서 Deep link를 구현해보자.]]></title><description><![CDATA[react-native-kakako-share-link를 사용해서 딥링크를 구현해보자.]]></description><link>https://millo-L.github.io/ReactNative-kakao-deep-link/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-kakao-deep-link/</guid><pubDate>Sun, 05 Sep 2021 11:45:00 GMT</pubDate><content:encoded>1. 서론 이번에 앱 내에 발달 놀이터라는 커뮤니티 형태의 기능이 들어가게 됐는 데, 이에 따른 공유하기 기능과 해당 공유를 눌렀을 경우 앱에서 해당 화면으로 바로 이동할 수 있게 하는 코드를 작성했다. 작업 도중 해당 기능을 구현하는 방식에 대해 공부하게 됐고, react-navigation과 react-native-kakao-share-link를 사용해서 구현했다. 크게 어려운 부분은 없고 해당 기능을 처음 사용해보는 사람들을 위해 포스팅을 작성한다. 2. Deep Link란? 자세한 설명은 여기서 확인해보기 바란다. 간단하게 설명하자면 웹 브라우저 환경에서 DNS가 존재하는 것처럼 모바일 환경에서 특정 앱을 실행시키거나, 특정 앱의 특정 페이지로 이동시키는 주소 혹은 값이다. 방식에서는 크게 세 가지가 있다. URI 스킴 방식: 앱에 URI 스킴(scheme) 등록해서 사용 앱 링크(App Link): 도메인 주소를 등록해서 사용 (Android only) 유니버셜 링크(Universal Link): 도메인 주소를 등록해서 사용 (iOS only) 2-1. URI 스킴 방식 URI 스킴 방식은 현재까지 가장 많이 사용하는 방식으로, 가장 초기에 나온 방식이며 앱에 scheme을 등록하는 형태로 각 앱을 구분한다. 방식은 Scheme://Path 형태이고 경우에 따라 query(?name=millo)가 붙기도 한다. Scheme: 앱을 특정 (twitter) Path: 앱 내 페이지를 특정 (트위터 내 특정 페이지) query: 해당 페이지로 넘겨줄 값 (선택) URI 스킴 방식은 완벽할까? 정답은 아니다. 그렇다면 뒤의 앱 링크와 유니버셜 링크는 세상에 나올 필요가 없었을 것이다. URI 스킴 방식의 가장 큰 단점은 무수히 많은 앱들이 생성됨에 따라 Scheme이 중복되는 문제이다. 현재 Scheme이 중복되는 지 검사할 수 있는 방식은 없다. 하지만, 매우 유니크하게 scheme…</content:encoded></item><item><title><![CDATA[[React Native] 원격 배포를 위한 CI/CD 툴 선택]]></title><description><![CDATA[react native 원격 배포를 위한 CI/CD 툴을 비교하고 선택해보자.]]></description><link>https://millo-L.github.io/ReactNative-ci-cd-tool/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-ci-cd-tool/</guid><pubDate>Sun, 15 Aug 2021 05:02:00 GMT</pubDate><content:encoded>1. 서론  지난 포스팅까지 읽었다면 로컬 환경에서 배포 자동화하는 법에 대해서는 어느 정도 이해가 생겼을 것 같다. 하지만 로컬에서 배포를 진행한다는 것은 생각보다 유쾌하지만은 않다. 내 맥북이 그렇게 사양이 좋지 않은 문제도 있지만 안드로이드와 iOS 배포를 진행하는 데 걸리는 시간이 30분 이상 소요됐다. 물론 CPU 점유율이 높은 Android와 iOS 각각의 빌드 시기 이후인 배포 단계에서는 다른 작업을 진행할 수 있지만. 빌드 단계에서는 CPU 점유율이 99%까지 올라가서 다른 작업을 맥북에서 진행하기가 힘들 정도가 된다. 이런 문제점들을 해결하기 위해 원격 배포를 도입하고자 했고 CI/CD 툴을 고려하게 됐다. 2. 원격 환경 선택 2-1. AWS 우리 회사는 기존에 지원받은 AWS 크레딧이 있어서 우선 AWS에서 맥 환경을 지원하는 지 여부부터 조사해봤다. 조사 결과는 와우! 작년 2020년부터 Mac환경을 제공한다는 공식 홈페이지를 보고 바로 자세히 찾아보기 시작했지만 선택하지 못했던 이유는... 가격 뭐니뭐니해도 스타트업에서 가장 중요한 건 번레이트를 줄이는 것이다. 하지만 AWS Mac 인스턴스를 사용하게 되면 이 비용으로만 한 달 고정 지출이 988.42USD(= 120만원) 추가된다... 말도 꺼낼 수 없는 금액이어서 당연히 포기했다.  지역 위의 이미지에서 보이겠지만 Seoul 지역을 지원하지 않는다. 사용자들의 request를 받는 일반 서버에 비해 배포 서버의 위치는 그다지 중요하지 않은 요소지만 위의 가격 문제가 생긴 터라 서울을 지원하지 않는 다는 사실도 괜히 괘씸했다랄까... 그림에 떡이었다랄까... 기분이 별로 좋지 않았다. 이러한 이유들로 깔끔하게 아무 아쉬움 없이 AWS는 포기해버렸다! 2-2. Circle CI AWS를 포기하고 빌드 서버를 제공해주는 CI 툴들 중에 Circle CI가 Mac을 지원한다는 사실을 알고 자세하게 찾아봤다. .circleci/config.yml을 작성해두고 Github…</content:encoded></item><item><title><![CDATA[[React Native] Fastlane Slack 연동]]></title><description><![CDATA[Fastlane에 Slack을 연동해서 배포 단계에 대한 알림을 설정해보자.]]></description><link>https://millo-L.github.io/ReactNative-fastlane-slack/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-fastlane-slack/</guid><pubDate>Sat, 14 Aug 2021 08:35:00 GMT</pubDate><content:encoded>1. 서론 Fastlane을 사용해서 배포 자동화를 수행하게 되면 React Native를 매우 수월하게 각각의 스토어(App Store, Play Store)에 배포할 수 있다. 로컬 환경에서 Fastlane을 구동하게 되면 배포 과정이 어느 정도 진행됐는 지를 터미널에 찍히는 로그들로 알 수 있지만, 원격 서버에서 Fastlane을 사용하게 되면 진행 상황에 대한 정보를 얻기가 쉽지 않다. 이를 위해서는 Slack 또는 이메일 연동을 진행해야 하는 데, 이미 사내에서 쓰고 있는 Slack을 선택하게 됐다. 2. 방법 방법은 매우 간단하다. Slack에서 원하는 채널을 선택해서 Webhook을 설정하고, 해당 url을 통해서 요청을 보내면 해당 메세지가 전달되는 방식이다. https://my.slack.com/services/new/incoming-webhook/ 에 들어가서 아래의 설정을 시작한다. 2-1. Slack Webhook 설정 위의 url로 접근하면 이런 페이지가 나온다. 원하는 채널을 선택하고 버튼을 누른다.  이 페이지에서는 Webhook 요청에 대한 설명들이 나와있다. 쭉 읽어봐도 좋지만, Fastlane에서는 이미 Slack 형식에 맞게 함수가 준비되어 있으므로 우리는 아래의 Webhook URL만을 복사해두고 버튼을 누르도록 하자.  2-2. Fastlane에 적용 적용하는 방식은 iOS와 Android 모두에서 동일하므로 지난 번 포스팅에서 만든 iOS용 Fastfile에 적용해보도록 하겠다. 1. before_all 처리 before_all 전처리 함수를 통해서 모든 단계 시작 전 환경변수로 아까 복사해둔 Webhook URL을 설정해둔다. 2. after_all 처리 after_all 후처리 함수를 통해서 모든 단계가 종료된 후 Slack으로 메세지를 보낸다. messge 부분에 알림 받고 싶은 메세지를 작성하면 된다. slack 함수의 성공 여부는 default가 true 이다. 만약, false…</content:encoded></item><item><title><![CDATA[[React Native] Fastlane match를 사용한 iOS 인증서 동기화]]></title><description><![CDATA[팀 단위의 iOS 개발 및 배포에 필요한 인증서 문제를 Fastlane match로 해결해보자.]]></description><link>https://millo-L.github.io/ReactNative-fastlane-match/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-fastlane-match/</guid><pubDate>Sun, 08 Aug 2021 11:35:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅에서 iOS와 Android에 fastlane을 적용하는 방법에 대해 알아봤다. 이렇게 설정만 하고 모든 것이 완벽하고 아름답게 마무리 됐으면 얼마나 좋겠냐만은... 현실은 그렇지 않았다.(만약, 팀 단위가 아니라 혼자 개발한다면 fastlane match는 필요하지 않을 수 있다.) 가장 문제가 됐던 부분이 어떤 Mac 환경에서는 해당 Code Signing으로 iOS 배포가 되는 데 다른 Mac 환경에서는 안되는 상황의 반복이었다. 처음에는 그저 인증서와 Provisioning profiles가 엉켜서 그렇겠거니 했지만... 수없이 반복해도 상황은 변하지 않았다. 그러던 와중 fastlane match라는 방식을 알게됐고 현재는 매우 유용하게 프론트 개발팀에서 사용하고 있다. 2. fastlane match란? 자세한 사항은 공식문서와 codesigning.guide 페이지를 통해서 알 수 있지만, 꼭 알아야 하는 부분만을 간략하게 설명하도록 하겠다. iOS를 개발 및 배포하기 위해서는 와 , 와 이 필요하다. provisioning 파일에는 기본적으로 , , 가 포함되어 있다. 따라서, 는 com.your.packagename 형식으로 팀원 모두가 동일하지만 와 는 팀원 마다 각자의 Mac이 있을 것이기 때문에 같을 수가 없다. 하지만 그렇다고 배포 인증서와 배포 Provisioning profile을 각자 받는 다고 배포가 원할히 진행되지도 않는다. 이상하게 엉켜버리는 문제가 생기기 때문이다. 위의 문제점을 해결해주는 것이 바로 fastlane match이다. fastlane match…</content:encoded></item><item><title><![CDATA[[React Native] Fastlane을 사용한 배포 자동화]]></title><description><![CDATA[Android와 iOS를 직접 빌드해서 배포했던 과거와 작별하고 Fastlane을 이용한 배포 자동화를 시작해보자.]]></description><link>https://millo-L.github.io/ReactNative-fastlane/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-fastlane/</guid><pubDate>Sun, 08 Aug 2021 07:45:00 GMT</pubDate><content:encoded>1. 서론 사실 순서상 Fastlane에 관한 이 포스팅이 직전에 썼던 CodePush를 이용한 앱 업데이트보다 먼저 나왔어야할 것 같은 데, 내가 지금 회사에 왔을 때 Fastlane을 사용한 자동 배포가 이미 세팅이 돼있는 상태여서 건드리고 있지 않다가, 협업을 위한 Fastlane match 설정과 Mac mini(M1) + Jenkins + Fastlane을 사용한 원격 자동배포를 오늘 마무리 지으면서, 시리즈물로 작성하기 위해 이렇게 포스팅을 시작하게 됐다. 물론 위에서 언급한 내용들은 이번 시리즈에 모두 들어갈 예정이니 기대하기 바란다. 2. Fastlane이란? 공식 사이트에서 말하는 사전적 정의는 직접 확인할 수 있으니 건너뛰도록 하고, 내가 느낀 Fastlane은 ruby 기반 배포 자동화 툴로써, iOS와 Android에 각각 적용 가능한 아주 유용한 툴이다. 무료 오픈소스인 점에서 많은 개발자들이 사용할 수 있고, 이후에 포스팅하겠지만 가장 까다롭게 느껴지는 iOS의 Code Signing 부분을 Fastlane Match라는 기능을 통해서 해소해주는 효자툴이다. 따라서, 사용하지 않을 이유가 없고, 사용해야만 하는 툴이므로 iOS 또는 Android를 배포해야하는 개발자들이라면 반드시 사용해봤으면 한다. 물론, 다른 유료 배포툴보다 뒤쳐지는 면도 있을 수 있지만, 글쓴이는 아직 다른 유료 툴을 경험해보지 않고 직접 배포만을 경험해봤기 때문에 현재 매우 만족스럽게 사용하고 있다. 3. Fastlane 설치 공식문서 
Homebrew가 설치돼있다고 가정한다. 우선 사용에 앞서 Fastlane을 설치해보도록 하자. 글쓴이는 맥을 사용하고 있으므로 mac os 기반으로 설명하겠지만, Windows 환경에서도 Android 배포 시에는 사용가능하다. 4. iOS 설정 4-1. Fastlane 초기화 로 이동한 후 fastlane…</content:encoded></item><item><title><![CDATA[[Android] Runs with Debug version, but fails with Release version]]></title><description><![CDATA[Occasionally, when testing Android in debug mode, it runs, but fails when it is released. Let's find out why.]]></description><link>https://millo-L.github.io/Android-release-error-en/</link><guid isPermaLink="false">https://millo-L.github.io/Android-release-error-en/</guid><pubDate>Thu, 29 Jul 2021 14:50:00 GMT</pubDate><content:encoded>1. Intro Recently, there was a need to develop the sharing function through Kakao Talk on the Reaxt Native mobile app, which is the first open source called react-native-kakao-share-link because there is no open source that works properly in the current app environment. iOS worked successfully in both debug mode and release mode after solving fewer issues in the previous post. The error occurred on Android. It worked perfectly in debug mode, but there was a problem in release mode. I write this post to help people with similar problems and to organize their hard work almost all day long. 2. Cause In conclusion, the reason is that it does not proceed except for Kakao SDK when reducing, obfuscating, and optimizing code during app build (release mode). Android allows you to set up shrinking and optimization to reduce file size during app build (release), and obfuscation to reduce the risk of hacking. Of course, I set it up in the beginning because I wanted to use these good functions, but…</content:encoded></item><item><title><![CDATA[[React Native] Troubleshooting ld: symbol(s) not found for architecture x86_64]]></title><description><![CDATA[Let's find out how to resolve the error ld: symbol(s) not found for architecture x86_64 when running react native ios.]]></description><link>https://millo-L.github.io/ReactNative-ld-symbols-not-found-error-en/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-ld-symbols-not-found-error-en/</guid><pubDate>Thu, 29 Jul 2021 14:10:00 GMT</pubDate><content:encoded>1. Intro This time, the company had to develop a Kakao Link function for the marketing event, but the existing open sources did not work properly, so it developed a new open source. Android worked well, and the problem was iOS, but the error &quot;ld: symbol(s) not found for architecture x86_64&quot; kept coming out and I thought my head was going to explode... I write a posting to see if anyone suffers from the same problem as me. 2. Cause In my case, I developed this open source based on Kakao SDK v2, so Android developed it as kotlin and iOS as swift, which is expected to be the cause of this error because it felt like a version error when building swift. I opened all the existing modules, but it was written in objective-c, not swift, so I thought it would be a swift problem and approached the problem solving. 3. Solution I&apos;ve done this and that. Thinking that the newly created module might be a problem, I tried specifying the swift compilation version in the module&apos;s spec file, and changed…</content:encoded></item><item><title><![CDATA[[React Native] CodePush를 이용한 앱 업데이트]]></title><description><![CDATA[CodePush를 이용해서 react native 앱을 심사 없이 업데이트해보자.]]></description><link>https://millo-L.github.io/ReactNative-codepush/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-codepush/</guid><pubDate>Thu, 29 Jul 2021 12:25:00 GMT</pubDate><content:encoded>1. 서론 Play store는 조금 덜한 편이지만 App store의 심사는 정말 까다롭다. 물론 까다로운 심사 절차에는 많은 장점도 있지만, 당장 배포가 리젝트된 나에게 있어서는 정말 짜증나는 일이 아닐 수 없다. 심지어 저번 심사에서는 언급조차 없던 부분이 다음 심사에서는 갑자기 리젝트 요인이라니... 까라면 까야하지만 정말 힘들다. 이런 짜증들을 해결할 수 있는 방법을 찾아보다가 CodePush라는 것을 알게됐다. 마이크로소프트에서 서비스 중인 오픈 소스인데 javascript 부분에 한해서 심사 없이 배포를 진행해준다. 이미지 등도 함께 지원해주긴 하지만 정확한 정보는 여기서확인하면 된다. 당연한 얘기겠지만 Native를 수정하게 되면 업데이트 한 앱에서 무수한 크래쉬가 날 것이기 때문에,  2. 앱 등록 처음에는 Pricing 태그가 붙어서 유료인 줄 알았는 데, 빌드와 테스트를 수행하면 유료화로 진행되고 그렇지 않고  우선은 https://appcenter.ms/ 에 방문해서 회원가입을 한다. 그 이후 아래와 같이 앱을 iOS, Android로 각각 등록한다. 

 이 부분은 사실 cli를 사용해도 되지만 글쓴이는 웹페이지가 훨씬 편하게 느껴저서 웹페이지로 글을 작성했다. 아래처럼 Antodo-android에 들어가서 distribute -&gt; CodePush에 들어가서 Create를 하고 Antodo-ios도 동일하게 진행한다. 

 위의 이미지처럼 appcenter 세팅을 마쳤다면, appcenter-cli를 설치하고 appcenter에 로그인한다. 2-1. react-native-code-push 설치 및 로그인 이제 를 설치하고 세팅을 진행해보자. 3. Android 설정 3-1. 앱 키 등록 안드로이드를 먼저 세팅해보자. 아래의 그림에서 Antodo-Android를 먼저 선택해보자.  그렇다면 이런 화면이 나올텐데, 이 것만으로도 충분히 친절한 설명이기 때문에 이렇게 세팅을 하면 된다고 하고 넘어가겠다. app_secret…</content:encoded></item><item><title><![CDATA[[Android] Debug 버전으로는 실행되는 데 Release Crash 나는 경우]]></title><description><![CDATA[간혹 안드로이드를 디버그 모드로 테스트할 때는 실행이 되는 데 릴리즈한 후 실행하면 실패하는 경우가 있다. 이런 이유에 대해 알아보자.]]></description><link>https://millo-L.github.io/Android-release-error/</link><guid isPermaLink="false">https://millo-L.github.io/Android-release-error/</guid><pubDate>Fri, 23 Jul 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 최근 앱 내 이벤트 관련하여 리액트 네이티브 환경에서 카카오톡으로 공유하기 기능을 개발할 일이 있었는 데, 현재 앱 환경에서 제대로 동작하는 오픈 소스가 존재하지 않아 react-native-kakao-share-link라는 오픈 소스를 처음으로 만들게 됐다. iOS는 바로 전 포스팅에서 적은 문제를 해결한 후 디버그 모드와 릴리즈 모드 모두에서 성공적으로 작동했는 데 문제는 안드로이드였다. 디버그 모드에서는 완벽하게 작동했는 데 릴리즈 모드에서는 문제가 난 것이다. 거의 하루 종일 삽질한 내용을 정리해두는 겸, 그리고 비슷한 문제를 겪는 사람들에게 도움이 되고자 이 포스팅을 적는다. 2. 원인 결론부터 말하자면 원인은 앱 빌드(릴리즈) 시 코드 축소, 난독화, 최적화를 하는 경우, 카카오 SDK를 제외하고 진행하지 않아서이다. 안드로이드에서는 앱 빌드(릴리즈) 시에 파일 크기를 줄이기 위한 코드 축소와 최적화, 그리고 해킹의 위험을 줄이기 위한 난독화 과정을 설정할 수 있다. 물론, 나도 이 좋은 기능들을 이용하고 싶어서 초기에 설정해뒀었는 데, 사실 그 때는 이렇게 하면 좋다더라~ 하는 글들을 보고 따라서 한 것이지 정확히 무엇인지 모르고 진행했다.(정말 어리석었다고 할 수 있다.) 당연히 모르고 썼던 코드였기 때문에 이게 문제였을 거라고는 꿈도 못 꾼 채 내가 짠 오픈 소스 코드만 계속 수정하는 삽질을 반복했다... 3. 해결 방법 그래서 해결 방법은 무엇인가! 안드로이드를 만든 구글도 코드 축소, 최적화, 난독화 기능을 만들면서 당연히 이 부분을 대비했고, 그래서 만든 것이  파일이다. 대부분은 안드로이드 SDK들은 코드 축소, 최적화, 난독화를 방지하기 위해서 그에 관련한 프로가드 설정을 명시해두기 때문에 각자 사용하고 있는 SDK의 공식문서 설정 부분을 참고하면 될 것이다. 3-1. 예시(나의 경우) 카카오 SDK는 아래의 두 줄을 추가하는 것으로 릴리즈 모드에서의 코드 변형을 방지할 수 있었다.</content:encoded></item><item><title><![CDATA[[React Native] ld: symbol(s) not found for architecture x86_64 해결방법]]></title><description><![CDATA[react native ios 실행 시 ld: symbol(s) not found for architecture x86_64 오류에 대한 해결방법에 대해 알아보자.]]></description><link>https://millo-L.github.io/ReactNative-ld-symbols-not-found-error/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-ld-symbols-not-found-error/</guid><pubDate>Sun, 18 Jul 2021 14:01:00 GMT</pubDate><content:encoded>1. 서론 이번에 회사에서 이벤트를 위한 카카오 링크(공유) 기능을 개발해야 했는 데, 기존에 있던 오픈 소스들이 제대로 작동하지 않아서 새로 오픈 소스를 개발했다. 안드로이드는 잘 작동됐고, 문제는 iOS 였는 데 계속 &quot;ld: symbol(s) not found for architecture x86_64&quot; 오류가 나와서 정말 머리가 터져버리는 줄 알았다... 혹시나 나와 같은 문제를 가지고 고통받는 사람이 있을까 포스팅을 작성한다. 2. 원인 나의 경우 이번 오픈 소스를 kakao sdk v2를 기반으로 개발했기 때문에, 안드로이드는 kotlin으로 iOS는 swift로 개발했는 데, 이 오류가 생성된 원인으로 예상되는 것은 swift를 빌드할 때 버전 상 오류로 느껴졌다. 기존에 사용하는 모듈들을 다 뜯어봤는 데, swift가 아닌 objective-c로 모두 작성되어 있어서 뭔가 swift 문제겠거니 지레 짐작하고 문제 해결에 대해 접근해봤다. 3. 해결 방법 정말 이래저래 다 해봤다. 새로 만든 모듈이 문제일까 싶어 모듈의 스펙파일에 swift 컴파일 버전을 적어도 보고, Xcode를 켜서 모듈 설정을 변경도 해보고 다 해봤는 데 아무것도 해결되지 않았을 무렵... Xcode의 swift 버전이 두 개인 것을 발견했다. 그래서 찾은 해결방법은 정말 간단했다. Xcode -&gt; Build Settings -&gt; Search Paths -&gt; Library Search Paths 에서 &quot;$(TOOLCHAIN_DIR)/usr/lib/swift-5.0/$(PLATFORM_NAME)&quot; 를 제거하면 된다. 정말 거짓말처럼 오류가 사라지고 바로 실행됐다... 물론 나와 다른 원인으로 이 해결 방법이 통하지 않을 수 있지만, 해결된다면 좋겠다는 마음으로 포스팅을 적는다. 4. 홍보 만약 Kakao Link(카카오톡으로 공유하기) 기능을 react native 환경에서 사용할 일이 있으면 여기로 들어와서 사용해주길 바란다. 제약 조건 아래의 제약 조건은 kakao sdk…</content:encoded></item><item><title><![CDATA[[React Native] Facebook SDK(react-native-fbsdk) 적용하기]]></title><description><![CDATA[react native 앱에 facebook sdk을 적용해보자.]]></description><link>https://millo-L.github.io/ReactNative-facebook-sdk-setting/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-facebook-sdk-setting/</guid><pubDate>Thu, 10 Jun 2021 14:45:00 GMT</pubDate><content:encoded>1. 서론 저번 포스팅에서는 Firebase Analytics를 설정하는 법에 대해서 포스팅했다. 이번에는 마케터 분의 요청으로 Facebook SDK를 설정하게 됐다. 그렇게 어렵지는 않지만 File.swift 파일을 생성하는 부분이 공식문서에 나와있지 않아서 구글링으로 해결법을 찾았다. [👋 잠깐] 개발 환경 react-native 0.63.4 
typescript 3.8.3 
@types/react-native 0.63.2  추후에 이 포스팅을 보는 분들 및 다른 버전을 사용하시는 분들은 아래의 내용이 다소 차이가 생길 수 있으니 유의하기 바란다. 2. 필수 모듈 설치 react-native-fbsdk 3.0.0 2-1. iOS 설정 1. Info.plist 설정 아래의 코드를 삽입해준다. {APP-ID}에는 facebook sdk의 app id를 입력하고, {APP-Name}에는 등록시 입력한 앱의 이름을 입력하면 된다. {CLIENT-TOKEN} 부분은 페이스북 SDK App Dashboard의 에서 확인할 수 있다. 2. AppDelegate.m 설정 ios/{ProjectName}/AppDelegate.m 파일을 수정한다.
지난 포스트에서도 언급했지만 여기서 주의할 점은 추가하는 모든 헤더들은 반드시 #ifdef FB_SONARKIT_ENABLED 위에 존재해야 한다는 것이다. 그렇지 않으면 빌드 시에 헤더 파일이 제대로 임포트되지 않는다. 이 점은 꼭 유의하기 바란다. 여기까지가 공식 문서에 나온 부분까지인데 이렇게하고 정상적으로 작동한다면 그대로 사용해도 되고, 만약 오류가 난다면 facebook-ios-sdk v7 이상인 경우 Swift.File 을 프로젝트에 생성해야해서 나는 오류일 가능성이 매우매우매우매우 높다. 3. Swift.File 생성 이 부분 때문에 3번이나 다시 시도를 하고 겨우 성공했다. 그 다지 어렵지는 않고 아래의 이미지대로 따라가면 된다.     여기서 꼭 Create Bridging Header를 클릭해야한다.…</content:encoded></item><item><title><![CDATA[[React Native] Firebase Analytics(@react-native-firebase/analytics) 적용하기]]></title><description><![CDATA[react native 앱에 Firbase Analytics를 적용해보자.]]></description><link>https://millo-L.github.io/ReactNative-Firebase-Analytics-Setting/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-Firebase-Analytics-Setting/</guid><pubDate>Thu, 03 Jun 2021 13:45:00 GMT</pubDate><content:encoded>참고 firebase-ios-sdk v9+ (react-native-firebase v15+) 사용 시 pod install 에러에 관련된 해결방법은 여기서 확인해주세요. 1. 서론 우연한 만남을 계기로 창업을 준비하던 나와 팀원은 프릭스 헬스케어라는 회사에 입사하게 됐다. 백엔드 개발자로써 들어가고자 했지만, 나와 함께하는 팀원은 백엔드, 나는 프론트 개발자로 들어가고 3~6달 후 프론트 개발자를 채용한 후에 백엔드로 넘어가기로 했다. 그리하여 입사하고 처음 맡은 업무가 닥터아이라는 영유아 성장 발달 모니터링 앱에 Firebase Analytics를 적용하는 것이었다. 설정 도중 크래쉬가 나는 경우가 생겨, 혹시나 다른 사람들도 그런 경우가 있을까해서 이 포스팅을 남긴다. [👋 잠깐] 개발 환경 react-native 0.63.4 
typescript 3.8.3 
@types/react-native 0.63.2  추후에 이 포스팅을 보는 분들은 아래의 내용이 다소 차이가 생길 수 있으니 유의하기 바란다. 2. 필수 모듈 설치 및 필수 파일 다운로드 @react-native-firebase/app 12.0.0 
@react-native-firebase/analytics 12.0.0 Firebase 홈페이지에 프로젝트를 등록하고 안드로이드와 iOS용 앱을 각각 등록하면 세팅 파일들(google-services.json, GoogleService-Info.plist)을 다운받을 수 있다. (이 부분은 간단하므로 생략) 2-1. iOS 설정 위의 세팅 파일들을 다운받을 때 나온 설정들이 있는 데, 그대로 따라하면 된다. 1. GoogleService-Info.plist 저장 우선 위의 GoogleService-Info.plist 파일을 Xcode를 사용해서 ios/{ProjectName}/ 경로로 옮기면 된다. 아래의 이미지를 따라가면 된다.   2. AppDelegate.m 수정 ios/{ProjectName}/AppDelegate.m…</content:encoded></item><item><title><![CDATA[[React Native] 다른 앱(play store, instagram 등) 열기]]></title><description><![CDATA[react native에서 다른 앱(play store, instagram 등)을 실행시켜보자.]]></description><link>https://millo-L.github.io/ReactNative-link-other-app/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-link-other-app/</guid><pubDate>Fri, 16 Apr 2021 13:24:00 GMT</pubDate><content:encoded>1. 서론 아래의 화면은 Antodo개발 1.0 초기 버전의 설정 페이지다. 어플을 개발하고 배포하고 나면 앱 리뷰 남기기와 앱 인스타그램 등의 타 어플을 바로 열 수 있는 코드가 필요하다. 처음에는 방법을 몰라서 webview로 띄웠는 데 너무 불편해서 1.0.2 버전에서 방법을 찾고 수정했다. 생각보다 간단하니 잘 따라오기 바란다.  2. 방법 매우 간단하게 Linking이라는 react native 내장 함수를 사용하면 된다. 2-1. iOS 설정 내가 진행한 프로젝트의 경로로 진행하도록 하겠다. ~/Antodo/ios/Antodo/info.plist 파일을 연다.
~/[만든 프로젝트 명]/ios/[만든 프로젝트 명]/info.plist 아래의 코드를 추가한다. app store, instagram, twitter를 필요한 경우만 각각 info.plist에 추가한다. android는 따로 설정할 것이 없다. (매우 편안) 2-2. 공통 설명은 아래의 주석을 보면 충분할 것으로 예상한다.</content:encoded></item><item><title><![CDATA[스타트업 코딩 페스티벌 2021 1차, 2차 후기]]></title><description><![CDATA[스타트업 코딩 페스티벌 2021 1차, 2차 참여 후기]]></description><link>https://millo-L.github.io/scope-2021/</link><guid isPermaLink="false">https://millo-L.github.io/scope-2021/</guid><pubDate>Sun, 28 Mar 2021 09:20:00 GMT</pubDate><content:encoded>대회 준비 나는 이전에 한 번도 알고리즘 대회에 참가해본 적이 없어서 알고리즘 공부나 대회 개최일 등을 찾아본 적이 없었다. 그러던 와중에 이런 대회가 개최된다는 사실을 2일 전에 우연히 알게 됐는 데, 다행히도 1차 대회 전날까지 참가 신청을 받는 다는 걸 알게 되서 신청을 하고 부랴부랴 공부를 시작했다. 사람들이 많이 공부한다는 백준, Programmers 등에 들어가서 초급 ~ 중급 정도의 난이도를 풀어보고 다른 사람들의 코드도 리뷰해가며 생각을 다듬었다. 알고리즘 공부를 기존에 해오지 않아서 그런지 문제에 어떤 방식의 풀이를 대응해야 하는 지가 가장 힘든 일이었다. 그나마 다행인 것은 대학교 3, 4학년 때 자료구조와 알고리즘 조교로써 대학교 1, 2학년 학생들을 가르칠 기회가 생겼는 데 그 때 내가 자료구조나 알고리즘을 배울 때보다 오히려 더 공부를 꼼꼼하게 했고 그게 도움이 많이 됐다. 그 때 다른 사람들의 코드를 읽는 스킬이 많이 늘었고, 이론적인 부분을 알고 접근을 하니까 문제 유형별로 어떤 알고리즘을 사용해야할 지 감을 잡고 나서부터는 풀이가 수월해지기 시작했다. 2일이라는 짧은 준비 기간이었지만 나름 실력이 늘고 있다는 게 느껴졌다. 공부를 어느 정도 하고 난 후에는 스코페 홈페이지에 준비돼있는 모의 테스트를 풀어봤는 데 큰 어려움 없이 풀 수 있었다. 그냥 시험 환경을 확인하라는 의도였던 것 같다. 1차 대회 사실 공부 기간이 너무 짧기도 했고, 그냥 경험 삼아 나가볼까? 했던 거라서 큰 기대는 하지 않았지만 집에서 보는 시험인데도 첫 시험이라 그런지 긴장이 되긴 했다. 문제 수는 총 6개로 4시간이란 긴 시간동안 시험을 봤다. 첫 문제부터 감이 좋게도 쉽게 풀렸는 데 원래 모든 첫 문제는 몸풀이 문제로 쉽게 내주는 건가? 잘 모르겠다. 그러다 중간에 시험이 제출되지 않는 오류가 발생했고, 잠깐 멘탈이 흔들렸지만 다른 문제들을 풀면서 정신을 차렸다.…</content:encoded></item><item><title><![CDATA[[Node.js] Use express]]></title><description><![CDATA[Let's implement the server using express.js in nodejs.]]></description><link>https://millo-L.github.io/Nodejs-use-expressjs/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-use-expressjs/</guid><pubDate>Sun, 21 Mar 2021 10:45:00 GMT</pubDate><content:encoded>1. Introdution If you use node.js as a server, let&apos;s learn about express.js, which is considered the most standard. node.js is very easy to develop RESTful APIs. 2. Configuration Settings Prerequisite Actions 
Naturally, node.js is assumed to be installed. 
If you haven&apos;t installed it, click here to install it. First, let&apos;s create a folder to create a node.js development environment. 3. Print Hello world! Let&apos;s write a code to print Hello world. After running, try connecting to http://localhost:8080 through a browser or postman. 4. RESTful API Let&apos;s implement a simple RESTful API to CRUD the user&apos;s account information. [References] https://expressjs.com/</content:encoded></item><item><title><![CDATA[[Python] Implementing TCP image socket(Server, Client)]]></title><description><![CDATA[Let's implement image sending and receiving using TCP socket in python.]]></description><link>https://millo-L.github.io/Python-Implementing TCP image socket-Server-Client/</link><guid isPermaLink="false">https://millo-L.github.io/Python-Implementing TCP image socket-Server-Client/</guid><pubDate>Sun, 21 Mar 2021 10:39:00 GMT</pubDate><content:encoded>1. Introdution I implemented a TCP image socket between Raspberry pi 4 and an artificial intelligence server in an intersection pedestrian safety notification project last year. We implement a socket that sends and receives real-time and video images on a per-frame basis using OpenCV. If you use Raspberry Pi, the OpenCV installation method is a bit complicated, so please refer to here. 2. TCP image socket Server When sending and receiving images with TCP socket, the most important thing is to send the same size of the image data from the client to the server. Since the size of the data that can be sent at once using TCP socket is limited, it is important to convert the image data to string and send it. Therefore, it is necessary to receive the size of the image first and receive data from the socket only that size and convert it back to the form of image data. 3. TCP image socket Client 3-1. Sending images(Client) When sending image data to the server, the Client must hand over the…</content:encoded></item><item><title><![CDATA[[Python] Manage simple Anaconda virtual environments기]]></title><description><![CDATA[Let's learn about the Anaconda virtual environment management command that makes python development easier.]]></description><link>https://millo-L.github.io/Python-Manage-simple-Anaconda-virtual-environments/</link><guid isPermaLink="false">https://millo-L.github.io/Python-Manage-simple-Anaconda-virtual-environments/</guid><pubDate>Sun, 21 Mar 2021 10:28:00 GMT</pubDate><content:encoded>Prerequisite Actions 
Of course Python and Anaconda are assumed to be installed.
If either is not included, please access each link attached below and download it.  https://www.python.org/downloads/  https://docs.anaconda.com/anaconda/install/  1. Create, remove, and activate an Anaconda virtual environment ​ 2. Create a list of modules used in an Anaconda virtual environment python uses requirements.txt to function as the package.json file, the most convenient file that allows the modules used in node.js to be installed and used directly in other users and environments. To do so, you must download the modules required for the development environment and enter the following commands into the terminal. ​ 3. List of modules used in anaconda virtual environment Set as it is in another environment If you need to use collaborative tools such as github to execute Python code developed by another user or in a different environment, Anaconda can create a virtual environment and manage the…</content:encoded></item><item><title><![CDATA[Install Opencv 4 on Raspberry Pi 4]]></title><description><![CDATA[Let's install Opencv 4 on Raspberry pi 4]]></description><link>https://millo-L.github.io/Install-Opencv-4-on-Raspberry-Pi-4/</link><guid isPermaLink="false">https://millo-L.github.io/Install-Opencv-4-on-Raspberry-Pi-4/</guid><pubDate>Sun, 21 Mar 2021 10:18:00 GMT</pubDate><content:encoded>1. Introduction Last year, when developing an intersection pedestrian safety notification project, Raspberry Pi was used to obtain video data with similar specifications to general intersection CCTVs in real time. The data taken through the camera module was delivered to the server via a TCP socket, and the tool used for image processing was OpenCV. Many other blogs have followed the OpenCV installation, but each time there was an error in the build process during Makefile, so the format was repeated and the installation was repeated, and the only successful installation method was posted. 2. How to install Prerequisite Actions 
Of course, I&apos;ll start by assuming that Raspberry Pi has a Raspbian OS installed. When installing, make sure to follow the following order. (In some cases, I didn&apos;t follow the order and started again from the beginning because it didn&apos;t work properly.) [References] https://www.youtube.com/watch?v=1paHdhIC9ug https://gist.github.com/sol-prog/ed…</content:encoded></item><item><title><![CDATA[[Go] Using Struct as Class]]></title><description><![CDATA[Let's use Go's struct like class of an object-oriented language.]]></description><link>https://millo-L.github.io/Using-struct-as-class-in-golang/</link><guid isPermaLink="false">https://millo-L.github.io/Using-struct-as-class-in-golang/</guid><pubDate>Sat, 13 Mar 2021 06:30:00 GMT</pubDate><content:encoded>1. Introduction Recently, I started studying Golang, and it seems to have a different charm than Javscript that I used before. I have previously worked on a project using object-oriented compilation languages such as C++, JAVA, and C#. At this time, I have experience in coding conveniently using class inheritance and member functions. One of the big features of hearing information about Golang was that there was no class in Golang. Is it possible to code in Go language without class as convenient as object orientation? I will post about this content. 2. Alternatives proposed by Golang The Go language clearly presents a substitute for the part I mentioned above. It is the Receiver and Embedding. Using these two in a struct allows us to construct the same environment as an object-oriented member function and an inheritance structure (the role of a member variable is a variable within the struct). 3. Receiver The Receiver corresponds to the role of member functions in object-oriented…</content:encoded></item><item><title><![CDATA[[Docker] Jenkins in Docker(Ubuntu18.04)]]></title><description><![CDATA[Let's make Jenkins docker with Docker in Docker and create a CI/CD environment.]]></description><link>https://millo-L.github.io/jenkins-in-docker-ubuntu/</link><guid isPermaLink="false">https://millo-L.github.io/jenkins-in-docker-ubuntu/</guid><pubDate>Sat, 13 Mar 2021 06:10:00 GMT</pubDate><content:encoded>1. Introduction Jenkins is a popular CI/CD tool when implementing deployment automation. I also used Jenkins a few months ago when implementing AWS distribution automation, and I thought it would be good to implement Jenkins with Docker in Docker, but I leave this post because I think it&apos;s okay. This posting is to write the implementation in ubuntu18.04 version, so please revise the other os little by little. 2. How to Implement 2-1. jenkins docker First, get Jenkins&apos; docker image. Afterwards, Jenkins is connected to the 8080 external port and volume is shared. The reason why we share docker.sock here is to give Jenkins inside the docker the effect of running the docker externally. After that, check Jenkins docker&apos;s log to find the password. [In case of module installation] At this time, installation errors often occur when necessary modules are installed at the Jenkins site. In this case, we need to update Jenkins&apos; version. 2-2. Install docker inside jenkins docker When the module…</content:encoded></item><item><title><![CDATA[[JavaScript] Get out of Callback hell]]></title><description><![CDATA[Let's use promise and async/await to get out of JavaScript Callback hell.]]></description><link>https://millo-L.github.io/JavaScript-Get-out-of-Callback-hell/</link><guid isPermaLink="false">https://millo-L.github.io/JavaScript-Get-out-of-Callback-hell/</guid><pubDate>Fri, 05 Mar 2021 10:30:00 GMT</pubDate><content:encoded>1. Introduction JavaScript is a highly flexible and convenient asynchronous language. I like the JavaScript ecosystem very much, and I often use ReactJS, Node.js, etc. (Recently, I&apos;ve been studying to transfer to Go.Hmmm) The most inconvenient thing about JavaScript, a really convenient and good language, is Callback Hell. I tried to synchronize JavaScript, which is an asynchronous language, but there was a callback in the callback, a callback in the callback... These Callback hells are not only fatal in collaboration, but also in a way that reduces code readability. If you look at even the code you made two weeks later, you will have to interpret it. The solution to these problems is Promise, and nevertheless, as code readability has begun to decline, the processing of using async/await together has become a trend. When code is acting asynchronously in JavaScript? Call server API DB Call setTimeout function Infinite loop or very many loops 2. Promise Promise is the first way to solve…</content:encoded></item><item><title><![CDATA[[Docker] Synchronize docker-compose (node.js, mysql) execution order]]></title><description><![CDATA[In docker-compose, use dockerize to synchronize the run order of node.js and mysql.]]></description><link>https://millo-L.github.io/Synchronize-docker-compose-nodejs-mysql-execution-order/</link><guid isPermaLink="false">https://millo-L.github.io/Synchronize-docker-compose-nodejs-mysql-execution-order/</guid><pubDate>Fri, 05 Mar 2021 08:00:00 GMT</pubDate><content:encoded>1. Introduction In most cases, a stable DB environment is established using AWS&apos; RDS or workstation internal DB, but Docker is available when implementing DB for testing purposes or simple projects. Some people say MySQL&apos;s data is not stable, but the problem can be solved by connecting volumes. However, if you connect node.js server and mysql with docker-compose, you can see that there is a connection error. The problem is that mysql runs slower than node.js servers. This requires synchronizing node.js to run slower than mysql. In this posting, node.js and mysql are examples, but can be applied to both servers in different languages and DBs in different languages. 2. Folder Structure As mentioned above, the /sync-docker/db/data folder is a folder that shares the data volume of the mysql docker. Therefore, the information is preserved even if the docker is re-run. In addition, by creating init.sql of the /sync-docker/db/init folder and sharing the volume with mysql docker, the initial…</content:encoded></item><item><title><![CDATA[WebRTC Performance Comparison (P2P vs SFU)]]></title><description><![CDATA[Let's compare 1:NP2P vs SFU performance based on WebRTC's theory.]]></description><link>https://millo-L.github.io/WebRTC-Performance-Comparison-P2P-vs-SFU/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-Performance-Comparison-P2P-vs-SFU/</guid><pubDate>Fri, 05 Mar 2021 06:30:00 GMT</pubDate><content:encoded>1. Introduction With the last posting, we finished implementing the 1:N video conferencing WebRTC of P2P(Mesh) and SFU methods. The last part of the implementation was always a performance test, so I did a simple performance test. Please understand that the independent space between the server and the client would have been good for the test, but it was impossible under the circumstances. 2. Performance Test 2-1. Devices device description CPU AMD Ryzen 5 3600 6-Core Processor 3.59GHz RAM 32GB GPU NVIDIA GeForce RTX 2060 SUPER OS Windows 10 Pro 2-2. Settings All clients and servers ran on one device. The 1:N method described above is based on general video conferencing. 2-3. Client Side Performance(Chrome browser CPU usage) The CPU share was based on Chrome browser because all clients ran on one device. the number of users P2P/Mesh(Signaling Server) SFU(Media Server) 2 4% 5% 3 10% 8% 4 22% 9.5% 5 34% 18% 6 47% 25% 7 64% 30% 8 80% 30% 2-4. Server Side Performance(CPU usage) Since server…</content:encoded></item><item><title><![CDATA[Implementing WebRTC using ReactJS and Typescript (1:N SFU)]]></title><description><![CDATA[Based on the theory of WebRTC, let's implement 1:N SFU real-time video transmission.]]></description><link>https://millo-L.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-SFU/</link><guid isPermaLink="false">https://millo-L.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-SFU/</guid><pubDate>Fri, 05 Mar 2021 05:42:00 GMT</pubDate><content:encoded>1. Introduction Last time, I posted for 1:N P2P communication using WebRTC. I thought about posting about the SFU method or not, but I thought it would be better to do it. SFU is a type of Media Server, so please click here to check the past posting. Media servers are used during commercialization using Kurento and mediasoup. However, based on his theory, I wanted to organize an SFU server among media servers. The theoretical explanation was covered in the existing post, so please check the link here above. Assuming that you know all the theoretical backgrounds, I will write a post about the implementation. 2. Code SFU Server(Node.js) Note  You must use socket.io version=2.3.0. 1. Variable Description receiverPCs role Save RTCPeerConnection to receive MediaStream of connected user format receiverPCs[socketID of the user connected user] = RTCPeerConnection senderPCs role Save RTCPeerConnection to send one user MediaStream of another user except yourself format senderPCs[socketID of user…</content:encoded></item><item><title><![CDATA[Implementing WebRTC using ReactJS and Typescript (1:N P2P)]]></title><description><![CDATA[Based on the theory of WebRTC, let's implement 1:N P2P real-time video transmission.]]></description><link>https://millo-L.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-P2P/</link><guid isPermaLink="false">https://millo-L.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript-1-N-P2P/</guid><pubDate>Fri, 05 Mar 2021 04:00:00 GMT</pubDate><content:encoded>1. Introduction Last time, I posted about 1:1 P2P communication using WebRTC. This posting is supposed to be written assuming that you know the concept described in the previous posting, so if you see this article first, I recommend you to read the previous article. These two are quite similar because even a 1:N connection would implement the same P2P connection (Signaling Server format) as the 1:1 connection previously. We will focus on explaining a series of dynamically connected and terminated processes. 2. Implementation method What do 1:1 and 1:N connections have in common? Although the other party who has a video conference changes from one person to several people, they are all the same in that they are all peer-to-peer (P2P). A 1:N connection, like a 1:1 connection, consists of a Signaling server to connect communications with the other party, and from then on the server is not involved and only communicates between Peers. What is the difference between 1:1 and 1:N connection…</content:encoded></item><item><title><![CDATA[[Network] Differences between URI and URL]]></title><description><![CDATA[What's the difference between a URL and a URI? Let's find out when and what to use.]]></description><link>https://millo-L.github.io/Difference-between-URI-and-URL/</link><guid isPermaLink="false">https://millo-L.github.io/Difference-between-URI-and-URL/</guid><pubDate>Wed, 03 Mar 2021 02:48:00 GMT</pubDate><content:encoded>1. Introduction Recently, I have been reading a lot of network-related web documents or books, and I write a posting to organize it once because it is so confusing to call it a URL in some parts and URI in others. When looking at it without knowing it, it seems to be similar in shape, but I wonder what the difference is. From now on, let&apos;s find out the difference clearly. 2. What is URI(Uniform Resource Identifier)? Uniform Resource Identifier (URI)   consists of a string of characters used to identify or name a resource on the Internet 3. What is URL(Uniform Resource Locator)? Uniform Resource Locator (URL)   colloquially termed a web address, is a reference to a web resource that specifies its location on a computer network and a mechanism for retrieving it. Most importantly, the URL is included in the URI.  4. Example of separating URI and URL https://example.io is a URL and URI because it represents a server named https://example.io. https://example.io/images is a URL and URI…</content:encoded></item><item><title><![CDATA[[Typescript] mongoose methods, statics]]></title><description><![CDATA[Mongoose's methods and statics in a typescript environment.]]></description><link>https://millo-L.github.io/Typescript-mongoose-methods-statics/</link><guid isPermaLink="false">https://millo-L.github.io/Typescript-mongoose-methods-statics/</guid><pubDate>Wed, 03 Mar 2021 02:30:00 GMT</pubDate><content:encoded>1. Introduction In a typescript environment, the mongoose module was used to use methods and statics, and in nodejs, the part that was running immediately became a bit more challenging in typescript, so the posting was written. Typescript itself is so sensitive to data types that it feels convenient in code review and collaboration, but sometimes it seems to be this uncomfortable. 2. Code 2-1. Whole Code Let&apos;s look at the whole code first. 
Overall, a model containing the variables and methods and statistics used by mongodb&apos;s model, User, is specified through the interface. Let&apos;s proceed with the details step by step below. 2-2. Variable interface to use in the model The following interface specifies the name and data type of variables to be used in the User model. [👋 Wait] The difference between methods and statics When methods are used, &apos;this&apos; is the object called method, and when using statistics, &apos;this&apos; is the model itself, regardless of the object called statistics&quot;. methods Thus…</content:encoded></item><item><title><![CDATA[[Typescript] mongoose methods, statics 사용하기]]></title><description><![CDATA[typescript 환경에서 mongoose의 methods와 statics를 사용해보자.]]></description><link>https://millo-L.github.io/Typescript-mongodb-method-statics-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Typescript-mongodb-method-statics-사용하기/</guid><pubDate>Tue, 02 Mar 2021 13:24:00 GMT</pubDate><content:encoded>1. 서론 typescript 환경에서 mongoose 모듈을 사용하여 methods와 statics를 사용할 상황이 생겼는 데, nodejs에서는 바로 실행되던 부분이 typescript에서는 조금 더 까다롭게 설정이 되서 포스팅을 적는다. typescript 자체가 워낙 자료형에 민감하기 때문에 더욱 그런 것 같다. 그 덕분에 코드 리뷰나 협업에서는 편리함을 느끼지만 간혹 이렇게 불편함이 생길 때가 있는 것 같다. 2. 코드 2-1. 전체 코드 우선 전체 코드를 보도록 하자. 
큰 틀을 보자면 User라는 mongodb의 모델이 사용할 변수와 methods, statics 들의 자료형을 interface를 통해서 명시하고 해당 interface를 포함하는 model을 생성한다. 자세한 사항은 아래에서 차근차근 진행하도록 하자. 2-2. 모델에서 사용할 변수 interface 아래의 interface는 User 모델에서 사용할 변수들의 이름과 자료형을 명시하는 역할을 한다. [👋 잠깐] methods와 statics의 차이점 methods를 사용할 때는 이 method를 호출한 객체가 method 내에서의 this가 되고, statics를 사용할 때는 이 statics를 호출한 객체에 상관없이 this가 모델 자체가 된다. methods 따라서, 위의 코드에서 setPassword와 checkPassword는 한 객체에 대해서 각각 해당 객체에 비밀번호를 설정하거나 해당 객체의 비밀번호와 일치하는 지 여부를 확인할 수 있다. statics 반면, findByUsername은 Model 내에서 해당 username인 User를 반환할 수 있다. 2-3. 모델에서 사용할 methods interface 아래의 interface는 User 모델에서 사용할 변수에 덧붙여 methods의 이름과 자료형을 명시하는 역할을 한다. 
다만, 위의 interface와 다른 점은 IUser 뿐만 아니라 mongoose의 class 인 Document도 extends…</content:encoded></item><item><title><![CDATA[[Gatsby] Troubleshooting document is not defined build error]]></title><description><![CDATA[Troubleshooting Gatsby document is not defined build error.]]></description><link>https://millo-L.github.io/Troubleshooting-Gatsby-build-error-document-is-not-defined/</link><guid isPermaLink="false">https://millo-L.github.io/Troubleshooting-Gatsby-build-error-document-is-not-defined/</guid><pubDate>Sat, 27 Feb 2021 00:20:00 GMT</pubDate><content:encoded>1. Introduction Recently, when I moved from Tistory to Gatsby, I started developing blogs using Gatsby for the first time, and there were many difficulties. One of the most annoying issue was the &quot;document is not defined&quot; build error. I would like to share the solution I found for people who face the same problem as me. 2. Solution Surprisingly, the solution is very simple. I used the document variable to get the scroll top of the screen. Of course, the document variable would exist in the browser environment, but I thought it was an error because Gatsby builder did not know whether it existed in the build, so I checked with exceptional treatment whether the document variable existed or if the document type was defined. In terms of the code, In my case, I used it as below.</content:encoded></item><item><title><![CDATA[[Gatsby] document is not defined build error 해결 방법]]></title><description><![CDATA[Gatsby  document is not defined build error 해결하기.]]></description><link>https://millo-L.github.io/Gatsby-build-error-document-is-not-defined-해결방법/</link><guid isPermaLink="false">https://millo-L.github.io/Gatsby-build-error-document-is-not-defined-해결방법/</guid><pubDate>Sat, 27 Feb 2021 00:01:00 GMT</pubDate><content:encoded>1. 서론 최근에 tistory에서 Gatsby로 블로그를 옮기면서 처음으로 gatsby를 사용해서 블로그를 개발하기 시작했는 데 여러 가지 난관이 있었다. 그 중 가장 짜증났던 상황이 바로 &quot;document is not defined&quot; 빌드 오류였다. 나와 같은 문제에 직면한 사람들을 위해 내가 찾은 해결 방법을 공유하고자 한다. 2. 해결방법 의외로 해결방법은 매우 간단하다. 나는 document 변수를 화면의 scroll top을 가져오는 데 사용했다. 물론 브라우저 환경에서 당연히 document 변수는 존재하겠지만, 빌드 시에는 이 변수의 존재 여부를 알 수 없기 때문에 나오는 오류라고 생각했고, 따라서 document 변수가 존재하는 지, 그리고 document의 타입이 정의되어 있는 지 여부를 예외처리로 확인했다. 코드로 보면 아래와 같다. 나의 경우 아래와 같이 사용했다.</content:encoded></item><item><title><![CDATA[[Network] URI와 URL의 차이점]]></title><description><![CDATA[URL과 URI 대체 뭐가 다를까? 어떤 때 어떤 것을 써야할지에 대해 알아보자.]]></description><link>https://millo-L.github.io/URI와-URL의-차이점/</link><guid isPermaLink="false">https://millo-L.github.io/URI와-URL의-차이점/</guid><pubDate>Thu, 11 Feb 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 최근 네트워크 관련 웹 문서나 도서를 많이 읽는 데 어떤 부분에서는 URL로 칭하고 어떤 부분에서는 URI로 칭하는 게 너무 헷갈려서 한 번 정리하고자 포스팅을 작성한다. 잘 모르는 상태에서 볼 때는 분명 형태도 비슷한 것 같은 데 무슨 차이인가 싶기도 하다. 지금부터 그 차이에 대해 명확히 알아보도록 하자. 2. URI(Uniform Resource Identifier)란? Uniform Resource Identifier (URI)  &gt;  consists of a string of characters used to identify or name a resource on the Internet 네트워크 상에서 자원을 식별하기 위한 문자열의 구성이다. URI는 인터넷에서 요구되는 기본 조건으로써 인터넷 프로토콜에 항상 붙어 다닌다. 3. URL(Uniform Resource Locator)란? Uniform Resource Locator (URL)  &gt;  colloquially termed a web address, is a reference to a web resource that specifies its location on a computer network and a mechanism for retrieving it. 구어적으로 웹 주소라고 일컫고, 네트워크 상에서 웹 자원의 위치를 지정하는 웹 자원에 대한 참조이다. 즉, 쉽게 말하면 네트워크 상의 자원의 위치를 나타내는 주소이다. 가장 중요한 점은 URL은 URI에 포함된다는 점이다.  4. URI와 URL 구분 예시 https://example.io 의 경우 https://example.io 라는 서버를 나타내기 때문에 URL이면서 URI이다. https://example.io/images 의 경우 example.io 서버의 images라는 네트워크 상의 자원의 위치를 의미하기 때문에 URL이면서 URI이다. https://example.io/images/dog.jpeg…</content:encoded></item><item><title><![CDATA[[Network] HTTP란 무엇인가]]></title><description><![CDATA[우리에게 매우 친숙하지만 제대로 알고 있진 못한 HTTP에 대해 알아보자.]]></description><link>https://millo-L.github.io/HTTP란-무엇인가/</link><guid isPermaLink="false">https://millo-L.github.io/HTTP란-무엇인가/</guid><pubDate>Thu, 11 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 최근 백엔드 개발을 진행하다 보니 데이터 송수신 방식(RPC, gRPC 등)에 대해 공부할 기회가 생겼는 데, 그중 제일 기본적인 방식이 HTTP에 대해 생각보다 자세히 모르고 있다는 생각이 들었다. HTTP는 그저 우리가 웹브라우저를 사용하거나 개발할 때 클라이언트와 서버가 정보를 교환하는 가장 기본적인 프로토콜이라는 정도밖에 알지 못해서 좀 더 자세히 알아보고자 이 포스팅을 작성한다. 2. HTTP(HyperText Transfer Protocol)란? 초기에는 HTML과 같은 하이퍼미디어 문서를 주로 전송했지만, 최근에는 Plain text, JSON, XML 등 다양한 형태의 정보도 전송하는 애플리케이션 레이어 프로토콜이다. 초기에는 웹 브라우저와 웹 서버 간의 커뮤니케이션을 위해 디자인되었지만 최근에는 모바일 애플리케이션 및 IoT 등과의 커뮤니케이션과 같이 다른 목적으로도 사용되고 있다. HTTP는 클라이언트가 요청을 생성하기 위한 연결을 연 다음 응답을 받을 때까지 대기하는 전통적인 클라이언트-서버 모델을 따른다. HTTP는 무상태 프로토콜이며, 이는 서버가 두 요청 간에 어떠한 상태나 데이터를 유지하지 않음을 의미한다. (상태를 유지하기 위한 노력으로 Cookie와 Session을 사용한다.) 일반적으로 안정적인 TCP/IP 레이어를 기반으로 사용하는 응용 프로토콜이다. 3. HTTP의 동작 방식 클라이언트  &gt;  서버에게 요청을 보내는 리소스 사용자 ex) 웹 브라우저, 모바일 애플리케이션, IoT 등  서버  &gt;  클라이언트에게 요청에 대한 응답을 제공하는 리소스 관리자 클라이언트(웹 브라우저, 모바일 등)가 브라우저를 통해서 어떠한 서비스를 URI를 통해 서버에 요청(Request)하면 서버에서는 해당 요청에 대한 결과를 응답(Response)하는 형태로 동작한다.  4. HTTP 요청 메서드 GET 특정 리소스를 받기 위한 요청이다. 따라서, 리소스의 생성, 수정 및 삭제 등에 사용해서는 안된다. POST…</content:encoded></item><item><title><![CDATA[[Node.js] PBKDF2 비밀번호 암호화하기]]></title><description><![CDATA[nodejs에서 PBKDF2 암호화 방식을 사용해보자.]]></description><link>https://millo-L.github.io/Nodejs-PBKDF2-비밀번호-암호화하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-PBKDF2-비밀번호-암호화하기/</guid><pubDate>Wed, 10 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 사용자들의 비밀번호 정보를 DB에 저장할 때는 반드시 암호화가 필요하다. 그러기 위한 가장 일반적인 방식이 바로 PBKDF2 방식이다. 오늘은 이 방식이 무엇인지? 그리고 node.js에서는 어떻게 구현할 수 있는지에 대해 알아보자. 2. PBKDF2(Password-Based Key Derivation Function Version 2)란? PBKDF2는 미국 NIST에서 승인받은 사용자 패스워드를 기반으로 키(Key) 유도를 하기 위한 함수이다. 사용자 패스워드에 해시함수, 솔트(Salt), 반복 횟수 등을 지정하여 패스워드에 대한 다이제스트(Digest)를 생성하는 방식이다. Salt란?   비밀번호를 암호화하기 위한 키 값 (절대 외부로 유출되서는 안됨)  Digest란?   비밀번호를 Salt로 암호화한 결과 값 3. PBKDF2로 비밀번호 암호화하기 이번 실습에서는 별도의 html 파일을 만들지 않고, 특정 문자열을 암호화해서 Salt와 Digest를 생성(회원가입 기능)하고, 다른 문자열을 Salt를 사용해서 암호화하여 일치하는 지 비교(로그인 기능)하는 과정을 통해 비밀번호를 암호화하여 생성하고 비교 방식에 대해 알아보도록 하자. 방식은 크게 pbkdf2-password라는 모듈을 설치해서 사용하는 방식과 node.js 기본 내장 함수는 crypto를 사용하는 방식 두 가지 모두 사용해보도록 하자. 3-1. 개발 환경 구축 우선, 실습을 진행할 폴더를 생성하고 필요한 모듈을 설치하도록 하자. 3-2. pbkdf2-password 사용하기 우선, pbkdf2-password 모듈을 사용해보자. pbkdf2-password 모듈은 PBKDF2 방식을 사용하기 쉽게 생성한 방식이므로 사용하기가 매우 간단하다. 아래와 같이 회원가입 시에는 password만을 hasher의 파라미터로 넣어서 salt가 자동 생성되게 한 후 salt값을 DB에 digest와 함께 저장한다. 그 후 회원이 로그인을 요청할 때는 저장되어 있는 salt…</content:encoded></item><item><title><![CDATA[[React Native] 특정 화면에서 화면 고정하기]]></title><description><![CDATA[React native에서 특정 화면에서 화면 회전이 되지 않게 고정해보자.]]></description><link>https://millo-L.github.io/ReactNative-특정-화면에서-화면-고정하기/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-특정-화면에서-화면-고정하기/</guid><pubDate>Tue, 09 Feb 2021 06:00:00 GMT</pubDate><content:encoded>1. 서론 지난번과 같이 지인의 스타트업 애플리케이션을 react native로 구현하다가 생긴 일이다. 특정 화면에서만 가로 모드로 고정하고 싶어서 이것저것 오픈 소스를 살펴보다가 발견한 모듈이 바로 react-native-orientation이다. 사용법은 매우 간단하므로 아래에서 코드를 보면 이해할 수 있을 것이다. 2. 개발 환경 react-native @0.62.2 
typescript @4.0.3 
react-native-orientation @3.1.3 3. 구현 방법 나는 아래와 같이 특정 화면에서 가로 모드로 고정하는 코드를 작성했다. 만약 세로 모드를 고정하고 싶다면 아래의 참고 홈페이지를 방문해서 portrait와 관련된 함수를 찾으면 된다. 반드시 useEffect 내에서 return () =&gt; {}을 사용해서 이벤트들을 제거해야 한다. 그렇지 않으면 다른 페이지에서도 lock이 적용된다. [참고] https://www.npmjs.com/package/react-native-orientation</content:encoded></item><item><title><![CDATA[[React Native] Bottom tab bar 특정 화면에서 안 보이게 설정하기]]></title><description><![CDATA[React native에서 특정 화면에서만 Bottom tab bar가 보이지 않게 설정해보자.]]></description><link>https://millo-L.github.io/ReactNative-Bottom-tab-bar-특정-화면에서-안-보이게-설정하기/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-Bottom-tab-bar-특정-화면에서-안-보이게-설정하기/</guid><pubDate>Tue, 09 Feb 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 지인의 스타트업 애플리케이션을 React Native로 제작해주다가 특정 화면에서만 바텀 탭 바가 사라지게 해야 하는 상황이 왔다. 공식 문서를 뒤져봐도 비슷한 코드는 있어도 내가 원하는 코드는 없고 여러 사이트들을 뒤지다가 해결 방법을 찾았다. 해당 사이트에서도 버전 차이 때문인지 문제가 생겨서 응용만 하고 디버깅하며 다시 코딩을 했다. 2. 개발 환경 react-native @0.62.2 
typescript @4.0.3 
@react-navigation/native @5.7.4 
@react-navigation/stack @5.9.1 
@react-navigation/bottom-tabs @5.9.0 3. 구현 방법 내가 원하는 플로우는 stack navigation들로 bottom tab bar를 구성하고 특정 stack navigation에서 특정 화면으로 넘어갔을 때만 bottom tab bar가 사라지는 것이다. 아래의 코드에서 알 수 있듯이 bottom tab bar의 첫 번째 탭은 HomeTab이고 HomeTab은 스텍 내비게이션이다. 따라서, 특정 버튼을 누르면 다른 페이지가 렌더링 된다. 이때만 바텀 탭 바를 없애고 싶었는 데, 아래와 같이 options에 route라는 콜백을 받을 수 있고, 이 변수를 파라미터로 getVisibility 함수로 넘겨서 처리하면 된다. 더 자세한 사항은 디버깅을 해보면 알 수 있을 것이다. 아래의 getVisibility에서 selectedIndex는 내가 원하는 페이지가 HomeTab을 생성할 때 Stack.Navigator 안에 쌓인 순서이다. 나는 MathProblem이라는 스크린에서만 바텀 탭을 없앨 것이기 때문에 selectedIndex 값을 1로 줬다. [참고] https://stackoverflow.com/questions/51352081/react-navigation-how-to-hide-tabbar-from-inside-stack-navigation</content:encoded></item><item><title><![CDATA[[React Native] Dimensions.get('window')와 Dimensions.get('screen')의 차이점]]></title><description><![CDATA[React native에서 Dimensions.get('window')와 Dimensions.get('screen')의 차이를 알아보자.]]></description><link>https://millo-L.github.io/ReactNative-Dimensions-get-window와-Dimentsions-get-screen의-차이점/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-Dimensions-get-window와-Dimentsions-get-screen의-차이점/</guid><pubDate>Tue, 09 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 리액트 네이티브 개발 중 모바일 기기의 해상도를 가져올 수 있는 API인 Dimensions를 사용할 일이 있었는 데, 굳이 왜 window와 screen으로 나뉘어 있는지 모르겠어서 검색하고 알아낸 내용을 적고자 한다. 2. 차이점 사실 IOS에서는 window와 screen 둘 중 어떤 것을 쓰더라도 동일하게 적용된다. 
다만, Android에서는 다르다.  Dimensions.get(&apos;window&apos;) 위에 보이는 그림 1의 빨간색으로 표시된 부분을 포함하지 않고 영역을 추출한다. Dimensions.get(&apos;screen&apos;) 위에 보이는 그림 1의 빨간색으로 표시된 부분을 포함하고 영역을 추출한다. [참고] https://stackoverflow.com/questions/44978804/whats-the-difference-between-window-and-screen-in-the-dimensions-api</content:encoded></item><item><title><![CDATA[[Node.js] slack 연동하기(알림봇 구현)]]></title><description><![CDATA[nodejs와 slack을 연동해서 알림봇을 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-slack-연동하기-알림봇구현/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-slack-연동하기-알림봇구현/</guid><pubDate>Mon, 08 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 요즘 협업에서 가장 핫한 communication tool 중 하나는 slack이다. 회사라는 공적인 공간과 집이라는 사적인 공간이 분리된 것처럼, 의사소통 또한 사적인 공간(카카오톡, 인스타 DM 등)과 공적인 공간(slack)을 나누는 것이다. 또한, 공적인 공간에서도 업무에 따른 채널을 생성하며 순도 높은 대화를 이어갈 수 있다. 이렇게 최근 협업 및 스타트업에서 많이 사용하는 slack을 통해 알림봇을 구현한다면 사용자들의 실시간 구매 알림 등으로 편리하게 사용 및 확인할 수 있다. 2. slack token 발급 전제 조건 
당연히 slack 계정은 존재해야 한다. 
google login 기능도 있으니 사용하길 바란다. 다소 복잡한 감이 있으니 잘 따라오기 바란다. 우선, 채팅을 위한 공식 문서를 확인해야 한다. https://api.slack.com/messaging/sending 로 들어가보도록 하자. 이 창은 켜 두고 만약 설명이 불충분하다고 느껴지면 참고하기 바란다. 첫 번째로 할 일은 알림봇을 설정할 워크스페이스를 생성하는 것이다. https://slack.com/intl/ko-kr/ 로 접속해서 로그인 후 아래의 그림과 같이 새 워크스페이스를 생성한다. 
생성 시에 워크스페이스 명은 slack bot test로 진행하고, 채널 명은 test로 만들도록 하자.  그 이후 https://api.slack.com/apps?new_app=1 로 접속해서 Create New App 버튼을 클릭하면 아래와 같은 화면이 나온다. 그때 App Name을 slack bot test로 지정하고 Development Slack Workspace는 Sign in to another workspace를 클릭한다.
그 이후 나오는 화면에서는 위에서 생성한 slack bot test 워크스페이스를 선택하면 된다. 그 후 다시 아래의 그림과 같은 창이 나오면 Development Slack Workspace에서 slack bot test…</content:encoded></item><item><title><![CDATA[[Network] SOAP 정리하기]]></title><description><![CDATA[들어본 적은 있지만 잘 모르고 있는 SOAP에 대해 알아보자.]]></description><link>https://millo-L.github.io/SOAP-정리하기/</link><guid isPermaLink="false">https://millo-L.github.io/SOAP-정리하기/</guid><pubDate>Sun, 07 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 최근 GO 언어를 공부하다 보니 RPC, gRPC에 대해 새롭게 알게 됐다. 아직 자세히는 모르지만 추후 정리하는 포스팅을 쓸 예정이다. 그러다 보니 자연스레 이전에 사용하던 RESTful API에 대한 포스팅을 먼저 작성하려 했는 데 SOAP 방식이 존재한다는 사실을 알고, 궁금증이 생겨 공부를 하며 이 포스팅을 먼저 작성하게 됐다. SOAP, RPC, gRPC, RESTful API 등은 모두 각기 다른 온라인 데이터 전송 방식이다. 각각의 특성과 장단점이 존재하기 때문에 알아두면 좋을 것 같아 시리즈물로써 포스팅을 작성해보려 한다. 그럼 SOAP 방식에 대한 정리를 시작해보자. 2. SOAP란 무엇인가? SOAP란 Simple Object Access Protocol의 약자로 객체 접근을 간단하게 해주는 프로토콜이다. 그럼 어떻게 간단하게 해주는 걸까? 해답은 바로 플랫폼에 종속적이지 않기 때문에 다른 기종 간의 통신이 용이한 XML을 데이터 송수신의 기본 format으로 사용하는 것이다. SOAP는 이러한 장점을 가진 XML을 이용해서 분산처리 환경에서의 정보교환을 쉽게 할 수 있도록 해주는 프로토콜이다. 또한, SOAP는 Client가 물리적으로 인접하지 않은 서버에게 객체나 함수를 호출하여 그 값을 반환받는 RPC 중 하나이다. 무엇보다 아주 표준화가 잘 되어있는 HTTP 또한 사용 가능하기 때문에 거의 모든 기종에서 호환성을 보장한다. 3. SOAP의 탄생 배경 위에서 설명해서 짐작은 했겠지만, 이 때는 최근 자주 사용하는 RESTful API가 존재하기도 이전이었다. 따라서, 서로 다른 플랫폼 또는 언어 사이에서 데이터 및 정보 교환의 마땅한 표준이 없는 상태였다. SOAP는 이러한 문제점을 해결하기 위해 설계된 최초의 표준 프로토콜이다. 4. SOAP의 특징 SOAP…</content:encoded></item><item><title><![CDATA[[Network] HTTP 상태(응답) 코드 정리하기]]></title><description><![CDATA[HTTP 상태(응답) 코드를 정리해보자.]]></description><link>https://millo-L.github.io/HTTP-상태코드-정리하기/</link><guid isPermaLink="false">https://millo-L.github.io/HTTP-상태코드-정리하기/</guid><pubDate>Sat, 06 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 백엔드 개발자로서 HTTP 기반 서버를 생성할 때 가장 중요한 점 중 하나는 HTTP 상태 코드를 알맞게 사용하는 것이다. HTTP 상태 코드는 매우 잘 정리된 형식으로, 이 상태 코드만 확인하더라도 클라이언트가 서버로 보낸 요청에 대한 응답이 성공인지 실패인지 또한, 구체적으로 어떤 성공인지 어떤 실패인지를 자세히 알 수 있다. 이는 백엔드 개발자와 프런트엔드 개발자 모두에게 장점으로 작용한다. 물론, 더 자세한 정보들을 추가적으로 보내는 경우도 있지만, 상태 코드를 맞춰둔다면 코드 리뷰는 물론, 프런트 엔드 개발자들이 API 호출 결과에 따른 예외처리를 진행하는 게 훨씬 수월할 것이다. 그럼 HTTP 상태 코드의 종류와 쓰임새에 대해 알아보도록 하자. 2. HTTP 상태 코드의 좋은 예시/나쁜 예시 우선, 나쁜 예시를 보고 잘못된 점을 확인한 후 좋은 예시를 보도록 하자.
만약 사용자가 특정 브라우저에 ID, PW를 입력하고 로그인을 하려한다고 가정해보자. 로그인을 요청하고 반환된 응답이 아래와 같다고 했을 때 이상한 점을 생각해보자. 다 생각해봤는 가? 일단 응답 코드와 본문의 내용이 다르다. 본문의 내용에 따라서 로그인이 실패했다고 가정하자. 그렇다면 로그인을 실패했다는 건데, 그렇다면 status code는 200 OK가 아니고 401 Unauthorized 이어야 한다. 또한, 이렇게 상태 코드를 지정하게 되면 response body에 status, statusMessage를 따로 전송할 필요가 없다. 만약 어떤 부분이 잘못됐는 지를 명시하고 싶다면, ID 오류인지, PW 오류인지를 알려주는 error message를 별도로 지정하면 된다. 만약, 백엔드 개발자가 위와 같이 API를 구현했다면 아마 프론트엔드 개발자와 다신 못 볼지도 모른다. 바로 짐 싸고 도망갈 수도 있기 때문이다... 위의 안 좋은 예시를 위에 설명한대로 좋은 예시로 바꿔보도록 하자. 위와 똑같이 로그인 요청에서 실패했다고 가정하자. 아래와 같이 상태 코드를 40…</content:encoded></item><item><title><![CDATA[[Python] Ubuntu:18.04 에서 jupyter notebook 사용하기]]></title><description><![CDATA[Ubuntu:18.04에서 juypter notebook을 설치하고 실행해보자.]]></description><link>https://millo-L.github.io/Python-Ubuntu1804에서-jupyter-notebook-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Python-Ubuntu1804에서-jupyter-notebook-사용하기/</guid><pubDate>Thu, 04 Feb 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 빠른 개발을 원하는 환경에서는 jupyter notebook을 사용하는 경우가 많다. 워낙 편리하기도 하고 직접 AWS 같은 서비스를 사용할 때도 콘솔로 접속하지 않아도 사용할 수 있기 때문이다. 물론, 개발 단계에서는 이렇게 사용하지만 운영 단계에서는 jupyter notebook은 이용하지 않는 게 좋다. 보안에 취약점이 될 수 있기 때문인데, 물론 보안에 그만큼 신경을 쓴다면 써도 괜찮지 않을까 하는 생각이 든다. 그럼 Ubuntu:18.04 환경에서 jupyter notebook을 설치하는 방법에 대해 알아보자. 2. jupyter notebook 설치 3. jupyter notebook 비밀번호 3-1. 비밀번호 생성 3-2. jupyter notebook 환경 설정 파일 생성 및 수정 4. jupyter notebook 실행 후 백그라운드 모드로 실행 5. 재부팅 시 jupyter notebook 자동 실행 6. HTTPS TLS/SSL 인증을 원하는 경우 이 포스팅을 방문해서 letsencrypt를 이용한 HTTPS를 구성하고 NGINX를 리버스 프록시로써 jupyter notebook와 연결해서 사용하면 된다. [참고] https://www.youtube.com/watch?v=VrVJWwk1YyQ</content:encoded></item><item><title><![CDATA[[Node.js] Socket.io 간단한 채팅 구현하기]]></title><description><![CDATA[nodejs에서 socket.io를 사용하여 간단한 chat을 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-socketio-간단한-채팅-구현하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-socketio-간단한-채팅-구현하기/</guid><pubDate>Thu, 04 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 오늘은 socket.io를 통한 웹소켓 연결을 진행해보도록 하자. 이번에는 간단하게 html 클라이언트와 연결해서 간단한 채팅을 구현해볼 예정이다. 크게 어려운 부분은 없으므로 잘 따라오면 socket.io가 이런 거구나 정도는 이해할 수 있을 것이다. 2. 결과 화면 UI는... 말을 아끼자... 일단 아래의 코드를 작성 후 실행하면 이렇게 채팅이 최종적으로 구현된다.
여기를 눌러 확인해보자. 3. 환경 설정 개발 환경은 특별한 점은 없고 아래와 같이 코드를 작성할 폴더와 필수적인 모듈을 설치해보자. socket.io는 반드시 2.3.0 버전을 아래와 같이 설치해야한다. 4. 폴더 구조 폴더 구조는 아래와 같다. 5. chat.html 간단한 클라이언트의 html 파일이다. socket.io를 사용하기 위해 를 먼저 추가해줘야 한다. 그 이후 socket을 서버와 연결하고 아래의 설명과 같이 송신, 수신 이벤트를 작성하면 된다. 6. server.js 서버는 더욱 간단하다. 클라이언트에게 전달받은 내용을 전달하기만 하면 되기 때문에, 큰 무리 없이 이해할 수 있을 거라 생각한다. 참고로 express.js와 연결하지 않고 http만 사용해도 되지만 후에 사용할 때 확장성을 위해 express.js와 연동했다. [참고] https://socket.io/docs/v2/ https://socket.io/docs/v2/client-installation/index.html https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement</content:encoded></item><item><title><![CDATA[[React Native] 커스텀 로딩 애니메이션 스크린 구현하기]]></title><description><![CDATA[React native에서 이미지 전환을 통해 커스텀 로딩화면을 만들어 보자.]]></description><link>https://millo-L.github.io/ReactNative-커스텀-로딩-애니메이션-스크린-구현하기/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-커스텀-로딩-애니메이션-스크린-구현하기/</guid><pubDate>Wed, 03 Feb 2021 06:00:00 GMT</pubDate><content:encoded>1. 서론 배달의 민족 등과 같은 어플을 보면 로딩 중 커스터마이징 한 로딩 화면을 볼 수 있다. 이런 화면을 만드려면 어떻게 해야 할까 생각을 하다가 직접 setInterval 함수를 사용해서 구현해봤다. 2. 결과 화면 5초 짜리 GIF 파일이어서 다소 끊기는 느낌이 나지만 실제 동작 과정은 훨씬 자연스럽다. 여기를 눌러서 확인해보자. 3. 환경 설정 react native 0.62.2 버전을 typescript와 함께 설치한다. 또한, 아래와 같은 파일 경로를 생성한다. 필요한 이미지 파일은 이 파일을 설치해서 압축을 풀어 사용하면 된다. 4. App.tsx 아래와 같이 setInterval 함수를 생성해서 이미지가 계속해서 변경되게 코드를 작성한다. 여기서 중요한 점은 해당 페이지가 종료될 때 clearInterval 함수를 통해서 작동하고 있는 setInterval 함수를 초기화해줘야 한다는 것이다. 그다지 어렵지 않게 구현할 수 있었으므로 로딩 화면 제작 자체는 크게 어렵지 않을 것으로 예상된다.</content:encoded></item><item><title><![CDATA[[React Native] 배경 이미지 크기 자동으로 맞추기]]></title><description><![CDATA[React native에서 resizeMode 속성을 통해 배경 이미지의 크기를 자동으로 맞춰보자.]]></description><link>https://millo-L.github.io/ReactNative-배경-이미지-크기-자동으로-맞추기/</link><guid isPermaLink="false">https://millo-L.github.io/ReactNative-배경-이미지-크기-자동으로-맞추기/</guid><pubDate>Wed, 03 Feb 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 출시 준비중인 어플리케이션의 백그라운드 이미지를 설정하다가 width, height를 각각 100%로 지정했음에도 기기 해상도 별로 크기가 제각각으로 깨지는 현상이 발생했다. 이에 방법을 찾아보니 생각보다 간단하게 해결되어 이 포스팅을 작성한다. 2. 해결방법 아래의 예시 코드처럼 resizeMode=&quot;stretch&quot; 를 적용하면 지정한 크기에 꽉 차게 배경 이미지가 생성되고 해상도에 상관 없이 깨지지 않고 유지된다. 만약, 다른 방식을 원하는 사람들은 아래의 stackoverflow 주소를 들어가면 여러 가지 해결 방법들을 볼 수 있다. [참고] https://stackoverflow.com/questions/29322973/whats-the-best-way-to-add-a-full-screen-background-image-in-react-native?rq=1</content:encoded></item><item><title><![CDATA[[Node.js] passport Google OAuth 2.0 로그인 사용하기]]></title><description><![CDATA[Node.js에서 Google OAuth 2.0로 로그인을 해보자.]]></description><link>https://millo-L.github.io/Nodejs-passport-Google-OAuth-2-로그인-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-passport-Google-OAuth-2-로그인-사용하기/</guid><pubDate>Wed, 03 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅에서 OAuth 2.0이 무엇이고 종류에 따른 인증 방식에 대해 알아봤다. 그럼 실제로 node.js에서 OAuth 2.0을 통한 구글 로그인을 구현해보도록 하자. 이 포스팅에서 구글 로그인을 구현할 때 사용할 모듈은 passport로 passport로 session을 관리하는 부분이 포함되기 때문에 만약 잘 모르는 부분이라면 이 포스팅을 참고하기 바란다. 2. Google Developers Console에서 OAuth 2.0 클라이언트 생성 https://console.developers.google.com/apis 에 접속해서client ID와 client secret를 발급받아야 한다. 아래의 그림 1과 같이 OAuth 클라이언트 ID를 생성한다.  아래의 그림2와 같이 애플리케이션 유형을 웹 애플리케이션으로 설정하고, 이름은 임의로 수정 가능하다. URI는 실습을 수행하기 위해 아래와 같이 사용하고, 실습을 마친 후에 원하는 URI로 수정하기 바란다.  아래의 그림3과 같이 생성된 클라이언트 ID와 보안 비밀번호를 각각 복사해둔다. 만약 이 페이지를 실수로 넘어갔다면 OAuth 2.0 클라이언트 ID 부분에서 생성된 이름을 클릭하면 다시 볼 수 있는 화면이 나온다.  3. 환경 설정 전제 조건 
Node.js는 당연히 설치되어 있어야 한다. 
MySQL로 DB Session을 구현할 것이므로 MySQL을 설치하기 바란다. 
당연히 MySQL은 RDS나 Docker 등의 원격 DB로 대체 가능하다. 하지만 MySQL을 사용하길 원치 않는 사람이 있다면, 이 포스팅을 방문해 memory store 또는 file store를 적용해도 무방하다. 세션 부분만 변경하면 되기 때문에 어려움 없이 대체 가능하다.
우선, 실습을 진행할 폴더를 생성하고 필요한 모듈을 설치하자. 구글 로그인 버튼 이미지를 파일 다운로드를 눌러 다운로드 받도록 하자. 이 포스팅에서는 다운로드 받은 이미지 파일들 중 /web/2x/btn_google_signin…</content:encoded></item><item><title><![CDATA[OAuth 2.0 기반 인증 방식]]></title><description><![CDATA[OAuth 2.0 기반 인증 방식의 원리와 특징에 대해 알아보자.]]></description><link>https://millo-L.github.io/OAuth2-기반-인증방식/</link><guid isPermaLink="false">https://millo-L.github.io/OAuth2-기반-인증방식/</guid><pubDate>Tue, 02 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅까지 Session과 JWT 기반 인증 방식에 대해 알아봤다. Session과 JWT 기반 인증 방식은 모두 자신의 사이트에서 인증을 진행하기 위한 방식이다. 이 방식들로는 내가 만든 사이트의 유저가 google 또는 facebook 등에 접근할 수 있는 권한을 가질 수 없다. 생각해보면 당연한 것이다. 해당 사이트들이 우리가 신뢰할 수 있는지 확인할 수 있는 방법이 없고, 우리 사이트에서 사용자들의 google 또는 facebook 계정 비밀번호를 보관할 수는 없는 노릇이기 때문이다. 이 문제를 해결하기 위해 OAuth 2.0이 하나의 표준으로 자리 잡고 타사의 사이트에 대한 접근 권한을 얻고, 그 권한을 이용하여 개발할 수 있는 환경을 제공하는 프로토콜로써 등장했다. 그럼 더 자세히 알아보도록 하자. 2. OAuth 2.0이란? 정의 
OAuth 2.0은 로그인하지 않고도 제삼자에게 서비스를 제공할 수 있도록 하는 표준 사용자 인증 프로토콜이다. 쉽게 말하면 서론에서 설명한 대로 google, facebook 등과 같은 서비스의 계정으로 제3의 서비스에 로그인하여 등록되어 있는 정보나 해당 사이트들(google, facebook 등)의 기능을 사용할 권한을 부여받는 표준 프로토콜이다.
OAuth 2.0은 HTTPS 환경에서만 작동한다. 만약, Ubuntu:18.04를 사용한다면 이 포스팅에서 HTTPS를 무료 발급 받으면 된다. 3. OAuth 2.0과 JWT의 차이점 둘 다 token 인증 방식을 사용한다는 점이 동일하지만, 사실 둘은 다르다. OAuth 2.0은 표준 프로토콜로 정의되고 JWT는 token의 형식으로 정의된다. 아래의 stackoverflow 사이트를 참고한 것이므로 자세한 사항은 사이트를 방문해 보기 바란다. https://stackoverflow.com/questions/39909419/what-are-the-main-differences-between-jwt-and-oauth-authentication…</content:encoded></item><item><title><![CDATA[[Node.js] passport session 사용하기]]></title><description><![CDATA[nodejs에서 passport 모듈의 session을 사용한 인증 방식을 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-passport-session-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-passport-session-사용하기/</guid><pubDate>Mon, 01 Feb 2021 06:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅까지 express-session, jwt에 대한 이론과 실제 모듈 사용까지 진행해봤다. 지난 포스팅까지는 login, logout에 별다른 모듈을 쓰지 않고 구현했지만 오늘은 passport.js를 사용해서 구현해보려 한다. passport.js는 OAuth 2.0을 지원하는 모듈로써 로컬에서 동작하는 로그인도 당연히 지원하는 오픈 소스이다. 때문에 굉장히 많은 사랑을 받고 있는 데, 후에 포스팅하게 될 구글 로그인의 실습을 이 모듈로 진행할 것이기 때문에 미리 숙지할 겸, 그리고 이런 모듈도 있다는 것을 알릴 겸해서 이 포스팅을 작성하게 됐다. 2. 환경설정 전제 조건 
Node.js는 당연히 설치되어 있어야 한다. 
MySQL로 DB Session을 구현할 것이므로 MySQL을 설치하기 바란다. 
당연히 MySQL은 RDS나 Docker 등의 원격 DB로 대체 가능하다. 하지만 MySQL을 사용하길 원치 않는 사람이 있다면, 이 포스팅을 방문해 memory store 또는 file store를 적용해도 무방하다. 세션 부분만 변경하면 되기 때문에 어려움 없이 대체 가능하다.
우선, 실습을 진행할 폴더를 생성하고 필요한 모듈을 설치하자. 3. 폴더 구조 4. login.html 간단한 로그인 페이지이다. id와 pw를 입력하고 제출 버튼을 누르면 서버에 로그인 요청을 보낸다. 5. main.html 로그인이 성공했을 때 출력되는 페이지이다. logout 링크만 존재한다. 6. index.js 특별한 점이 있다면 passport를 app.use(passport.initialize())해서 반드시 초기화를 해야 한다는 점이다. 물론 세션을 사용하기 때문에 app.use(passport.session())도 반드시 초기화해야 한다. 그 이후의 설명은 아래의 코드와 함께 작성했다.
처음 공부하는 사람에게 헷갈릴 수 있는 점이 있다면, serializeUser와 deserializeUser이다. serializeUser…</content:encoded></item><item><title><![CDATA[[Node.js] JWT 사용하기]]></title><description><![CDATA[nodejs에서 JWT를 사용한 인증 방식을 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-JWT-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-JWT-사용하기/</guid><pubDate>Mon, 01 Feb 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅에서는 JWT 기반 인증 방식에 대해 알아봤다. 이번엔 Node.js로 JWT를 직접 구현해보도록 하자. 구현 방법은 어렵지 않으나 이 포스팅에서는 jsonwebtoken을 사용한 토큰의 발급과 만료 기간 설정 등 기본 개념에 대한 구현만 하도록 하겠다. 운영하려는 서비스마다 JWT를 사용하는 방식이나 메모리 적재 여부 등이 다르기 때문에 위의 인증 방식 정리하기에서 JWT 기반 인증 방식의 이론적 개념을 보고 필요한 부분을 수정하여 구현해보길 바란다. 2. 환경 설정 우선, 실습을 진행할 폴더를 생성하고 필요한 모듈들을 모두 설치하도록 하자. 3. 폴더 구조 폴더 구조는 아래와 같이 access token과 refresh token의 secret key를 저장할 환경 변수 파일(.env)과 실제 구현할 jwt.js 파일로 구성된다. 4. .env 환경 변수를 저장할 파일로써 access token과 refresh token의 secret key를 저장할 파일이다. 일반적으로 secret key는 절대로 외부로 유출되서는 안 되므로 보안을 철저히 해야 한다. 아래의 secret key는 샘플로 만든 랜덤 한 키이다. 5. jwt.js 아래의 코드는 임의로 만든 users라는 id, pw 배열을 지정하고(실제로는 pw는 반드시 암호화하여 DB에 저장해야 한다.), 로그인 시 해당 id, pw와 일치하는 요청이 들어오면 access token과 refresh token을 발급하는 코드이다. 이렇게 발급된 token은 클라이언트에서 요청을 보낼 때마다 headers에 authorization: &apos;bearer &apos; + accessToken 방식으로 넘겨받아 해당 요청의 token이 유효한 지 검사한다. 자세한 설명은 아래에서 예시를 보며 설명하도록 하겠다.
이 예제에서는 /user 요청에서 token이 유효할 시 id와 pw를 넘겨주는 응답을 보냈는 데 실제로는 pw…</content:encoded></item><item><title><![CDATA[[Node.js] express session 사용하기]]></title><description><![CDATA[nodejs에서 session을 사용한 인증 방식을 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-express-session-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-express-session-사용하기/</guid><pubDate>Mon, 01 Feb 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅에서 Session 인증 방식에 대해서 알아봤다. 그렇다면 Node.js로 어떻게 Session 인증 방식을 구현할 수 있을까? 이번 포스팅에서는 Session의 저장 방식 3가지(메모리, 디스크 또는 DB) 모두를 간단하게 구현해보도록 하겠다. 만약 Session 인증 방식에 대한 기본 개념이 명확하지 않다면 지난 포스팅을 보고 오는 것을 추천한다. 2. 환경 설정 전제 조건 
Node.js는 당연히 설치되어 있어야 한다. 
MySQL로 DB Session을 구현할 것이므로 MySQL을 설치하기 바란다. 
당연히 MySQL은 RDS나 Docker 등의 원격 DB로 대체 가능하다. 우선, 실습을 진행할 폴더를 생성하고 필요한 모듈들을 모두 설치하도록 하자. 3. Memory session store 처음으로 진행해볼 실습은 memory session store이다. 말 그대로 session의 데이터를 메모리에 저장하는 방식이다. 이 방식은 session 정보를 디스크나 DB에 저장하는 것보다 훨씬 빠른 반응 속도를 보인다는 장점이 있지만, 그만큼 메모리에 적재되는 session 양이 많아졌을 때는 부하가 심한 방식이기도 하다. 따라서, 메모리에 적재되는 양을 조절하거나 세션이 유지되는 기간을 조절하는 것이 중요하다. 아래의 코드는 브라우저로 http://localhost:8080 에 접속했을 때, 새로고침을 할 때마다 &apos;View: &apos; 옆에 있는 숫자가 증가하는 코드이다. 이런 방식이 가능한 이유는 session에 최근 num을 저장하고 있기 때문에 브라우저에서 새로고침이나 재접속을 해도 유지되는 것이다.
아래의 코드에서 checkPeriod는 memorystore에 저장될 기간을 정하는 것이다. 가장 최근 접속이 checkPeriod로 지정된 시간을 넘어가면 메모리의 세션은 자동 파기된다. 4. File session store 다음으로 진행해볼 실습은 file session store이다. 말 그대로 session…</content:encoded></item><item><title><![CDATA[JWT 기반 인증 방식]]></title><description><![CDATA[JWT 기반 인증 방식의 원리와 특징에 대해 알아보자.]]></description><link>https://millo-L.github.io/JWT-기반-인증방식/</link><guid isPermaLink="false">https://millo-L.github.io/JWT-기반-인증방식/</guid><pubDate>Sun, 31 Jan 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅에서는 Session 기반 인증 방식에 대해서 알아봤다. Session 방식에 여러 가지 장점이 있지만, 반대로 단점도 있었다. 그중 Session 기반 인증 방식의 단점인 확장성, CORS 방식 사용 시 쿠키 및 세션 관리의 어려움 등에 대한 해결 방법으로 제시된 인증 방식인 JWT에 대해 알아보도록 하자. 2. 간단한 용어 정리 2-1. JWT 정의 JWT는 JSON Web Token의 약자로 전자 서명 된 URL-safe (URL로 이용할 수 있는 문자만 구성된)의 JSON이다. 전자 서명은 JSON 의 변조를 체크할 수 있게 되어 있다. JWT는 속성 정보 (Claim)를 JSON 데이터 구조로 표현한 토큰으로 RFC7519 표준이다. JWT는 HMAC 알고리즘을 사용하여 비밀키 또는 RSA를 이용한 Public Key/ Private Key 쌍으로 서명할 수 있다.
JWT는 서버와 클라이언트 간 정보를 주고 받을 때 HTTP request header에 JSON 토큰(access token)을 넣은 후 서버는 별도의 인증 과정 없이 헤더에 포함되어 있는 JWT 정보를 통해 인증한다. 2-2. JWT 구성 JWT는 세 파트로 나누어지며 . 을 통해 구분되며, 순서대로 Header, Payload, Signature로 구성된다. Header는 토큰의 타입과 해시 암호화 알고리즘으로 구성되어 있다. 첫 째는 토큰의 유형 (JWT)을 나타내고, 두 번째는 HMAC, SHA256 또는 RSA와 같은 해시 알고리즘을 나타내는 부분이다. Payload는 토큰에 담을 클레임(claim) 정보를 포함하고 있다. Payload에 담는 정보의 한 ‘조각’을 클레임이라고 부르고, 이는 name / value의 한 쌍(JSON 형식)으로 이뤄져 있다. 토큰에는 여러 개의 클레임 들을 넣을 수 있다.
클레임의 정보는 등록된 (registered) 클레임, 공개 (public) 클레임, 비공개 (private) 클레임으로 세 종류가 있다. Signature…</content:encoded></item><item><title><![CDATA[Session 기반 인증 방식]]></title><description><![CDATA[Session 기반 인증 방식의 원리와 특징에 대해 알아보자.]]></description><link>https://millo-L.github.io/Session-기반-인증방식/</link><guid isPermaLink="false">https://millo-L.github.io/Session-기반-인증방식/</guid><pubDate>Sun, 31 Jan 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 일반적으로 웹 서버는 HTTP. 즉, stateless 프로토콜을 사용하기 때문에 웹사이트에서 사용자가 로그인한 회원인지에 대한 인증을 관리하는 방안이 필요하다. 한 번 로그인한 사용자가 버튼 하나를 누를 때마다 로그인을 다시 하게 된다면 어떤 일이 벌어질까? 아마 아무도 그 사이트를 사용하려 하지 않을 것이다. 이때 로그인한 사용자에 대한 정보를 저장하는 방식의 첫 번째로 Session 기반 인증 방식이 있다. 그렇다면 어떻게 동작하는지에 대해 그리고 장단점에 대해 알아보자. 2. 간단한 용어 정리 2-1. Session이란? 세션이란 일정 시간 동안 같은 사용자(정확하게 브라우저를 말한다)로 부터 들어오는 일련의 요구를 하나의 상태로 보고 그 상태를 일정하게 유지시키는 기술이라고 한다. 또한 여기서 일정 시간이란 방문자가 웹 브라우저를 통해 웹 서버에 접속한 시점으로부터 웹 브라우저를 종료함으로써 연결을 끝내는 시점을 말한다. 즉, 방문자가 웹서버에 접속해 있는 상태를 하나의 단위로 보고 세션이라고 칭한다. 2-2. Cookie란? 특정 웹 사이트를 방문했을 때 만들어지는 정보를 담는 파일을 지칭하는 것이 쿠키이며 쉽게 말해 상태 정보를 유지하는 기술이다. 2-3. Session과 Cookie의 차이점 쿠키의 경우는 방문자의 정보를 방문자 컴퓨터의 메모리에 저장하는 것을 말한다. 예를 들어, ID나 비밀번호를 저장하거나 방문한 사이트를 저장하는 데에 사용한다. 세션은 방문자의 요청에 따른 정보를 방문자 메모리에 저장하는 것이 아닌 웹 서버가 세션 아이디 파일을 만들어 서비스가 돌아가고 있는 서버에 저장을 하는 것을 말한다. 3. 동작 방식 사용자가 로그인을 요청하고 id, pw 정보가 유효하다면, 세션이 서버의 메모리 상에 저장된다. 이때 세션 식별키로 SessionId를 기준으로 정보를 저장한다. 서버에서 sessionId를 cookie에 담아 브라우저로 전달한다. 브라우저는 모든 request에 cookie(sessionId…</content:encoded></item><item><title><![CDATA[[Docker] ReactJS Dockerizing하기]]></title><description><![CDATA[ReactJS를 도커라이징해서 실행해보자.]]></description><link>https://millo-L.github.io/React-Dockerizing하기/</link><guid isPermaLink="false">https://millo-L.github.io/React-Dockerizing하기/</guid><pubDate>Sat, 30 Jan 2021 07:00:00 GMT</pubDate><content:encoded>1. 서론 개발 중 ReactJS를 dockerize 한 적이 있다. Dockerfile과 docker-compose.yml 파일로 dockerize를 했는 데 docker-compose.yml 작성 중 ReactJS가 제대로 작동하지 않는 것을 확인하고 무슨 문제인가 한참을 찾았던 경험이 있다. 따라서, 나와 비슷한 문제를 겪고 있는 사람들을 위해 이 포스팅을 작성한다. 결론부터 말하자면 문제는 tty와 stdin_open 값을 true로 줘야한다는 점이다. docker-compose.yml에서는 이 두 값을 true로 설정하면 되고, Dockerfile만을 사용해서 build 후 run할 때는 -it 를 붙여주면 된다. 이유는 ReactJS가 실행될 때 terminal과 stdin을 사용하기 때문이다. 2. 환경 설정 ReactJS를 생성해보자. 3. 폴더 구조 react app을 처음 생성한 모습 그대로의 폴더 구조이다. 다른 모듈을 설치하거나 특정 파일을 제거하는 등의 작업은 수행하지 않았다. 여기서 추가된 파일들은 .dockerignore, Dockerfile, docker-compose.yml 세 파일뿐이다. 4. .dockerignore Dockerfile에서 현재 폴더 목록을 COPY 할 때 제외할 파일 또는 폴더를 지정하는 파일이다. .gitignore가 git에 add하지 않을 파일 또는 폴더를 지정하는 것과 같은 역할을 한다. 5. Dockerfile dockerize-react를 dockerize 할 파일이다. Dockerfile에 명시된 명령어대로 build를 수행하여 이미지를 생성한다. 여기까지 진행했으면 react app을 dockerize할 준비가 완료된 것이다. Dockerfile을 빌드하기만 하면 된다. 이제 http://localhost:3000으로 접속하면 ReactJS의 초기화면을 볼 수 있다. 6. docker-compose.yml 만약, 다른 프로그램과 같이 실행하려 한다면 docker-compose.yml…</content:encoded></item><item><title><![CDATA[[JavaScript] Date 객체 사용하기]]></title><description><![CDATA[javascript의 Date 객체를 사용해서 시간과 날짜를 출력해보자.]]></description><link>https://millo-L.github.io/JavaScript-Date-객체-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/JavaScript-Date-객체-사용하기/</guid><pubDate>Sat, 30 Jan 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅에서는 node.js에서 moment.js 모듈을 사용하는 방법에 대해서 소개했다. 이번에는 JavaScript의 기본 내장 객체인 Date 객체에 대해 알아보도록 하자. 2. Date 객체 사용하기 2-1. 현재 날짜: new Date() 2-2. 특정 날짜 지정 2-3. UNIX 시간으로 나타내기 현재 시간 특정 시간 2-4. 년, 월, 일, 요일, 시간 받아오기 년: getFullYear() 월: getMonth() 1월(0) ~ 12월(11)로 정수를 반환한다. 일: getDate() 1일(1) ~ 31일(31)로 정수를 반환한다. 년, 월, 일 한 번에 받기 요일: getDay() 일(0) ~ 토(6)로 정수를 반환한다. 시: getHours() 분: getMinutes 초: getSeconds 시, 분, 초 한 번에 받기 [참고] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date</content:encoded></item><item><title><![CDATA[[Node.js] express static folder 지정하기]]></title><description><![CDATA[nodejs에서 express를 사용해 static folder를 지정해보자.]]></description><link>https://millo-L.github.io/Nodejs-express-static-folder-지정하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-express-static-folder-지정하기/</guid><pubDate>Sat, 30 Jan 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 처음 내가 Node.js로 웹사이트를 개발할 때 로컬에서 html 파일을 브라우저로 켰을 때는 css, js, image 파일들이 모두 제대로 적용됐는 데, node.js로 html 파일을 구동하면 아무것도 적용되지 않는 것이 너무 당황스러웠다. 뭔가 잘못된 것인가 하다가 로컬에서 html 파일을 구동할 때의 static files(css, js, image 등)와의 상대 경로와 node.js 서버를 사용하여 구동할 때의 상대 경로가 전혀 다르다는 것을 인지했다. 이 것을 해결하기 위해 static folder를 지정할 수 있고, 서버에서는 해당 static folder에 접근해서 static files를 가져온다. 따라서, html 파일을 작성할 때도 해당 url로 static files(css, js, image 등)의 상대 경로를 작성해야 한다. 2. 환경설정 간단한 html, css 프로젝트를 만들만한 폴더를 하나 추가하고 개발환경을 생성해보자. 3. 폴더 구조 폴더 구조는 아래와 같이 지정했다. static files(css, js, image 등)은 public이라는 폴더 내부에 나눠서 저장된다. 우리는 public이라는 폴더 자체를 static folder로 지정해서 그 내부의 static files를 사용할 예정이다. 4. html 파일 생성하기 static files에 대한 접근 확인만을 위해 테스트만을 진행하기 위해 html을 생성하는 것이므로 색깔을 가진 div 정사각형 블록 하나만 생성해보도록 하자. 여기서 주의할 점은  태그에서 href 부분의 경로이다. 우리는 서버를 이용해서 static files를 public 폴더에 저장해놨으므로 public 폴더 내부의 경로를 지정하면 /styles/block_style.css가 된다. 이는 html 파일이 서비스되고 있는 서버의 url을 기본으로 적용하게 되므로 전체적인 url은 http://localhost:8080/styles/block_style.css…</content:encoded></item><item><title><![CDATA[[Node.js] express cors 사용하기]]></title><description><![CDATA[nodejs의 cors.js를 사용해서 CORS 환경을 구축해보자.]]></description><link>https://millo-L.github.io/Nodejs-express-cors-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-express-cors-사용하기/</guid><pubDate>Fri, 29 Jan 2021 06:00:00 GMT</pubDate><content:encoded>1. 서론 리버스 프록시 서버로 NGINX를 두고 한 워크스테이션에서 Swagger와 node.js 서버를 함께 구동한 적이 있다. Swagger의 포트를 8085로 지정하고 node.js 서버는 443번으로 지정했는 데, CORS 에러가 발생해서 Swagger 페이지에서 샘플로 작성한 request를 node.js로 보낼 수 없었다. 그때 처음으로 CORS가 무엇인지 알게 됐다. 따라서, 해당 내용을 정리해두기 위해 CORS란 무엇인지, 그리고 node.js에서 문제를 해결하기 위해 어떻게 해야 하는지 포스팅을 작성하겠다. 2. CORS(Cross-Origin Resource Sharing)란 무엇인가? CORS란 자신이 속하지 않은 다른 도메인, 다른 프로토콜, 혹은 다른 포트에 있는 리소스를 요청하는 cross-origin HTTP 요청 방식이다. 아래의 [그림 1]을 보자. 왼쪽의 웹사이트는 domain-a.com(서버 A)으로 구동되고 있다. 파란색 이미지는 웹사이트가 구동중인 domain과 동일한 domain-a.com(서버 A)으로부터 자료를 요청하고 수신하지만 아래의 빨간색 이미지는 domain-b.com(서버B)이라는 다른 도메인에 자료를 요청하고 수신한다. 이러한 방식이 cross-origin HTTP 방식이다.  언뜻 보면 그냥 그러려니 하게 되는 데, 중요한 점은 서버는 기본적으로 CORS 방식을 제한해둔다. 즉, 사용하지 못하게 한다. 왜냐 하면, 특정 서버 리소스에 다른 임의의 웹 사이트들이 request를 보낼 수 있다면 악의적으로 특정 서버의 세션을 탈취하거나 서버에 무리가 가는 행위 등 문제가 생길 수 있는 행위를 할 수 있기 때문이다. 그럼 다른 사이트에서 나의 서버에 요청하는 것을 허가하고 싶을 때는 어떻게 해야 할까? 그 방식에는 모두에게 제한 없이 제공하는 방식과 본인이 직접 특정 도메인들만 허용하는 방식이 있다. 이 두 가지 방식을 node.js로 구현해보도록 하자. 3. node.js로 CORS…</content:encoded></item><item><title><![CDATA[[Node.js] mysql을 async/await로 처리하기]]></title><description><![CDATA[nodejs에서 mysql2.js로 async/await로 mysql connection을 사용해보자.]]></description><link>https://millo-L.github.io/Nodejs-mysql을-async-awiat로-처리하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-mysql을-async-awiat로-처리하기/</guid><pubDate>Fri, 29 Jan 2021 05:00:00 GMT</pubDate><content:encoded>1. 서론 node.js 에서 콜백 지옥을 피하기 위해서는 Promise 또는 async/await를 써야 한다. 이때 Promise를 선택하게 되면 다시 Promise chain의 콜백 지옥에 빠지게 된다. 그래서 대부분의 사람들이 사용하는 처리 방식이 async/await이다.(물론, Promise와 함께 사용하는 경우도 많다.) mysql도 이러한 async/await 방식으로 구현할 수 있다. 다만, 사용하는 모듈은 mysql 모듈이 아니고, mysql2 모듈이다. 다른 모듈이므로 반드시 mysql2를 설치해야한다. mysql은 async/await 방식 사용이 불가능하다. 만약, async/await에 대한 이해가 아직 부족하다면 이 포스팅을 읽고 오기 바란다. 2. 환경 설정 전제 조건 
mysql은 기본적으로 설치되어 있다고 가정한다. 
로컬 환경에 mysql이 깔려있지 않은 경우 여기로 들어가 설치하기 바란다. 
또한, 당연히 원격이나 docker를 이용한 MySQL을 이용해도 무방하다. node.js에서 mysql2 모듈을 테스트할 폴더를 생성하고 해당 폴더에 package.json을 생성한 후 mysql2를 설치한다. 로컬 또는 원격 MySQL에 아래의 예시 DB 및 테이블을 생성한다. 3. mysql2를 async/await로 구현하기 아래의 코드는 mysql2를 사용하여 mysql에 connection 한 뒤 SELECT, INSERT, UPDATE, DELETE가 이루어지는 결과를 console.log로 찍어보는 코드이다. async/await를 사용하니 기본의 mysql을 모듈을 사용할 때보다 훨씬 가독성이 증가하는 것을 알 수 있다. async/await의 장점은 코드를 읽는 순서로 실행되게 한다는 것이다. 간단한 예시이지만 이 코드를 이용해서 다른 코드를 작성하는 데 큰 어려움은 없을 것이다. [참고] https://www.npmjs.com/package/mysql2 https://millo-l.github.io/JavaScript…</content:encoded></item><item><title><![CDATA[[Node.js] nodemailer 사용하기]]></title><description><![CDATA[nodejs에서 nodemailer를 사용하여 이메일을 송신을 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-nodemailer-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-nodemailer-사용하기/</guid><pubDate>Fri, 29 Jan 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 nodemailer는 node.js 서버를 이용하여 mail을 보낼 수 있게 해주는 모듈이다. 대체적으로 node.js 서버를 구현할 때 개인정보 인증으로 이메일 인증을 진행할 때 많이 사용한다. 글쓴이도 사용자 회원가입 후 이메일 인증 그리고 비밀번호 변경 시에 nodemailer를 이용하여 이메일 인증 기능을 구현한 적이 있다. nodemailer는 gmail 계정이 존재해야 사용할 수 있다.(이메일을 보낼 계정이 있어야 하므로) 구현 자체는 어렵지 않으나 gmail 계정의 설정을 변경해야 한다. 2. Gmail 계정 설정 전제 조건 
Gmail 계정이 존재한다고 가정한다. nodemailer의 계정으로 사용할 계정으로 google 로그인을 진행한 후 아래의 첫 번째 링크를 클릭하여 액세스를 허용시킨다. 첫 번째 만으로 되는 경우도 있지만 간혹 제대로 nodemailer가 작동하지 않는 경우는 아래의 두 번째 링크 또한 허용하기 바란다. https://myaccount.google.com/lesssecureapps https://accounts.google.com/b/0/DisplayUnlockCaptcha 3. nodemailer로 이메일 전송하기 우선 이메일을 보낼 transport를 생성하고 mail을 보낼 수 있다. 첨부 파일 등의 기능도 존재하지만 이번 글에서는 이메일의 제목과 내용을 보내는 코드만 작성했다. [참고] https://nodemailer.com/about/</content:encoded></item><item><title><![CDATA[[NGINX] Ubuntu:18.04에서 letsencrypt HTTPS 환경 구축하기]]></title><description><![CDATA[Ubuntu:18.04에서 letsencrypt와 certbot을 사용하여 NGINX HTTPS 환경을 구축해보자.]]></description><link>https://millo-L.github.io/Ubuntu-1804에서-letsencrypt-HTTPS-환경구축/</link><guid isPermaLink="false">https://millo-L.github.io/Ubuntu-1804에서-letsencrypt-HTTPS-환경구축/</guid><pubDate>Thu, 28 Jan 2021 04:00:00 GMT</pubDate><content:encoded>1. 서론 개발자들이 무료로 HTTPS 환경을 사용할 수 있게 letsenrypt라는 비영리 사이트에서 SSL/TLS 인증서를 제공해준다. SSL/TLS에 관해서는 다음에 포스팅을 하도록 하자. 간단하게 말하자면 클라이언트와 서버가 해당 웹페이지를 이용해서 정보를 주고받을 때 다른 사람이 패킷을 빼돌려도 어떤 정보인지 알아낼 수 있게 암호화는 방식이다. 구현은 생각보다 매우 간단하다. 이 포스팅은 Ubuntu 환경에 맞춰서 작성한 것이므로 운영체제 별로 다를 수 있다. 2. 구현 전제 조건 
개인이 소유한 도메인이 있다고 가정한다. 
만약 도메인을 보유하고 있지 않다면 여기를 방문해서 회원가입 후 무료 도메인을 구하기 바란다. 우선은 Ubuntu 환경에 NGINX를 설치한다. 이후에는 NGINX HTTP에 대한 방화벽을 해제한다. (AWS 환경의 경우 외부에 포트를 열지말지를 EC2 보안정책에서 따로 설정할 수 있다.) 이제 NGINX의 설정 파일에 아래와 같이 보유하고 있는 도메인 명을 입력하고 저장한다. NGINX를 재실행한다. Certbot을 설치한다. Certbot으로 nginx에 설정한 도메인을 인증하고 HTTPS 인증서를 자동 발급 및 명시한다. Letsencrypt의 SSL/TLS 인증서는 최대 3개월 간 보존되고 파기되므로 수동으로 갱신해야된다는 귀찮음이 있다. 하지만 이 문제를 해결하기 위해서 certbot에서는 자동으로 3개월마다 갱신해주는 자동화 기능을 제공한다. 위의 방식을 그대로 따라온다면 무리 없이 letsencrypt의 SSL/TLS 인증서를 발급 받을 수 있을 것이다. HTTPS 웹페이지를 구현해보고 싶은 혹은 구현해야 하는 개발자들에게 이 포스팅이 도움이 됐으면 한다. [참고] https://letsencrypt.org/ https://certbot.eff.org/</content:encoded></item><item><title><![CDATA[[Docker] Ubuntu:18.04에서 Docker 설치하기]]></title><description><![CDATA[Ubuntu:18.04에서 docker를 설치해보자.]]></description><link>https://millo-L.github.io/Ubuntu-1804에서-Docker-설치하기/</link><guid isPermaLink="false">https://millo-L.github.io/Ubuntu-1804에서-Docker-설치하기/</guid><pubDate>Wed, 27 Jan 2021 14:00:00 GMT</pubDate><content:encoded>1. 서론 매번 공식 문서를 찾아서 설치하는 게 귀찮아서 블로그에 포스팅한다. 이게 제대로 동작되지 않으면 다시 공식 문서를 확인해서 수정할 예정이다. 혹시나 나처럼 귀찮은 사람을 위한 포스팅이다. 2. 설치 아래의 실행 명령을 순서대로 처리하면 설치가 완료된다. [참고] https://docs.docker.com/engine/install/ubuntu/</content:encoded></item><item><title><![CDATA[[Node.js] moment 사용하기]]></title><description><![CDATA[nodejs에서 moment.js를 사용해보자.]]></description><link>https://millo-L.github.io/Nodejs-moment-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-moment-사용하기/</guid><pubDate>Wed, 27 Jan 2021 13:00:00 GMT</pubDate><content:encoded>1. 서론 node.js는 javascript 기반으로 기본적으로 시간 및 날짜 오브젝트인 Date를 가지고 있다. 하지만 Date 오브젝트를 사용하여 코드를 작성하면 가독성이 떨어지는 경우가 생겨 moment.js를 사용하는 경우가 있다. 물론 성능과 속도 측면에서 보면 moment가 뒤쳐질 수 있으나 경우에 따라서 개발자가 잘 결정해서 사용하는 것이 중요하다. 2. 환경 설정 우선, moment.js를 설치하고 실행할 폴더를 생성하고, 해당 폴더에 package.json 생성 및 moment.js 설치를 진행한다. moment.js 사용하기 3-1. 현재 날짜: moment() 3-2. 특정 날짜 지정: moment(&apos;date&apos;) 3-3. 형식 지정: format() 3-4. 날짜 더하거나 빼기: add(), subtract() 날짜 더하거나 뺄 때 생길 수 있는 문제점 한 moment 변수를 기준으로 날짜를 연속적으로 더하거나 빼게 되면 해당 변수도 add or subtract 함수를 실행하는 도중 값이 변하게 된다. 해결 방법: clone() add or subtract를 하기 전에 clone() 함수를 사용하면 된다. 3-5. 시간 순서 비교 isBefore(): moment()의 날짜가 isBefore 파라미터 날짜보다 이전인지 여부 isAfter(): moment()의 날짜가 isAfter의 파라미터 날짜보다 이후인지 여부 isSame(): moment()의 날짜가 isSame의 파라미터 날짜와 같은지 여부 isSameOrBefore(): moment()의 날짜가 isSameOrBefore의 파라미터 날짜와 같거나 이후인지 여부 isSameOrAfter(): moment()의 날짜가 isSameOrAfter의 파라미터 날짜와 같거나 이후인지 여부 isBetween(): moment()의 날짜가 isBetween의 파라미터들 사이의 날짜인지 여부 isBetween…</content:encoded></item><item><title><![CDATA[[Raspberry pi] 부팅 시 프로그램 자동 실행하기]]></title><description><![CDATA[Raspberry pi를 부팅했을 때 프로그램이 자동실행하게 설정해보자.]]></description><link>https://millo-L.github.io/Raspberry-pi-부팅시-프로그램-자동-실행하기/</link><guid isPermaLink="false">https://millo-L.github.io/Raspberry-pi-부팅시-프로그램-자동-실행하기/</guid><pubDate>Wed, 27 Jan 2021 12:00:00 GMT</pubDate><content:encoded>1. 서론 작년에 교차로 보행자 안전 알리미 프로젝트를 개발하면서 일반 교차로 CCTV와 비슷한 사양의 영상 데이터를 실시간으로 얻기 위해 라즈베리 파이를 사용한 적이 있다. 카메라 모듈을 통해 촬영한 데이터를 서버 쪽에 TCP 소켓을 통해 전달했는 데 라즈베리 파이의 전원이 켜짐과 동시에 서버와 TCP 소켓을 연결하고 이미지를 송신하는 부팅 시 자동 실행 기능이 필요했다. 2. 방법 방법은 생각보다 정말 간단하다. rc.local 파일을 수정하는 것이다. 위의 rc.local파일을 켜면 아래와 같이 기존의 설정들이 기록되어 있다. 여기서 코드의 맨 아랫줄로 가서 exit 0 바로 윗줄에 자신이 실행시키고자 하는 프로그램의 실행 명령어를 작성하면 된다. 여기서 중요한 점은 해당 명령어를 작성해야 하는 위치와 명렁어 맨 뒤에 반드시 &amp;을 붙여야 한다는 것이다. 실제로 입력한 코드는 아래의 한 줄의 코드가 전부이다. 이렇게 작성한 후 저장을 하고 raspberry pi를 재부팅하고 자동 실행이 되는지 여부를 체크하면 된다. 혹시 다른 방식의 자동 실행을 원하는 경우는 아래에 있는 참고 링크를 타고 가길 바란다. [참고] https://m.blog.naver.com/emperonics/221770579539</content:encoded></item><item><title><![CDATA[[Node.js] express router 사용하기]]></title><description><![CDATA[nodejs의 express.js의 router를 사용하여 서버를 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-express-router-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-express-router-사용하기/</guid><pubDate>Wed, 27 Jan 2021 11:00:00 GMT</pubDate><content:encoded>1. 서론 node.js의 Restful API들을 모두 한 js 파일에 작성하게 되면 코드를 알아보기가 점점 힘들어진다. 그렇기 때문에 토픽에 맞는 router를 생성해서 path를 지정하면 각 js별로 토픽이 정해져 있어 유지 보수가 더 간단해지고 팀원들 간의 코드 리뷰에도 큰 도움이 된다. 시작하기에 앞서 지난 시간에 포스팅한 코드를 사용할 것이므로 만약 이 포스팅에 먼저 들어왔다면 여기로 가서 지난 포스팅을 간략하게 읽고 오길 바란다. 2. 폴더 구조 우리는 아래의 구조로 간단한 라우터들을 구현할 것이다. 먼저 index.js에서 요청을 받아서 각각의 path에 따라 account.js(전 시간의 rest.js)와 helloworld.js에 요청을 넘겨서 처리할 것이다. 3. express router 구현하기 3-1. index.js index.js 파일은 user의 request가 처음 도달하는 js이다. 여기서 각각의 router들(accout.js, helloworld.js)에게 request를 넘겨주어 처리를 한다. 3-2. helloworld.js 위의 index.js에서 &quot;/helloworld&quot; path로 helloworld.js를 routing했으므로 helloworld.js의 동작을 확인하기 위해서는 포스트맨을 이용해서 http://localhost:8080/helloworld에 접속해보면 된다. 3-3. account.js(전 포스팅의 rest.js) 위의 index.js에서 &quot;/account&quot; path로 account.js를 routing했으므로 account.js의 동작을 확인하기 위해서는 포스트맨을 이용해서 http://localhost:8080/account에 접속해보면 된다. [참고] https://expressjs.com/ https://www.postman.com/</content:encoded></item><item><title><![CDATA[[Node.js] express 사용하기]]></title><description><![CDATA[nodejs의 express.js를 사용하여 서버를 구현해보자.]]></description><link>https://millo-L.github.io/Nodejs-express-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Nodejs-express-사용하기/</guid><pubDate>Wed, 27 Jan 2021 10:00:00 GMT</pubDate><content:encoded>1. 서론 node.js를 서버로 사용하는 경우 가장 표준으로 인식되는 express.js에 대해 알아보도록 하자. 사실 크게 어려운 부분은 없으며, Restful API를 개발하기에 매우 간편하다. 2. 환경설정 전제 조건 
당연히 node.js는 설치돼있다고 가정한다. 
혹시 설치하지 않은 분은 여기를 클릭해서 설치하세요. 우선 폴더를 하나 만들어 node.js 개발 환경을 구축하도록 하자. 3. Hello world! 출력하기 가장 간단한 Hello world를 출력하는 코드를 작성해보자. 실행 후 브라우저 혹은 postman을 통해 http://localhost:8080으로 접속해보자. 4. Restful API 구현 user의 계정 정보를 CRUD하는 간단한 Rest API를 구현해보자. [참고] https://expressjs.com/</content:encoded></item><item><title><![CDATA[[Python] TCP image socket 구현하기(Server, Client)]]></title><description><![CDATA[python에서 TCP socket을 사용한 이미지 송수신을 구현해보자.]]></description><link>https://millo-L.github.io/Python-TCP-image-socket-구현하기-Server-Client/</link><guid isPermaLink="false">https://millo-L.github.io/Python-TCP-image-socket-구현하기-Server-Client/</guid><pubDate>Wed, 27 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 작년에 진행한 교차로 보행자 안전 알리미 프로젝트에서 Raspberry pi4와 인공지능 서버 사이의 TCP image socket을 구현했다. 실시간 영상 및 비디오 영상을 OpenCV를 사용하여 프레임 단위로 송수신하는 socket을 구현했다. 만약 Raspberry pi를 이용한다면 OpenCV 설치법이 좀 복잡해서 이 포스팅을 참고하길 바란다. 2. TCP image socket Server TCP socket으로 이미지를 송수신할 때 가장 중요한 것은 클라이언트에서 서버로 해당 이미지 데이터의 크기를 같이 보내는 것이다. TCP socket을 사용해서 한 번에 보낼 수 있는 데이터의 크기는 제한되어 있으므로 이미지 데이터를 string으로 변환해서 보낼 때 이 크기가 얼마나 큰 지가 중요하다. 따라서, 이미지의 크기를 먼저 받고 그 크기만큼만 socket에서 데이터를 받아서 다시 이미지 데이터의 형태로 변환해야 한다. 3. TCP image socket Client 3-1. cam 송신 Client에서는 Server에 이미지 데이터를 전송할 때 해당 이미지 데이터의 크기 정보를 같이 넘겨줘야 한다. 3-2. local video 송신 Client에서는 Server에 이미지 데이터를 전송할 때 해당 이미지 데이터의 크기 정보를 같이 넘겨줘야 한다. [GitHub] https://github.com/millo-L/Python-TCP-Image-Socket</content:encoded></item><item><title><![CDATA[[Python] 간단한 Anaconda 가상 환경 관리하기]]></title><description><![CDATA[python 개발을 편리하게 해주는 Anaconda 가상 환경을 관리 명령어에 대해 알아보자.]]></description><link>https://millo-L.github.io/Python-간단한-Anaconda-가상-환경-관리하기/</link><guid isPermaLink="false">https://millo-L.github.io/Python-간단한-Anaconda-가상-환경-관리하기/</guid><pubDate>Tue, 26 Jan 2021 08:00:00 GMT</pubDate><content:encoded>전제 조건 
당연히 Python과 Anaconda는 깔려있다고 가정한다.
혹시나 둘 중 하나가 깔려있지 않다면, 아래에 첨부한 각각의 링크에 접속해서 다운로드하기 바란다.  https://www.python.org/downloads/  https://docs.anaconda.com/anaconda/install/  1. Anaconda 가상 환경 생성, 제거, 활성화 ​ 2. Anaconda 가상 환경에서 사용한 모듈 목록 생성 node.js에 사용한 모듈들을 다른 사용자 및 환경에서 바로바로 설치해서 사용할 수 있게 해주는 가장 편리한 파일인 package.json 파일의 기능을 python에서는 requirements.txt가 한다. 그러기 위해서는 개발환경에 필요한 모듈들을 다운로드한 후 아래의 명령어를 터미널에 입력해야 한다. ​ 3. Anaconda 가상 환경에서 사용한 모듈 목록 다른 환경에서 그대로 세팅하기 만약, github 등의 협업 툴을 이용해서 다른 사용자가 개발한 혹은 다른 환경에서 개발한 python 코드를 실행해야 한다면, Anaconda에서 가상 환경을 만들어서 다른 프로젝트와 중복해서 사용하는 모듈들간의 버전 관리 등을 별도로 진행할 수 있다. 따라서, 자신의 원하는 가상 환경 이름과 python의 버전 정보로 가상 환경을 만든 후, git clone 받은 폴더에서 requirements.txt에 명시된 이름과 버전에 맞는 모듈들을 설치하면 된다.</content:encoded></item><item><title><![CDATA[[Raspberry pi] OpenCV4 설치하기]]></title><description><![CDATA[Raspberry pi에 OpenCV 4를 설치해보자.]]></description><link>https://millo-L.github.io/Raspberry-pi에-OpenCV4-설치하기/</link><guid isPermaLink="false">https://millo-L.github.io/Raspberry-pi에-OpenCV4-설치하기/</guid><pubDate>Mon, 25 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 작년에 교차로 보행자 안전 알리미 프로젝트를 개발하면서 일반 교차로 CCTV와 비슷한 사양의 영상 데이터를 실시간으로 얻기 위해 라즈베리 파이를 사용한 적이 있다. 카메라 모듈을 통해 촬영한 데이터를 서버 쪽에 TCP 소켓을 통해 전달했는 데 이때 이미지 가공을 위해 사용했던 툴이 OpenCV이다. 다른 많은 블로그들에서 OpenCV 설치를 따라 해 봤지만 매번 Makefile 도중 build과정에서 오류가 나서 다시 포맷을 돌리고 설치하기를 반복한 결과 유일하게 성공한 설치 방법이 있어 포스팅을 한다. 2. 설치 방법 사전 필요 작업 
당연히 라즈 베리 파이에 라즈비안 os가 설치된 상태라고 가정하고 시작하겠다. 설치 시에는 아래의 순서에 반드시 따라주기 바란다. (글쓴이도 띄엄띄엄 따라 하다가 제대로 실행되지 않아 처음부터 다시 시작한 경우도 있다.) [참고] https://www.youtube.com/watch?v=1paHdhIC9ug https://gist.github.com/sol-prog/ed383474872958081985de733eaf352d https://github.com/sol-prog/raspberry-pi-opencv</content:encoded></item><item><title><![CDATA[오픈소스 라이선스 고지 방법]]></title><description><![CDATA[오픈소스 라이선스 SW를 사용했을 때 사용한 오픈소스 라이선스를 고지하는 방법에 대해 알아보자.]]></description><link>https://millo-L.github.io/오픈소스-라이선스-고지-방법/</link><guid isPermaLink="false">https://millo-L.github.io/오픈소스-라이선스-고지-방법/</guid><pubDate>Sun, 24 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅까지 오픈소스 라이선스의 개념과 종류별 특징에 대해서 알아봤다. 이번에는 실제 모바일 애플리케이션에서의 고지 방법에 대해 알아보도록 하자. 2. 고지 방법 예시 2-1. 카카오톡 카카오톡을 먼저 살펴보면 공통적으로 모든 오픈소스 라이선스를 표기하는 특징이 있다. 오픈소스명 공식 홈페이지 주소 저작권 라이선스 종류  이렇게 어떤 오픈소스들을 사용했는지 표기를 한다. 하지만 이상한 점이 있다. 오픈소스는 항상 라이선스의 공식 문서 내용도 함께 기록되어 있어야 한다. 카카오톡의 경우 아래와 같이 사용한 라이선스의 문서를 따로 명시를 해두었다.  2-2. Chrome 다음으로 구글의 크롬을 살펴보자. 구글은 각 오픈소스의 리스트를 보여준다. 링크 형태로 제공한다. 위의 카카오톡의 오픈소스 라이선스와 비교해보면 저작권 부분이 제외되어 있다. 오픈소스명 공식 홈페이지 주소 라이선스 종류  또 다른 점을 찾자면, show license를 클릭하면 각각의 오픈소스의 라이선스를 별도로 표기하고 있다.  3. 고지 방법 위의 예시들로 보아 반드시 포함되어야 할 정보는 오픈소스명 공식 홈페이지 주소 라이센스 종류 라이선스 공식 문서 로 보인다. 물론, 라이선스 별로 코드 공개 여부 등을 알아봐야 한다. 오픈소스를 사용할 때는 반드시 각각의 라이선스 별로 어떤 필수 및 의무사항이 있는지 확인하고 반드시 의무들을 이행해야 한다. 만약 궁금한 사항이 생긴다면, 이 사이트에 문의를 해보기 바란다. 4. 느낀 점 이로써 오픈소스 라이선스에 관한 포스팅은 끝났다. 워낙 라이선스의 종류가 다양하다 보니 지켜야할 의무 사항도 각각 다르다. 그래도 좋은 오픈소스를 공유하고 사용할 수 있다는 점을 생각하면 그렇게 밑 보는 장사는 아닌 듯하다. 이 포스팅을 보는 모든 사람들도 꼭 의무사항을 반드시 이행하여 법적인 문제가 생기지 않았으면 좋겠다.</content:encoded></item><item><title><![CDATA[오픈소스 라이선스 종류]]></title><description><![CDATA[오픈소스 라이선스의 종류와 특징에 대해 알아보자.]]></description><link>https://millo-L.github.io/오픈소스-라이선스-종류/</link><guid isPermaLink="false">https://millo-L.github.io/오픈소스-라이선스-종류/</guid><pubDate>Sat, 23 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 지난 시간에는 오픈소스 라이선스란 무엇인가에 대해 알아봤다. 이번에도 OLIS(오픈소스 SW 라이선스 종합정보시스템)에서 정보를 얻었다. 따라서, 더 자세한 사항을 보고 싶다면 해당 사이트를 방문하기를 바란다. 이번 포스팅은 주요 오픈소스 라이선스의 종류 및 특징, 의무 등에 대한 포스팅이다. 2. 주요 오픈소스 라이선스 특징 비교 라이선스의 특징 및 의무사항 BSD Apache 2.0 GPL 2.0 GPL 3.0 LGPL 2.1 MPL CDDL CPL/EPL 복제·배포·수정의 권한 부여 O O O O O O O O 배포시 라이선스 사본 첨부  O O O O O O O 저작권고지사항 또는 Attribution 고지사항 유지 O O O O O O O O 배포시 소스코드 제공 의무(Reciprocity)와 범위   derivative work work based on the program derivative work file file module 조합저작물(Larger Work)작성 및 타 라이선스 배포 허용 O O   O O O O 수정시 수정내용 고지  O O O O O O O 명시적 특허라이선스의 부여  O  O  O O O 라이선시가 특허소송 제기시 라이선스 종료  O  O  O O O 이름, 상표, 상호에 대한 사용제한 O O    O O  보증의 부인 O O O O O O O O 책임의 제한 O O O O O O O O 2-1. BSD형 License BSD형 라이선스에는 BSD, MIT, Apache 라이선스 등이 포함되며, 비교적 오랜 역사를 가진 라이선스들이다. 이들 라이선스는 카피레프트(Copyleft) 조항을 포함하지 않으며, 의무사항도 비교적 간단하다. 라이선스의 특징 및 의무사항 BSD Apache 2.0 복제·배포·수정의 권한 부여 O O 배포시 라이선스 사본 첨부  O 저작권고지사항 또는 Attribution 고지사항 유지 O O 배포시 소스코드 제공 의무(Reciprocity)와 범위   조합저작물(Larger Work…</content:encoded></item><item><title><![CDATA[오픈소스 라이선스란 무엇인가?]]></title><description><![CDATA[우리의 주변에 있지만 제대로 알지는 못하고 있는 오픈소스 라이선스에 대해 알아보자.]]></description><link>https://millo-L.github.io/오픈소스-라이선스란-무엇인가/</link><guid isPermaLink="false">https://millo-L.github.io/오픈소스-라이선스란-무엇인가/</guid><pubDate>Fri, 22 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 현재를 살아가는 개발자들에게 없어서는 안 될 것이 바로 오픈소스 SW이다. 많은 개발자들이 오픈소스 SW의 개발자이면서 동시에 사용자이다. 글쓴이도 최근 애플리케이션 개발을 거의 마치고 배포를 앞두고 있는 시점인 데 처음으로 애플리케이션을 직접 배포하다 보니 오픈소스 라이선스를 등록하는 방법이나, 라이선스마다의 특징 및 의무 사항이 제각각이어서 많은 어려움을 느껴 이 포스팅을 쓴다. 아래의 정보들은 모두 OLIS(오픈소스 SW 라이선스 종합정보시스템)에서 수정을 거치지 않고 그대로 가져온 내용이므로 출처를 남긴다. 2. 오픈소스 SW란? 오픈소스 라이선스를 알기 전 먼저 오픈소스 SW란 무엇인지 알아야 한다. 일반적으로 오픈소스 SW란 소스코드가 공개되어 있는 SW를 말하며, 일반적으로 자유롭게 복제/배포/수정할 수 있다. 대표적인 예로는 Linux 커널 및 Apache 웹서버, FireFox 웹브라우저, MySQL 등이 있다. 전 세계적으로 오픈소스 SW는 FSF(Free Software Foundation)의 자유 SW(Free Software)를 포함한 넓은 의미로 사용되고 있다. 하지만 자유 SW와 오픈소스 SW는 역사 및 추구하는 이념 등에서 미묘한 차이가 있다. 1980년대부터 소프트웨어가 거대 부가가치 산업으로 발전하자, 지식재산권 및 라이선스 계약을 통하여 소프트웨어의 복제, 배포, 수정에 제한을 가하려는 움직임이 나타났다. 이런 움직임에 반대하여 리처드 스톨만은 FSF를 설립하고 자유 SW(Free Software) 운동을 전개하였다. 그러나 자유SW의 ‘자유(Free)’라는 단어가 일반인들에게 ‘무료’로 인식되고, 엄격한 GPL조항 때문에 상용 SW 개발에 이용할 수 없어 대다수 기업들이 자유SW운동에 참여하기를 꺼려하자 소스코드 공개에 보다 많은 참여를 이끌어내기 위하여 에릭 레이먼드, 브루스 페런스 등은 &apos;오픈소스 (Open Source)&apos; 라는 새로운 용어를 제안했다. 그리고 이러한 ‘오픈소스’는 1998년 오픈소스SW…</content:encoded></item><item><title><![CDATA[[Go] 구조체를 Class처럼 사용하기]]></title><description><![CDATA[Go언어의 구조체를 객체 지향 언어의 Class처럼 사용해보자.]]></description><link>https://millo-L.github.io/Go언어에서-구조체를-Class처럼-사용하기/</link><guid isPermaLink="false">https://millo-L.github.io/Go언어에서-구조체를-Class처럼-사용하기/</guid><pubDate>Wed, 20 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 최근 Go언어를 독학하기 시작했는 데 기존의 Javscript 생태계와는 다른 매력이 있는 것 같다. 나는 기존의 C++, JAVA, C## 등의 객체지향 컴파일 언어들을 이용해서 프로젝트를 진행해본 적이 있다. 이 때 class 상속 및 멤버 함수 등을 이용해서 편리하게 코딩을 경험이 있다. Go언어에 대한 정보를 들었을 때 큰 특징 중 하나는 Go언어에는 class가 없다는 점이었다. class가 없는 Go언어에서 객체 지향만큼 편리하게 코딩을 할 수 있을까? 이 내용에 대해서 포스팅을 해보도록 하겠다. 2. Go언어에서 제시한 대안 Go언어에서는 내가 위에서 말한 부분의 대체제를 명확하게 제시한다. 바로 Receiver와 Embedding이다. 이 둘을 구조체에서 사용하게 되면 객체 지향의 멤버 함수, 상속 구조와 동일한 환경을 구성할 수 있다.(멤버 변수의 역할은 구조체 내의 변수가 한다.) 그럼 어떻게 사용하는 지에 대해서 알아보자. 3. Receiver Receiver란 객체 지향 언어에서 멤버 함수의 역할에 해당한다. 바로 특정 함수를 특정 구조체만 사용할 수 있게 선언하는 것이다. 위의 코드에서 cry()함수가 바로 Receiver다. 거창한 것은 없지만 이렇게 함으로써 특정 구조체에서만 함수를 사용할 수 있게 지정할 수 있다. 그 외의 다른 변수에서의 호출이나, 일반적인 함수같은 호출은 error를 반환한다. 4. Embedding Embedding이란 객체 지향 언어에서 상속 관계의 역할에 해당한다. 특정 구조체를 다른 구조체가 상속한 것과 같은 효과를 낼 수 있다. 물론 위의 Receiver를 이용한 오버라이딩도 가능하다. 위의 코드에서 Cat과 Dog 구조체 안에 Animal 자료형만 선언하면 객체 지향 언어에서의 상속구조와 같은 기능을 사용할 수 있다. 위의 코드와 같이 kitty.introduce()와 kitty.Animal.introduce()가 모두 같은 값을 나타내는 것을 알 수 있다. 다만, Animal…</content:encoded></item><item><title><![CDATA[[Docker] Jenkins in Docker(Ubuntu18.04)]]></title><description><![CDATA[Docker in Docker로 jenkins docker를 만들어 CI/CD 환경을 만들어보자.]]></description><link>https://millo-L.github.io/Jenkins-in-Docker-Ubuntu1804/</link><guid isPermaLink="false">https://millo-L.github.io/Jenkins-in-Docker-Ubuntu1804/</guid><pubDate>Mon, 18 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 jenkins는 배포 자동화를 구현할 때 인기 있는 CI/CD 툴이다. 글쓴이도 몇 달 전 AWS 배포 자동화를 구현할 때 jenkins를 써본 적이 있는 데, Docker in Docker로 jenkins를 구현해보면 어떨까해서 진행해봤는 데 나름 괜찮은 것 같아 이 포스팅을 남긴다. 이 포스팅은 ubuntu18.04 버전에서 구현된 내용을 작성하는 것이므로 다른 os에 대해서는 조금씩 수정해서 쓰길 바란다. 2. 구현 방법 2-1. jenkins docker 실행 우선 jenkins의 docker image를 가져온다. 이후 8080 외부 포트로 젠킨스를 연동하고, volume을 공유한다. 여기서 docker.sock을 공유하는 이유는 도커 안에 있는 젠킨스가 내부 도커를 실행할 때 외부에서 실행되는 효과를 주기 위해서다. 이후에 jenkins docker의 log를 확인해서 비밀번호를 알아낸다. [모듈 설치 오류 시] 이 때 젠킨스 사이트에서 필요한 모듈들을 설치하게 되는 데 설치 오류가 뜨는 경우가 많다. 이럴 때는 jenkins의 버전을 업데이트 해야한다. 2-2. jenkins docker 내부에 docker 설치 모듈 설치를 완료했으면 외부 docker와 연결할 jenkins docker 내부의 도커를 설치한다. 3. 느낀 점 docker in docker 자체가 이해하고 나면 그다지 어렵지 않은 부분이어서 구현하는 데 큰 어려움은 없었다. 다만, jenkins 모듈 설치에서 업데이트 하는 방법을 좀 헤매면서 구글링을 하고 해답을 찾게 됐다. 혹여나 도커 인 도커로 jenkins를 구현하고자 하는 사람들에게 이 포스팅이 도움이 됐으면 좋겠다. [참고] https://mocadev.tistory.com/38</content:encoded></item><item><title><![CDATA[WebRTC 성능 비교(P2P vs SFU)]]></title><description><![CDATA[WebRTC의 이론을 기반으로 만든 1:N P2P vs SFU 성능비교를 해보자.]]></description><link>https://millo-L.github.io/WebRTC-성능비교-P2P-vs-SFU/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-성능비교-P2P-vs-SFU/</guid><pubDate>Sat, 16 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 지난 포스팅을 마지막으로 P2P(Mesh)와 SFU 방식의 1:N 화상회의 WebRTC 구현을 마쳤다. 구현의 마지막은 항상 성능 테스트 아닌가 해서 정말 간단하게 성능 테스트를 진행해봤다. 테스트를 위해서는 서버와 클라이언트가 독립적인 공간이 좋았겠지만 상황상 불가능했다는 것을 이해해줬으면 한다. 2. 성능 테스트(Performance Test) 2-1. 기기(Devices) device description CPU AMD Ryzen 5 3600 6-Core Processor 3.59GHz RAM 32GB GPU NVIDIA GeForce RTX 2060 SUPER OS Windows 10 Pro 2-2. 환경 설정(Settings) 모든 client들과 server는 한 기기에서 실행됐다. 위에서 말하는 1:N 방식은 일반적인 화상 회의를 기준으로 한다. 2-3. Client Side Performance(Chrome browser CPU usage) 모든 client들이 한 기기에서 실행되므로 CPU 점유율은 Chrome browser를 기준으로 책정했다. the number of users P2P/Mesh(Signaling Server) SFU(Media Server) 2 4% 5% 3 10% 8% 4 22% 9.5% 5 34% 18% 6 47% 25% 7 64% 30% 8 80% 30% 2-4. Server Side Performance(CPU usage) server를 node.js로 구현했으므로 CPU 점유율은 Node.js 프로세스를 기준으로 책정했다. the number of users P2P/Mesh(Signaling Server) SFU(Media Server) 2 0.1% 2% 3 0.1% 13% 4 0.1% 24% 5 0.1% 32% 6 0.1% 41% 7 0.1% 48% 8 0.1% 50% 3. 결과 정리(Results) 3-1. SFU Server(Media Server) client가…</content:encoded></item><item><title><![CDATA[WebRTC 구현하기(1:N SFU)]]></title><description><![CDATA[WebRTC의 이론을 기반으로 1:N SFU 미디어 서버를 만들어 실시간 영상 송수신을 구현해보자.]]></description><link>https://millo-L.github.io/WebRTC-구현하기-1-N-SFU/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-구현하기-1-N-SFU/</guid><pubDate>Fri, 15 Jan 2021 08:00:00 GMT</pubDate><content:encoded>1. 서론 지난 시간에는 WebRTC를 이용한 1:N P2P 통신에 대해서 포스팅했다. SFU 방식에 대해 포스팅을 할까말까 고민을 했는 데 그래도 하는 게 낫지 않을까 싶어 이렇게 글을 남긴다. SFU는 Media Server의 한 종류로 그에 대한 설명은 여기를 눌러 지난 포스팅을 확인해보기 바란다. 미디어 서버는 Kurento와 mediasoup 등을 이용하여 상용화 단계에서 사용한다. 하지만 글쓴이는 이론을 바탕으로 미디어 서버, 그 중 SFU 서버를 구성해보고자 했다. 이론적인 설명은 기존의 포스팅에서 다뤘으니 위의 여기 링크를 눌러 확인해보기 바란다. 이론적인 바탕은 모두 안다고 가정하고 구현에 대한 포스팅을 작성해보겠다. 2. 실제 코드 2-1. SFU Server(Node.js) 주의할 점: socket.io version=2.3.0을 사용하셔야 합니다. 1. 변수 설명 receiverPCs role 접속한 user의 MediaStream을 받기 위한 RTCPeerConnection을 저장 format receiverPCs[접속한 user의 socketID] = RTCPeerConnection 변수 senderPCs role 한 user에게 자신을 제외한 다른 user의 MediaStream을 보내기 위한 RTCPeerConnection을 저장 format senderPCs[보내지는 MediaStream의 user socketID] = [{id: 받는 user의 socketID, pc: MediaStream을 보내기 위한 RTCPeerConnection}, ...] senderPCs[socketID] = Array&lt;{id: string, pc: RTCPeerConnection}&gt; users role receiverPCs에서 연결된 RTCPeerConnection을 통해 받은 MediaStream을 user의 socketID와 함께 저장 format users[roomID] = [{id: MediaStream 보내는 user의 socketID…</content:encoded></item><item><title><![CDATA[WebRTC 구현하기(1:N P2P)]]></title><description><![CDATA[WebRTC의 이론을 기반으로 1:N P2P 실시간 영상 송수신을 구현해보자.]]></description><link>https://millo-L.github.io/WebRTC-구현하기-1-N-P2P/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-구현하기-1-N-P2P/</guid><pubDate>Thu, 31 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. 서론 지난 시간에는 WebRTC를 이용한 1:1 P2P 통신에 대해서 포스팅했다. 이번 포스팅은 저번 포스팅에서 설명한 개념은 안다고 가정하고 작성할 예정이기 때문에 혹시나 이 글을 먼저 본다면 이전 글을 다 읽고 오기를 추천한다. 1:N 연결이라고 해도 이전에 구현했던 1:1연결과 같은 P2P 연결(Signaling 서버 형식)을 구현할 것이기 때문에 크게 다른 점은 없다. 동적으로 연결되고 종료되는 일련의 과정을 설명하는 데 집중하도록 하겠다. 2. 구현 방식 2-1. 1:1 연결과의 공통점 화상 회의를 진행하는 상대방이 한 명에서 여러 명으로 변하긴 하지만 P2P(peer to peer)라는 점에서는 동일하다. 1:1 연결과 동일하게 Signaling 서버를 구성해서 상대방과의 통신을 연결한 후 부터는 서버가 관여하지 않고 Peer 간 통신만 이루어질 것이다. 2-2. 1:1 연결과의 차이점 1:N 연결은 저번 시간에 했던 1:1 연결과는 다르게 RTCPeerConnection을 화상 회의에 참여하는 수만큼 가지고 있어야 한다. 따라서 과부하가 매우 심하므로 4, 5명 정도와 테스트를 진행하는 것을 권장한다. 이 과부하에 대한 설명도 지난 포스트를 참고하길 바란다. 3. 실제 코드 3-1. Signaling Server(Node.js) 주의할 점: socket.io version=2.3.0을 사용하셔야합니다. 1. socket 이벤트 connection 지난 포스트와 동일 join_room 지난 포스트와 동일 offer data offerSendID: offer를 보내는 user의 socket id offerSendEmail: offer를 보내는 user의 email sdp: offer를 보내는 user의 RTCSessionDescription offerReceiveID: offer를 받을 user의 socket id role offer를 받아야하는 receiver에게 offer를 보내는 sender의 socket id, email, sdp…</content:encoded></item><item><title><![CDATA[[JavaScript] Callback 지옥 벗어나기]]></title><description><![CDATA[javascript callback 지옥에서 벗어나기 위해 promise와 async/await를 사용해보자.]]></description><link>https://millo-L.github.io/JavaScript-Callback-지옥-벗어나기/</link><guid isPermaLink="false">https://millo-L.github.io/JavaScript-Callback-지옥-벗어나기/</guid><pubDate>Mon, 28 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. 서론 JavaScript는 매우 유연하고 편리한 비동기식 언어이다. 글쓴이도 JavaScript 생태계를 매우 좋아하며 ReactJS, Node.js 등을 자주 사용하고 있다. (최근에는 Go로 갈아타려고 공부중이만..크흠) 정말 편리하고 좋은 언어인 JavaScript에서 가장 불편한 점이 있다면 바로 Callback 지옥일 것이다. 비동기 언어를 동기식으로 처리하려다 보니 Callback 안에 Callback 안에 Callback 안에 Callback이... 이러한 Callback 지옥은 코드 가독성을 떨어뜨려 협업에서 치명적인 것은 물론이거니와... 자신이 짠 코드마저 2주 뒤에 다시 보면 암호 해석을 해야하는 상황이 발생하게 된다. 이러한 문제점에 대한 해결책으로 나온 것이 Promise이고 이 마저도 코드 가독성을 떨어뜨리기 시작하자 async/await를 함께 사용하는 처리가 대세가 되고 있다. 1-1. JavaScript에서 코드가 비동기로 작동하는 경우 서버 API 호출 DB 호출 setTimeout 함수 무한 루프 또는 매우 많은 루프 2. Promise JavaScript의 Callback 지옥을 해결하기 위한 첫 번째 방안인 Promise이다. Promise 내부에 코드를 작성해 코드가 정상적으로 작동한다면 resolve, 비정상적으로 작동한다면 reject로 코드 작성자가 지정할 수 있으며, 해당 Promise를 할당 받은 변수에서 .then().catch().finally 등으로 결과 값을 처리할 수 있다. 2-1. Promise의 상태 Promise는 다음 중 하나의 상태를 가진다. pending: 초기 상태 fullfilled: 연산이 성공적으로 완료된 상태 rejected: 연산이 실패한 상태 주의할 점
프로미스는 대기 중이지 않으며 fullfilled 또는 rejected됐을 때 처리(settled)됐다고 말한다.  2-2. Promise의 method 1. Promise.all(iterable) iterable…</content:encoded></item><item><title><![CDATA[WebRTC 구현하기(1:1 P2P)]]></title><description><![CDATA[WebRTC의 이론을 기반으로 1:1 P2P 실시간 영상 송수신을 구현해보자.]]></description><link>https://millo-L.github.io/WebRTC-구현하기-1-1-P2P/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-구현하기-1-1-P2P/</guid><pubDate>Fri, 25 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. 서론 이전까지의 포스트에서는 WebRTC가 어떤 기술을 사용하고 개발자가 상황에 따라 어떤 서버를 같이 개발해야 하는지에 대해 알아봤다. 드디어 기다리고 기다리던 구현의 시간이다. 오늘의 목표는 ReactJS와 Typescript를 이용한 Client 1:1(P2P) WebRTC 구현과 node.js를 이용한 Signaling Server를 구현하는 것이다. 만약 이 말이 이해가 잘 되지 않는다면 이전의 포스트를 보고오기 바란다. 또한, 본 게시물은 ReactJS, Typescript 그리고 node.js를 설명하기 위한 글이 아니므로 WebRTC 구현을 위한 코드에만 초점을 맞춰서 설명하도록 하겠다. 2. 데이터 용어 정리 2-1. MediaStream(getUserMedia) 사용자의 카메라와 마이크 같은 곳의 데이터 스트림에 접근한다. navigator.mediaDevices.getUserMedia()에서 생성된 입력과 video 태그 또는 RTCPeerConnection으로 넘겨주는 출력을 갖는다. navigator.mediaDevices.getUserMedia()가 받는 3개의 매개변수 제약 오브젝트(video 사용 여부(또는 해상도), audio 사용 여부 등) 성공 시 콜백(MediaStream) 실패 시 콜백(error) getUserMedia()는 반드시 로컬 파일 시스템이 아닌 서버에서 사용되어야하며, 이외의 경우에는 PERMISSION_DENIED: 1 에러가 발생한다. 2-2. RTCPeerConnection 암호화 및 대역폭 관리를 하는 기능을 가지고 있고, 오디오 또는 비디오 연결을 한다. Peer들 간의 데이터를 안정적이고 효율적으로 통신하게 처리하는 WebRTC 컴포넌트이다. 아래는 RTCPeerConnection의 역할을 보여주는 WebRTC 아키텍쳐 다이어그램이다. RTCPeerConnection이 뒤에 숨겨진 녹색 부분은 매우 복잡하지만 웹개발자들이 처리하지 않아도 되는 부분이다. packet loss…</content:encoded></item><item><title><![CDATA[Implementing WebRTC using ReactJS and Typescript (1:1 P2P)]]></title><description><![CDATA[Based on the theory of WebRTC, let's implement 1:1 P2P real-time video transmission.]]></description><link>https://millo-L.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript-1-1-P2P/</link><guid isPermaLink="false">https://millo-L.github.io/Implementing-WebRTC-using-ReactJS-and-Typescript-1-1-P2P/</guid><pubDate>Fri, 25 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. Explanation of terms MediaStream(getUserMedia) It accesses data streams from places like the user’s camera and microphone.
It has the input created in navigator.mediaDevices.getUserMedia() and the output passed to the video tag or RTCPeerConnection.
3 parameters received by navigator.mediaDevices.getUserMedia() — Constrained object (whether video is used (or resolution), audio is used, etc.) Callback on success (MediaStream) Callback on failure (error) getUserMedia() must be used on a server other than a local file system. Otherwise, a PERMISSION_DENIED: 1 error occurs. RTCPeerConnection It has the function of encryption and bandwidth management, and makes an audio or video connection.
It is a WebRTC component that processes data between peers in a stable and efficient manner.
The following is a WebRTC architecture diagram showing the role of RTCPeerConnection. The green part behind RTCPeerConnection is very complicated, but it is part that web developers do not have to deal with…</content:encoded></item><item><title><![CDATA[WebRTC 구현 방식(Mesh/P2P, SFU, MCU)]]></title><description><![CDATA[WebRTC를 구현하기 위한 서버의 종류에 대해 알아보자. (Mesh/P2P, SFU, MCU)]]></description><link>https://millo-L.github.io/WebRTC-구현-방식-Mesh-SFU-MCU/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-구현-방식-Mesh-SFU-MCU/</guid><pubDate>Thu, 24 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. 서론 저번 포스트에서 작성했듯이 WebRTC는 ICE, STUN, TURN, SDP로 작동된다. 이 서버들과 프로토콜로만 작동이 된다면 매우 간편하겠지만 현실은 그렇지 않다.
P2P 연결을 완성시키기 위해서는 개발자가 peer간의 offer와 answer를 통한 session 정보를 중계해주는 서버를 만들어줘야한다.
하지만 P2P 연결로 3인, 4인 그리고 그 이상의 인원의 데이터 송수신을 지원하게 되면 클라이언트 측면에서의 과부하가 심하게 오기 때문에 권장하지 않는다.
이러한 문제의 해결책으로 나온 것이 SFU와 MCU 방식의 미디어 서버를 두는 것이다. 2. 서버의 종류 WebRTC를 위해 개발자가 구현할 수 있는 서버는 크게 세 종류가 있다. Signaling, SFU 그리고 MCU이다. 그렇다면 하나씩 알아보도록 하자.
 2-1. Signaling 서버(위 그림의 Mesh) 특징 peer 간의 offer, answer라는 session 정보 signal만을 중계한다. 따라서 처음 WebRTC가 peer간의 정보를 중계할 때만 서버에 부하가 발생한다. peer간 연결이 완료된 후에는 서버에 별도의 부하가 없다. 1:1 연결에 적합하다. 장점 서버의 부하가 적기 때문에 서버 자원이 적게 든다. peer간의 직접 연결로 데이터를 송수신하기 때문에 실시간 성이 보장된다. 단점 N:N 혹은 N:M 연결에서 클라이언트의 과부하가 급격하게 증가한다.
예를 들어, 위의 그림같이 5인이 WebRTC 연결을 한다고 가정하면 Uplink(나의 데이터를 연결된 다른 사용자에게 보내는 갯수) 4개, Downlink(연결된 다른 사용자의 데이터가 나에게 들어오는 갯수) 4개로 한 명당 총 8개의 link를 유지하며 데이터를 송수신하게 된다. (그림에서는 데이터를 주고 받는 것을 하나의 링크로 표현했다.) 2-2. SFU(Selective Forwarding Unit) 서버 특징 종단 간 미디어 트래픽을 중계하는 중앙 서버 방식이다. 클라이언트 peer…</content:encoded></item><item><title><![CDATA[[Docker] docker-compose (node.js, mysql) 실행 순서 동기화]]></title><description><![CDATA[docker-compose에서 dockerize를 사용하여 node.js와 mysql의 실행 순서를 동기화해보자.]]></description><link>https://millo-L.github.io/docker-compose-nodejs-mysql-실행-순서-동기화/</link><guid isPermaLink="false">https://millo-L.github.io/docker-compose-nodejs-mysql-실행-순서-동기화/</guid><pubDate>Thu, 24 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. 서론 대부분의 경우 AWS의 RDS나 워크스테이션의 DB 등을 사용하여 안정적인 DB 환경을 구축하지만, 테스트 용도나 간단한 프로젝트에서 DB를 구현할 때는 Docker를 이용할 수 있다. 이러면 MySQL의 데이터가 안정적이지 않다고 하는 사람들도 있지만, 그 문제는 volume을 연결하는 방식으로 해결할 수 있다. 그런데 막상 docker-compose로 node.js 서버와 mysql을 연결해보면 연결 오류가 나는 걸 알 수 있다. 그 문제는 바로 실행 순서 때문인데, mysql이 node.js 서버보다 느리게 구동되기 때문이다. 이를 위해 node.js가 mysql보다 느리게 구동되도록 동기화하는 작업이 필요하다. 이 포스팅에서는 node.js와 mysql을 예시로 들었지만 다른 언어의 서버, 다른 언어의 DB 모두에 적용할 수 있다. 2. 폴더 구조 위에서 언급한 것과 같이 /sync-docker/db/data 폴더는 mysql docker의 데이터 volume을 공유하는 폴더이다. 따라서, docker를 다시 실행하더라도 정보가 보존된다. 또한 /sync-docker/db/init 폴더의 init.sql을 생성하고 volume을 mysql docker와 공유하면 새로 시작할 때 초기의 DB와 Table들을 생성해둘 수 있다. 3. docker-compose.yml 우선, 실행되는 컨테이너 간 네트워크를 연결하기 위해선 반드시 docker의 network를 생성해야 한다. 이 부분은 설명이 길어지니 안다고 가정하고 넘어가겠다. 또한, server 컨테이너에서 생성한 network에 접속함과 동시에 depends_on을 사용해 db 컨테이너의 이름을 지정하면 된다. (여기서는 db 컨테이너의 이름을 &apos;db&apos;로 지정했다.) db 컨테이너에서는 volumes 부분에서 위에서 언급한 /init, /data 폴더를 db 컨테이너 내부의 폴더와 연결한다. (데이터 보존 및 초기화를 위해) 또한, command 부분에서는 DB의 문자 체계를 utf…</content:encoded></item><item><title><![CDATA[WebRTC implementation method(Mesh, SFU, MCU)]]></title><description><![CDATA[Let's learn about the types of servers to implement WebRTC. (Mesh/P2P, SFU, MCU)]]></description><link>https://millo-L.github.io/WebRTC-implementation-method-Mesh-SFU-MCU/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-implementation-method-Mesh-SFU-MCU/</guid><pubDate>Thu, 24 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. Introduction As I wrote in the last post, WebRTC works with ICE, STUN, TURN, and SDP. It would be very simple if it worked only with these servers and protocols, but the reality is not. To complete a P2P connection, a developer must create a server that relays session information through offers and answers between peers. However, it is not recommended to support data transmission/reception of 3, 4, and more people through a P2P connection because the client side is heavily overloaded.
The solution to this problem is to have SFU and MCU type media server. 2. Type of Server There are three main types of servers that developers can implement for WebRTC. Signaling, SFU and MCU. If so, let’s look at them one by one.
 2–1. Signaling Server(P2P/Mesh) Features It relays only the session information signal of offer and answer between peers. Therefore, the load on the server occurs only when WebRTC relays information between peers for the first time. After the connection between peers is…</content:encoded></item><item><title><![CDATA[WebRTC 이론 정리하기]]></title><description><![CDATA[WebRTC 이론 정리하기. ICE, SDP, STUN, TURN, NAT 등에 대해 알아보자.]]></description><link>https://millo-L.github.io/WebRTC-이론-정리하기/</link><guid isPermaLink="false">https://millo-L.github.io/WebRTC-이론-정리하기/</guid><pubDate>Tue, 22 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. WebRTC란 무엇일까? WebRTC(Web Real-Time Communication)란 웹 브라우저 환경 및 Android, IOS 애플리케이션에서도 사용 가능한 비디오, 음성 및 일반 데이터가 피어간에 실시간으로 전송되도록 지원하는 오픈 소스이다. 공개 웹 표준으로 구현되며 모든 주요 브라우저에서 일반 JavaScript API로 제공한다. (Apple, Google, Microsoft 및 Mozilla가 지원) 2. WebRTC의 기술 및 프로토콜 소개 2-1. ICE(Interactive Connectivity Establishment) 브라우저가 peer를 통한 연결이 가능하도록 해주는 프레임 워크이다. peer간 단순 연결 시 작동하지 않는 이유들 연결을 시도하는 방화벽을 통과해야 함 단말에 Public IP가 없다면 유일한 주소값을 할당해야 한다. 라우터가 peer간의 직접 연결을 허용하지 않을 때 데이터를 릴레이해야 하는 경우 ICE는 위의 작업들을 수행하기 위해 STUN과 TURN 서버 둘 다 혹은 하나의 서버를 사용한다. 2-2. STUN(Session Traversal Utilities for NAT) 서버 클라이언트 자신의 Public Address(IP:PORT)를 알려준다. peer간의 직접 연결을 막는 등의 라우터의 제한을 결정하는 프로토콜 (현재 다른 peer가 접근 가능하지 여부 결정) 클라이언트는 인터넷을 통해 클라이언트의 Public Address와 라우터의 NAT 뒤에 있는 클라이언트가 접근 가능한지에 대한 답변을 STUN서버에 요청한다.  2-3. NAT(Network Address Transilation) 단말에 공개 IP(Public IP) 주소를 할당하기 위해 사용한다. 라우터는 공개 IP 주소를 갖고 있고 모든 단말들은 라우터에 연결되어 있으며 비공개 IP주소(Private IP Address…</content:encoded></item><item><title><![CDATA[About WebRTC]]></title><description><![CDATA[Let's learn about ICE, SDP, STUN, TURN, and NAT in WebRTC.]]></description><link>https://millo-L.github.io/About-WebRTC/</link><guid isPermaLink="false">https://millo-L.github.io/About-WebRTC/</guid><pubDate>Tue, 22 Dec 2020 08:00:00 GMT</pubDate><content:encoded>1. What is WebRTC? WebRTC(Web Real-Time Communication) is an open source that enables real-time transmission of video, audio, and general data between peers, also available in web browser environments and Android and IOS applications.
It is implemented as an open web standard and is available in all major browsers as a regular JavaScript API. (Supported by Apple, Google, Microsoft, and Mozilla) 2. Introduction to WebRTC’s Technologies and Protocols 2–1. ICE(Interactive Connectivity Establishment) A framework that allows browsers to connect through peers.
Reasons why simple connections between peers might not work Need to go through firewall trying to connect If your device does not have a Public IP, you must assign the only address value. When a router does not allow direct connections between peers, it is necessary to relay data. ICE uses both STUN and TURN servers or one server to perform the above tasks. 2–2. STUN(Session Traversal Utilities for NAT) Server Provides the client’s own…</content:encoded></item></channel></rss>